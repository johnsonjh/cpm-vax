GAS LISTING circforth.s 			page 1


   1              		.text
   2              	#####
   3              	#
   4              	#	This particular variant limits the math stack to a 256-byte
   5              	#	page. This is annoying, in that none of the really cool VAX
   6              	#	addressing modes work that way...
   7              	#
   8              	#####
   9              	
  10              	#####
  11              	#
  12              	# __start
  13              	#
  14              	#	CP/M enters the program here. We are passed a single
  15              	#	parameter, the address of the base page. The first longword of
  16              	#	the base page contains a pointer to the BDOS, which we need
  17              	#	to squirrel away so we can call it.
  18              	#
  19              	#####
  20              	
  21              	__start:
  22 0000 FE0F     		.word 0x0ffe		# entry mask
  23 0002 D0AC0450 		movl 4(ap),r0
  24 0006 D050AF10 		movl r0,__base_page
  25 000a D060AF08 		movl (r0),__bdos_pointer
  26 000e D05EAF0C 		movl sp,__initial_sp
  27 0012 17CFB01F 		jmp Forth$$Begin
  28              	
  29              	__bdos_pointer:
  30 0016 00000000 		.long 0
  31              	__base_page:
  32 001a 00000000 		.long 0
  33              	__initial_sp:
  34 001e 00000000 		.long 0
  35              	
  36              	####
  37              	#
  38              	# ConIn
  39              	#
  40              	#	Receives a character from the console, returning it in R0.
  41              	#
  42              	####
  43              	
  44              	__ConIn_Args:
  45 0022 02000000 		.long 2			# Two parameters
  46 0026 06000000 		.long 6			# Direct Console I/O
  47 002a FF000000 		.long 0xff		# Read a character
  48              	
  49 002e D0AFE550 	ConIn:	movl __bdos_pointer,r0
  50 0032 FAAFED60 		callg __ConIn_Args,(r0)
  51 0036 05       		rsb
  52              	
  53              	####
  54              	#
  55              	# ConSt
  56              	#
  57              	#	Polls the console to see if a character is available.
GAS LISTING circforth.s 			page 2


  58              	#
  59              	###
  60              	
  61              	__ConSt_Args:
  62 0037 02000000 		.long 2			# Two parameters
  63 003b 06000000 		.long 6			# Direct Console I/O
  64 003f FE000000 		.long 0xfe		# Check status
  65              	
  66 0043 D0AFD050 	ConSt:	movl __bdos_pointer,r0
  67 0047 FAAFED60 		callg __ConSt_Args,(r0)
  68 004b 05       		rsb
  69              	
  70              	####
  71              	#
  72              	# ConOut
  73              	#
  74              	#	Display the character on R0 on the console.
  75              	#
  76              	####
  77              	
  78              	__ConOut_Args:
  79 004c 02000000 		.long 2			# Two parameters
  80 0050 06000000 		.long 6			# Direct Console I/O
  81              	__ConOut_Char:
  82 0054 00000000 		.long 0			# The character
  83              	
  84              	ConOut:
  85 0058 D050AFF8 		movl r0,__ConOut_Char
  86 005c D0AFB750 		movl __bdos_pointer,r0
  87 0060 FAAFE960 		callg __ConOut_Args,(r0)
  88 0064 05       		rsb
  89              	
  90              	 #****************************************************************************
  91              	 #
  92              	 #	Position-independent 32-bit VAX Forth small enough to fit in the
  93              	 #	primary cache of NV5.
  94              	 #
  95              	 #	Modified for use in a downline-boot diagnostic environment. Offsets
  96              	 #	are now 32 bits, allowing 4MB to be ALLOTted for TURBOchannel
  97              	 #	DMA skidpad.
  98              	 #
  99              	 #	Although the data manipulated by this Forth is 32-bits, 16-bit
 100              	 #	relative offsets are stored in compiled words. This is to make it
 101              	 #	1) position-independent and 2) small enough to fit in NV5's PCache.
 102              	 #	Since the target execution environment is NV5's PCache, limiting
 103              	 #	code size to 64KB using the 16-bit offsets is not a problem.
 104              	 #
 105              	 #	This forth started out as port of Allan Pratt's C-Forth, which is
 106              	 #	a port of FigFORTH to a portable C for migration to Un*x boxes.
 107              	 #	Mr. Pratt dropped some features he couldn't figure out how to implement
 108              	 #	(such as DOES> and vocabularies), and I don't understand them (yet);
 109              	 #	they remain dropped. The vocabulary is largely FigFORTH.
 110              	 #
 111              	 #	I've also dropped the "user variable" concept because I don't
 112              	 #	understand it. I believe it exists mainly to support FORTH multitasking,
 113              	 #	which I don't plan on ever using.
 114              	 #
GAS LISTING circforth.s 			page 3


 115              	 # revisions:
 116              	 #
 117              	 #	2005-03-28 rli: Began translation to gas.
 118              	 #
 119              	 #*****************************************************************************
 120              	
 121              	 #	Macro to generate a string consisting of ASCII characters with the
 122              	 #	last bit set.
 123              	
 124              		.macro string value
 125              		.byte 1f-0f
 126              	0:
 127              		.ascii "\value"
 128              	1:
 129              		.endm
 130              	
 131              	 #	Macro to generate the header for a word. A header looks like this:
 132              	 #
 133              	 #	+--------+
 134              	 #	|1IS     | Length of name. S = 0 to allow name to be found
 135              	 #	+--------+ \               I = 1 for immediate word
 136              	 #	|0       |  |
 137              	 #	/\/\/\/\/\  |
 138              	 #	/\/\/\/\/\   > Characters in name
 139              	 #	|0       |  |
 140              	 #	+--------+ /
 141              	 #	|        |     Offset to previous word's name
 142              	 #	|        |
 143              	 #	+--------+
 144              	 #	|        |     Code Field Address
 145              	 #	|        |
 146              	 #	+--------+
 147              	 #	|        |     Parameter Field Address
 148              	 #	/\/\/\/\/\
 149              	 #	/\/\/\/\/\
 150              	 #	|        |
 151              	 #	+--------+
 152              	 #
 153              	 #	The code field address is the address of machine code that is
 154              	 #	executed when the word is referenced. For Forth code, this
 155              	 #	machine code pushes the IP on the stack and begins interpreting
 156              	 #	the parameter field as forth words.
 157              	 #
 158              	 #	A reference to a forth word is two levels away from machine code.
 159              	 #	The first level is a reference to the CFA of the word. The second
 160              	 #	level is the machine code that knows how to "do" the word. The
 161              	 #	forth interpreter must relocate at each level of indirection to
 162              	 #	make a PIC implementation.
 163              	 #
 164              	 #	This macro also has to handle the special case of a null Codename
 165              	 #	for the null word.
 166              	
 167              	Immediate = 0x40
 168              	
 169              	###
 170              	#
 171              	#	Because gas sucks so bad, we have to tell it the name of the
GAS LISTING circforth.s 			page 4


 172              	#	previous word so we can build the link field. A real assembler
 173              	#	allows us to keep a symbol updated as we build the links, but
 174              	#	gas fills all the links in using the final value of the symbol.
 175              	#	ARGH!
 176              	#
 177              	###
 178              		.macro header_nfalink previousname,suffix
 179              		.long \previousname\suffix - .
 180              		.endm
 181              	
 182              		.macro header_label name,suffix
 183              	\name\suffix:
 184              		.endm
 185              	
 186              		.macro header_pfaoffset name,suffix
 187              	\name\suffix = .+4
 188              		.endm
 189              	
 190              	 #	Macro for putting forth words together
 191              	
 192              		.macro offset label
 193              		.long \label-.
 194              		.endm
 195              	
 196              	###
 197              	#
 198              	#	Generate a special header for the null word, which is immediate.
 199              	#	Since the list of words has to start somewhere and gas sucks so
 200              	#	much that it can't keep track of that for us, we now require the
 201              	#	null word to be the first word in the dictionary.
 202              	#
 203              	###
 204              	
 205              		.macro null_header
 206              		.equ header_temp,.
 207              		header_label "null","_nfa"
 208              		.byte 1+0x80+0x20+0x40
 209              		.byte 0
 210              		header_label "null","_lfa"
 211              		.long 0
 212              	null:
 213              		offset DoCol
 214              		.endm
 215              	
 216              		.macro header codename, username, previousname, flags=0
 217              		header_label "\codename","_nfa"
 218              		.byte (1f-0f)+\flags+0x80+0x20
 219              	0:
 220              		.ascii "\username"
 221              	1:
 222              		header_label "\codename","_lfa"
 223              		header_nfalink "\previousname","_nfa"
 224              	\codename:
 225              		header_pfaoffset "\codename","_pfa"
 226              		.endm
 227              	
 228              	 #	Macro to generate a variable. It's initialized to zero.
GAS LISTING circforth.s 			page 5


 229              	
 230              		.macro variable name, username, previousname
 231              		Header "\name", "\username", "\previousname"
 232              		offset DoVar
 233              		.long 0
 234              		.endm
 235              	
 236              	 #	Macro to generate a constant.
 237              	
 238              		.macro constant name, username, previousname, value
 239              		header "\name","\username","\previousname"
 240              		offset DoCon
 241              		.long \value
 242              		.endm
 243              	
 244              	 #	Macro to generate a forth word
 245              	
 246              		.macro colon name, username, previousname, immediate=0
 247              		header "\name","\username","\previousname",\immediate
 248              		offset DoCol
 249              		.endm
 250              	
 251              	 #	Macro to generate a machine code word that can be referenced as
 252              	 #	if it were a forth word; i.e., one that shows up in the dictionary.
 253              	 #	For these words, the address of the machine code that knows how to
 254              	 #	"do" the word is the address of the PFA.
 255              	
 256              		.macro code name, username, previousname, immediate=0
 257              		header "\name","\username","\previousname",\immediate
 258              		.long 4
 259              		.endm
 260              	
 261              	 #	Macro to compile a literal into a forth code word
 262              	 #
 263              	 #	If the literal fits into a single byte, ZBLIT is used instead of
 264              	 #	LIT; ZBLIT knows how to zero-extend bytes into a longword.
 265              	 #
 266              	 #	Unfortunately, LITERAL isn't smart enough to know about ZBLIT; in
 267              	 #	other words, the base word set can make use of this optimization,
 268              	 #	but it isn't available for any words you type in.
 269              	
 270              		.macro literal, value
 271              	 #.if value & ~255
 272              		offset LIT
 273              		.long \value
 274              	 #.else
 275              	 #	offset ZBLIT
 276              	 #	.byte \value
 277              	 #.endc
 278              		.endm
 279              	
 280              	 #	Macro to compile a DOES> trampoline. If I ever get serious about
 281              	 #	using DOES>, I'll want one of these.
 282              	
 283              		.macro does
 284              	
 285              		offset PSemiCode	# Point the new word's CFA at the
GAS LISTING circforth.s 			page 6


 286              		.long 8			# trampoline
 287              		offset SemiS
 288              	
 289              	 #	Here's the DOES> trampoline
 290              	
 291              		subb2 $4,r7		# Make space on the math stack for the PFA
 292              		moval 4(r9),(r7)	# Push the PFA on the stack
 293              		movl r10,-(sp)		# Save the next IP so we can return to it
 294              		moval 1f,r10		# Point at the DOES> tail
 295              		jmp (r11)		# Execute the DOES> tail
 296              	1:				# DOES> tail goes here.
 297              		.endm
 298              	
 299              	 #	The initialization code is responsible for providing us with a
 300              	 #	return stack. I did this mainly so I could debug the sucker under
 301              	 #	VMS without running into problems with the tiny stack I want to
 302              	 #	use in NV5's PCache (one page of stack just isn't enough to do
 303              	 #	a QIO).
 304              	
 305              	 #	Space for the math stack
 306              	
 307 0065 01010101 		.align 8
 307      01010101 
 307      01010101 
 307      01010101 
 307      01010101 
 308              	MathSpace:
 309 0100 00000000 		.space 256,0
 309      00000000 
 309      00000000 
 309      00000000 
 309      00000000 
 310              	
 311              	 #	Space for terminal input; when you type something at the console, it
 312              	 #	goes here.
 313              	
 314              	TibBuffer:			# For BDOS function 10
 315 0200 4F       		.byte 79
 316 0201 00       		.byte 0
 317              	TibSpace:
 318 0202 00000000 		.space 79,0
 318      00000000 
 318      00000000 
 318      00000000 
 318      00000000 
 319              	TibSpaceEnd:
 320              	
 321              	 #	Space for building formatted numeric output. This is much larger
 322              	 #	than is needed for formatted numeric output, but the space may
 323              	 #	come in handy for other things.
 324              	
 325 0251 00000000 		.space 79,0
 325      00000000 
 325      00000000 
 325      00000000 
 325      00000000 
 326              	PadSpaceEnd:
GAS LISTING circforth.s 			page 7


 327              	
 328              	 #	Register Usage:
 329              	 #
 330              	 #	R0 -
 331              	 #	R1 -
 332              	 #	R2 -
 333              	 #	R3 -
 334              	 #	R4 -
 335              	 #	R5 -
 336              	 #	R6 - 
 337              	 #	R7 - math stack pointer
 338              	 #	R8 -
 339              	 #	R9 -  W, may be munched by CODE words
 340              	 #	R10 - IP
 341              	 #	R11 - Contains the address of Next so words can exit by JMP (R11),
 342              	 #	      one byte shorter than BRW Next
 343              	 #	R12 - VAX AP
 344              	 #	R13 - VAX FP
 345              	 #	R14 - VAX SP, used for return stack
 346              	 #	R15 - VAX PC, of course
 347              	
 348              	Next:
 349              	
 350              	 #C	This is the big kabloona. What it does is load the value at mem[ip]
 351              	 #C	into w, increment ip, and invoke prim. number w. This implies that
 352              	 #C	mem[ip] is the CFA of a word. What's in the CF of a word is the
 353              	 #C	number of the primitive which should be executed. For a word written
 354              	 #C	in FORTH, that primitive is "docol", which pushes ip to the return
 355              	 #C	stack, then uses w+2 (the PFA of the word) as the new ip. See 
 356              	 #C	"interp.doc" for more
 357              	
 358              	 #	What I'm doing differently is using word offsets in the CFA to the
 359              	 #	word to be executed. The assumption is that the code will be
 360              	 #	relatively small (this thing is meant to be able to execute in the
 361              	 #	8K cache inside the NV5), so I don't want to be lugging around
 362              	 #	32 bit addresses. Therefore, what I actually do is add the word
 363              	 #	at mem[ip] to ip to come up with the value to be loaded in w.
 364              	 #	Then, I can't simply jump to the address stored in mem[w]; I have
 365              	 #	relocate it before I can jump to it.
 366              	
 367 02a0 C16A5A59 		addl3 (r10),r10,r9	# Fetch the offset to next forth word and
 368              					# convert it to an address
 369 02a4 C1695958 		addl3 (r9),r9,r8	# Fetch the offset to the machine code
 370              					# and convert it to an address
 371 02a8 D58A     		tstl (r10)+		# ip++;
 372 02aa 1768     		jmp (r8)		# Execute the word. The word finishes by
 373              					# jumping to Next
 374              	
 375              	 #	Here's the code that knows how to enter a Forth word
 376              	
 377              	DoCol:
 378 02ac D05A7E   		movl r10,-(sp)		# Save the return address
 379 02af C104595A 		addl3 $4,r9,r10		# Start executing after docol
 380 02b3 176B     		jmp (r11)
 381              	
 382              	 #	Here's the code that knows how to do a constant
 383              	
GAS LISTING circforth.s 			page 8


 384              	DoCon:
 385 02b5 820457   		subb2 $4,r7
 386 02b8 D0A90467 		movl 4(r9),(r7)
 387 02bc 176B     		jmp (r11)
 388              	
 389              	 #	Here's the code that knows how to do a variable
 390              	
 391              	DoVar:
 392 02be 820457   		subb2 $4,r7
 393 02c1 C1045967 		addl3 $4,r9,(r7)
 394 02c5 176B     		jmp (r11)
 395              	
 396              	 #	: {NUL}
 397              	 #	  R> DROP
 398              	 #	;*
 399              	 #
 400              	 #	This special word is found at the end of a command line. It is
 401              	 #	used to break out of the interpreter; at the end of the command
 402              	 #	line, the interpreter will search for the terminating null ending
 403              	 #	the line. It will find and execute this word. This word drops
 404              	 #	a return address from the return stack.
 405              	
 406 02c7 E1000000 		null_header
 406      0000DFFF 
 406      FFFF
 407 02d1 46010000 		offset FromR
 408 02d5 FD010000 		offset DROP
 409 02d9 6A110000 		offset SemiS
 410              	
 411              	 #	Branch: Add an offset to the IP.
 412              	 #
 413              	 #	The word following the the opcode is taken as a relative offset
 414              	 #	indicating the length of the branch. At entry, IP (R10) points to the
 415              	 #	word following the opcode, because Next incremented IP before executing
 416              	 #	the opcode. This word is fetched, sign-extended, and added to IP.
 417              	 #
 418              	 #	The branch code is also used by 0Branch.
 419              	
 420 02dd A6425241 		code "BRANCH","BRANCH","null"
 420      4E4348E3 
 420      FFFFFF04 
 420      000000
 421              	ZBranch_Branch:
 422 02ec C06A5A   		addl2 (r10),r10		# Update IP.
 423 02ef 176B     		jmp (r11)
 424              	
 425              	 #	0Branch: Add an offset to IP if tos == 0
 426              	 #
 427              	 #	The word following the opcode is taken as a relative offset that
 428              	 #	is to be added to IP (R10) if the top element on the math stack
 429              	 #	is zero. In either case, the top element is removed from the
 430              	 #	math stack.
 431              	 #
 432              	 #	The code to skip the relative offset if the condition is not
 433              	 #	met is used in several places.
 434              	
 435 02f1 A7304252 		code "ZBranch","0BRANCH","BRANCH"
GAS LISTING circforth.s 			page 9


 435      414E4348 
 435      E4FFFFFF 
 435      04000000 
 436 0301 D06750   		movl (r7),r0		# get TOS
 437 0304 800457   		addb2 $4,r7		# pop it
 438 0307 D550     		tstl r0			# is TOS zero?
 439 0309 13E1     		beql ZBranch_Branch	# If so, go
 440              	ZBranch_Skip:
 441 030b D58A     		tstl (r10)+		# Skip the offset
 442 030d 176B     		jmp (r11)		# Next word
 443              	
 444              	 #	(loop): -- loop control
 445              	 #
 446              	 #	Assumes the return stack contains:
 447              	 #	 (sp) = index
 448              	 #	4(sp) = limit
 449              	 #
 450              	 #	This word does the end of a do loop; it updates the index and
 451              	 #	compares it to the limit to see if the loop should terminate. The
 452              	 #	index and limit are store on the return stack instead of the 
 453              	 #	math stack so that the math stack is available for mutilation.
 454              	 #
 455              	 #	The word following the opcode contains a relative index that will
 456              	 #	be added to the IP (R10) if the loop is to be continued; that is,
 457              	 #	the word following the opcode contains the relative offset to the
 458              	 #	top of the loop.
 459              	 #
 460              	 #	If the loop is not to be continued, the relative index is skipped.
 461              	 #
 462              	 #	The code decides to branch based on the index being less than the
 463              	 #	limit instead of deciding to skip if the index is the same as the
 464              	 #	limit to allow LEAVE to force the loop to exit by setting the index
 465              	 #	equal to the limit; since the code increments the index first,
 466              	 #	doing it the other way would cause an infinite loop if you decided
 467              	 #	to LEAVE.
 468              	 #
 469              	 #	The label PLoop_1 is used by (+LOOP) so that it doesn't have to
 470              	 #	duplicate the test for the end of the index.
 471              	
 472 030f A6284C4F 		code "PLoop","(LOOP)","ZBranch"
 472      4F5029DB 
 472      FFFFFF04 
 472      000000
 473 031e D66E     		incl (sp)		# Update index
 474              	PLoop_1:
 475 0320 D16EAE04 		cmpl (sp),4(sp)		# Still need to loop?
 476 0324 1FC6     		blssu ZBranch_Branch	# If not, branch to top of loop
 477              	
 478 0326 D58E     		tstl (sp)+		# Discard index
 479 0328 D58E     		tstl (sp)+		# Discard limit
 480 032a 11DF     		brb ZBranch_Skip	# Skip offset AND do next word
 481              	
 482              	 #	(+loop): -- almost the same as (loop)
 483              	 #
 484              	 #	Assumes the return stack contains:
 485              	 #	 (sp) = index
 486              	 #	4(sp) = limit
GAS LISTING circforth.s 			page 10


 487              	 #
 488              	 #	This procedure adds the value on top of the math stack to the
 489              	 #	loop index and then does the rest of (LOOP); it's like (LOOP)
 490              	 #	except you can specify an increment other than one.
 491              	 #
 492              	 #	The increment is discarded from the math stack.
 493              	 #
 494              	 #	Like (LOOP), (+LOOP) is followed by a word containing the relative
 495              	 #	offset to the top of the loop.
 496              	
 497 032c A7282B4C 		code "PPLoop","(+LOOP)","PLoop"
 497      4F4F5029 
 497      DBFFFFFF 
 497      04000000 
 498 033c C0676E   		addl2 (r7),(sp)		# Add increment to index
 499 033f 800457   		addb2 $4,r7		# discard increment
 500 0342 11DC     		brb PLoop_1		# Check for loop completion
 501              	
 502              	 #	(do): limit init -- [pushed to rstack]
 503              	 #
 504              	 #	This procedure is the run-time initialization of a do loop; it takes
 505              	 #	the limit and initial value from the math stack and transfers them
 506              	 #	to the return stack to make the return stack look like what (loop)
 507              	 #	and (+loop) expect it to look like.
 508              	 #
 509              	 #	$$$
 510              	
 511 0344 A428444F 		code "PDo","(DO)","PPLoop"
 511      29E3FFFF 
 511      FF040000 
 511      00
 512 0351 D06750   		movl (r7),r0		# fetch init
 513 0354 800457   		addb2 $4,r7		# discard init and point at limit
 514 0357 D0677E   		movl (r7),-(sp)		# push limit
 515 035a D0507E   		movl r0,-(sp)		# push init
 516 035d 800457   		addb2 $4,r7		# discard limit
 517 0360 176B     		jmp (r11)
 518              	
 519              	 #	: DO
 520              	 #	  COMPILE (DO) HERE LIT 3
 521              	 #	;*
 522              	 #
 523              	 #	This word compiles the start of a do loop into the code. It adds
 524              	 #	the address of (DO) into the word and copies the address of the
 525              	 #	start of the code inside the DO loop onto the math stack. This
 526              	 #	will be used later by LOOP and +LOOP.
 527              	 #
 528              	 #	The 3 marks the stuff on the math stack as belonging to a DO loop.
 529              	
 530 0362 E2444FDF 		colon "DO","DO","PDo",Immediate
 530      FFFFFF43 
 530      FFFFFF
 531 036d E8130000 		offset COMPILE		# Append (DO) to the current word
 532 0371 DCFFFFFF 		offset PDo
 533 0375 20090000 		offset HERE		# Remember address of top of loop
 534 0379 7A080000 		literal 3		# and that we're doing a DO loop
 534      03000000 
GAS LISTING circforth.s 			page 11


 535 0381 C2100000 		offset SemiS
 536              	
 537              	 #	: LOOP
 538              	 #	  LIT 3 ?PAIRS COMPILE (LOOP) O,
 539              	 #	;*
 540              	 #
 541              	 #	This word compiles the end of a DO loop for the standard increment
 542              	 #	of one. If we're currently compiling a DO loop, it appends 
 543              	 #	(LOOP) followed by the offset to the top of the loop to current
 544              	 #	word.
 545              	 #
 546              	 #	$$$
 547              	
 548 0385 E44C4F4F 		colon "LOOP","LOOP","DO",Immediate
 548      50D8FFFF 
 548      FF1EFFFF 
 548      FF
 549 0392 61080000 		literal 3		# Complain if we're not doing a DO loop
 549      03000000 
 550 039a BC160000 		offset QPairs
 551 039e B7130000 		offset COMPILE		# Append (LOOP) to the word
 552 03a2 78FFFFFF 		offset PLoop
 553 03a6 88090000 		offset OComma		# and the offset to the top of the loop
 554 03aa 99100000 		offset SemiS
 555              	
 556              	 #	: +LOOP
 557              	 #	  LIT 3 ?PAIRS COMPILE (+LOOP) O,
 558              	 #	;*
 559              	 #
 560              	 #	This word compiles the end of a DO loop when an increment other than
 561              	 #	one is needed. If we're currently compiling a DO loop, (+LOOP) is
 562              	 #	appended to the word followed by the offset to the top of the 
 563              	 #	loop.
 564              	 #
 565              	 #	$$$
 566              	
 567 03ae E52B4C4F 		colon "PlusLoop","+LOOP","LOOP",Immediate
 567      4F50D1FF 
 567      FFFFF4FE 
 567      FFFF
 568 03bc 37080000 		literal 3		# Complain if we're not doing a DO loop
 568      03000000 
 569 03c4 92160000 		offset QPairs
 570 03c8 8D130000 		offset COMPILE		# Append (+LOOP) to the word
 571 03cc 6CFFFFFF 		offset PPLoop
 572 03d0 5E090000 		offset OComma		# and the offset to the top of the loop
 573 03d4 6F100000 		offset SemiS
 574              	
 575              	 #	leave: set the index = the limit of a DO
 576              	 #
 577              	 #	Assumes:
 578              	 #	 (sp) = index
 579              	 #	4(sp) = limit
 580              	 #
 581              	 #	This procedure updates the return stack such that the next
 582              	 #	(LOOP) or (+LOOP) will cause the loop to exit. It does this by
 583              	 #	clearing the limit so that the index cannot be less than the
GAS LISTING circforth.s 			page 12


 584              	 #	limit next time it is checked ( (LOOP) and (+LOOP) use an
 585              	 #	unsigned comparison).
 586              	
 587 03d8 A54C4541 		code "LEAVE","LEAVE","PlusLoop"
 587      5645D0FF 
 587      FFFF0400 
 587      0000
 588 03e6 D4AE04   		clrl 4(sp)		# Clear limit
 589 03e9 176B     		jmp (r11)
 590              	
 591              	 #	I: Copy current do loop limit to math stack
 592              	 #
 593              	 #	This word is used by the innards of a DO loop to examine the
 594              	 #	index. Since the index is the top item of the return stack, the
 595              	 #	top of the return stack is pushed onto the math stack.
 596              	 #
 597              	 #	Since R is essentially a synonym for I, it enters at RI1.
 598              	
 599 03eb A149EBFF 		code "I","I","LEAVE"
 599      FFFF0400 
 599      0000
 600 03f5 820457   	RI1:	subb2 $4,r7		# make space for copy of return stack
 601 03f8 D06E67   		movl (sp),(r7)		# put it on the math stack.
 602 03fb 176B     		jmp (r11)
 603              	
 604              	 #	>R: a -- Push onto return stack
 605              	 #
 606              	 #	This word pushes the item currently on the top of the math stack
 607              	 #	onto the return stack.
 608              	
 609 03fd A23E52EB 		code "ToR",">R","I"
 609      FFFFFF04 
 609      000000
 610 0408 D0677E   		movl (r7),-(sp)		# push top of math stack on return stack
 611 040b 800457   		addb2 $4,r7		# discard top of math stack.
 612 040e 176B     		jmp (r11)
 613              	
 614              	 #	<R: -- a <pop from return stack>
 615              	 #
 616              	 #	This word pushes the item currently on top of the return stack
 617              	 #	onto the math stack.
 618              	
 619 0410 A2523EEA 		code "FromR","R>","ToR"
 619      FFFFFF04 
 619      000000
 620 041b 820457   		subb2 $4,r7		# make space on math stack
 621 041e D08E67   		movl (sp)+,(r7)		# copy top of return stack over & discard it
 622 0421 176B     		jmp (r11)
 623              	
 624              	
 625              	 #	R: Copy top of return stack to math stack
 626              	 #
 627              	 #	This word is used when you want to retrieve an item from the
 628              	 #	top of the return stack without modifying the return stack; the
 629              	 #	return stack is used as a convenient place to stash local variables.
 630              	 #
 631              	 #	Since this is essentially a synonym for I, it hops into the middle
GAS LISTING circforth.s 			page 13


 632              	 #	of the code for I.
 633              	
 634 0423 A152EBFF 		code "R","R","FromR"
 634      FFFF0400 
 634      0000
 635 042d 11C6     		brb RI1			# See I
 636              	
 637              	 #	RP@: -- return stack pointer
 638              	 #
 639              	 #	This procedure returns the current value of the return stack pointer.
 640              	 #	Again, I'm not sure how useful this is since I'm not supporting 
 641              	 #	other things needed for FORTH multitasking.
 642              	
 643 042f A3525040 		code "RPFetch","RP@","R"
 643      F0FFFFFF 
 643      04000000 
 644 043b 820457   		subb2 $4,r7		# make space on math stack
 645 043e D05E77   		movl sp,-(r7)		# push copy of return stack pointer
 646 0441 176B     		jmp (r11)
 647              	
 648              	 #	RP!: --  <Initialize return stack pointer>
 649              	 #
 650              	 #	This procedure restores the return stack to its original value. 
 651              	 #	This is used when aborting.
 652              	 #
 653              	 #	I'm assuming the original caller of the FORTH system initialized
 654              	 #	the stack pointer. This lets me debug under VMS without needing
 655              	 #	a large array to handle stack requirements of (e.g.) $QIO; the
 656              	 #	VMS code can simply pass in the stack pointer it got from VMS.
 657              	 #	The I/O routines for embedded apps are responsible for allocating
 658              	 #	stack space and initializing the stack pointer before starting
 659              	 #	FORTH.
 660              	
 661 0443 A3525021 		code "RPStore","RP!","RPFetch"
 661      E8FFFFFF 
 661      04000000 
 662 044f D0CFCBFB 		movl __initial_sp,sp
 662      5E
 663 0454 176B     		jmp (r11)
 664              	
 665              	 #	SWAP: a b -- b a
 666              	 #
 667              	 #	This procedure swaps the two items at the top of the math stack.
 668              	
 669 0456 A4535741 		code "SWAP","SWAP","RPStore"
 669      50E8FFFF 
 669      FF040000 
 669      00
 670 0463 D06750   		movl (r7),r0		# r0 <- b
 671 0466 800457   		addb2 $4,r7		# point at a
 672 0469 D06751   		movl (r7),r1		# r1 <- a
 673 046c D05067   		movl r0,(r7)		# replace a with b
 674 046f 820457   		subb2 $4,r7		# make space for a
 675 0472 D05167   		movl r1,(r7)		# put b on top
 676 0475 176B     		jmp (r11)
 677              	
 678              	 #	Rot: a b c -- b c a
GAS LISTING circforth.s 			page 14


 679              	 #
 680              	 #	This procedure shuffles the top three items on the math stack
 681              	 #	as indicated.
 682              	 #
 683              	 #	$$$
 684              	
 685 0477 A3524F54 		colon "ROT","ROT","SWAP"
 685      DBFFFFFF 
 685      2DFEFFFF 
 686 0483 81FFFFFF 		offset ToR	# ( a b c -- a b )
 687 0487 D8FFFFFF 		offset SWAP	#         -- b a )
 688 048b 8CFFFFFF 		offset FromR	#         -- b a c )
 689 048f D0FFFFFF 		offset SWAP	#         -- b c a )
 690 0493 B00F0000 		offset SemiS
 691              	
 692              	 #	over: a b -- a b a
 693              	 #
 694              	 #	This procedure duplicates the second item on the math stack,
 695              	 #	pushing a new copy on the top.
 696              	
 697 0497 A44F5645 		code "OVER","OVER","ROT"
 697      52DBFFFF 
 697      FF040000 
 697      00
 698 04a4 D05750   		movl r7,r0	# form address of a
 699 04a7 800450   		addb2 $4,r0
 700 04aa 820457   		subb2 $4,r7	# make space for the copy
 701 04ad D06067   		movl (r0),(r7)	# copy a to top of stack
 702 04b0 176B     		jmp (r11)
 703              	
 704              	 #	dup: a - a a
 705              	 #
 706              	 #	This procudure duplicates the top item of the math stack.
 707              	
 708 04b2 A3445550 		code "DUP","DUP","OVER"
 708      E1FFFFFF 
 708      04000000 
 709 04be D06750   		movl (r7),r0	# fetch top of math stack
 710 04c1 820457   		subb2 $4,r7	# make space for copy
 711 04c4 D05067   		movl r0,(r7)	# do the deed
 712 04c7 176B     		jmp (r11)
 713              	
 714              	 #	DROP: a --
 715              	 #
 716              	 #	Forgets the item on top of the math stack.
 717              	
 718 04c9 A444524F 		code "DROP","DROP","DUP"
 718      50E4FFFF 
 718      FF040000 
 718      00
 719 04d6 800457   		addb2 $4,r7	# discard top of math stack
 720 04d9 176B     		jmp (r11)
 721              	
 722              	
 723              	 #	2dup: a b -- a b a b
 724              	 #
 725              	 #	This procedure duplicates a 64-bit value on top of the math stack.
GAS LISTING circforth.s 			page 15


 726              	
 727 04db A4324455 		code "TwoDUP","2DUP","DROP"
 727      50E9FFFF 
 727      FF040000 
 727      00
 728 04e8 D05750   		movl r7,r0	# save address of b
 729 04eb 820857   		subb2 $8,r7	# make space for a quadword
 730 04ee 7D6067   		movq (r0),(r7)	# copy it
 731 04f1 176B     		jmp (r11)
 732              	
 733              	 #	SP@: -- math stack pointer
 734              	 #
 735              	 #	This procedure returns the current value of the math stack. I return
 736              	 #	the value before it's fetched; I'm not sure it's important. I'm
 737              	 #	also not sure what use it is since I'm not doing other stuff
 738              	 #	important to FORTH multitasking.
 739              	
 740 04f3 A3535040 		code "SPFetch","SP@","TwoDUP"
 740      E4FFFFFF 
 740      04000000 
 741 04ff D05750   		movl r7,r0		# save copy of math stack pointer
 742 0502 820457   		subb2 $4,r7		# make space for the copy
 743 0505 D05067   		movl r0,(r7)		# put copy on math stack
 744 0508 176B     		jmp (r11)
 745              	
 746              	 #	sp!: -- <math stack pointer is loaded with original value>
 747              	 #
 748              	 #	This procedure initializes the math stack pointer to its default
 749              	 #	value; i.e., the top of the space reserved for the math stack.
 750              	 #	This is used when aborting.
 751              	
 752 050a A3535021 		code "SPStore","SP!","SPFetch"
 752      E5FFFFFF 
 752      04000000 
 753 0516 DECFE6FB 		moval MathSpace,r7
 753      57
 754 051b 176B     		jmp (r11)
 755              	
 756              	 #	: -DUP		( V -- V | V V <DUPLICATE IF V != 0 > )
 757              	 #	  DUP
 758              	 #	  0BRANCH DDUP1 ( SKIP TO END IF IT WAS ZERO )
 759              	 #	  DUP
 760              	 #	LABEL DDUP1
 761              	 #	;
 762              	 #
 763              	 #	This word duplicates the TOS if it is not zero. If the TOS is
 764              	 #	zero, it is not duplicated.
 765              	
 766 051d A42D4455 		colon "MinusDup","-DUP","SPStore"
 766      50E8FFFF 
 766      FF86FDFF 
 766      FF
 767 052a 90FFFFFF 		offset DUP
 768 052e CFFDFFFF 		offset ZBranch
 769 0532 08000000 		offset DDup1
 770 0536 84FFFFFF 		offset DUP
 771 053a 090F0000 	DDup1:	offset SemiS
GAS LISTING circforth.s 			page 16


 772              	
 773              	 #	: !CSP		( SAVE CSP AT USER VAR CSP )
 774              	 #	  SP@ CSP ! ;
 775              	 #
 776              	 #	This word stores a copy of the current math stack pointer in 
 777              	 #	the variable CSP. After compilation, the compiler checks CSP
 778              	 #	against the math stack pointer to see if it's managed to pull
 779              	 #	everything off the stack.
 780              	
 781 053e A4214353 		colon "StoreCSP","!CSP","MinusDup"
 781      50DAFFFF 
 781      FF65FDFF 
 781      FF
 782 054b B0FFFFFF 		offset SPFetch
 783 054f 9F180000 		offset CSP
 784 0553 5B050000 		offset Store
 785 0557 EC0E0000 		offset SemiS
 786              	
 787              	 #	-: a b -- a-b
 788              	 #
 789              	 #	This procedure subtracts the top item of the math stack from the
 790              	 #	next item on the math stack, returning the difference.
 791              	
 792 055b A12DE1FF 		code "Subtract","-","StoreCSP"
 792      FFFF0400 
 792      0000
 793 0565 D05750   		movl r7,r0		# form address of a
 794 0568 800450   		addb2 $4,r0
 795 056b C26760   		subl2 (r7),(r0)		# do the subtract
 796 056e D05057   		movl r0,r7		# discard b
 797 0571 176B     		jmp (r11)
 798              	
 799              	 #	<: a b -- a<b
 800              	 #
 801              	 #	This code pushes 1 if the second number on the math stack is
 802              	 #	less than the number on top of the math stack and 0 otherwise.
 803              	 #	This seems to me to be backwards, so I checked FigFORTH for the
 804              	 #	VAX, which gives this definition:
 805              	 #
 806              	 #	: < - 0< ;
 807              	 #
 808              	 #	which works out the same way; the 0< will push one only if the
 809              	 #	result of the subtraction is negative, which will only be the case
 810              	 #	if b>a.
 811              	 #
 812              	 #	Hmm. If I get desparate for space, I could use the FigFORTH version;
 813              	 #	looks like it's smaller.
 814              	 #
 815              	 #	$$$
 816              	
 817 0573 A13CE6FF 		colon "Less","<","Subtract"
 817      FFFF33FD 
 817      FFFF
 818 057d E4FFFFFF 		offset Subtract
 819 0581 AF000000 		offset ZLess
 820 0585 BE0E0000 		offset SemiS
 821              	
GAS LISTING circforth.s 			page 17


 822              	 #	AND: a b -- a&b
 823              	 #
 824              	 #	The top two words on the math stack are anded. Since we don't have
 825              	 #	an and instruction, we have to complement b and then BICL.
 826              	 #
 827              	 #	I don't want a BICL
 828              	 #	I just wanna ride my motorSICL
 829              	 #	And I don't wanna die
 830              	 #	I just wanna ride my motorcy
 831              	 #	cle				-- Apologies to Arlo Guthrie
 832              	
 833 0589 A3414E44 		code "AND","AND","Less"
 833      E6FFFFFF 
 833      04000000 
 834 0595 D05750   		movl r7,r0		# form address of a
 835 0598 800450   		addb2 $4,r0
 836 059b D26767   		mcoml (r7),(r7)		# Form one's complement of b
 837 059e CA6760   		bicl2 (r7),(r0)		# BICL it 
 838 05a1 D05057   		movl r0,r7		# discard one's complement of b
 839 05a4 176B     		jmp (r11)
 840              	
 841              	 #	OR: a b -- a or b
 842              	 #
 843              	 #	The top two items on the math stack are ORed and the result stored
 844              	 #	on the math stack.
 845              	
 846 05a6 A24F52E0 		code "OR","OR","AND"
 846      FFFFFF04 
 846      000000
 847 05b1 D05750   		movl r7,r0		# form address of a
 848 05b4 800450   		addb2 $4,r0
 849 05b7 C86760   		bisl2 (r7),(r0)		# Do it
 850 05ba D05057   		movl r0,r7		# discard b
 851 05bd 176B     		jmp (r11)
 852              	
 853              	 #	XOR: a b -- a xor b
 854              	 #
 855              	 #	The top two items on the math stack are XORed and the result stored
 856              	 #	on the math stack.
 857              	
 858 05bf A3584F52 		code "XOR","XOR","OR"
 858      E3FFFFFF 
 858      04000000 
 859 05cb D05750   		movl r7,r0		# form address of a
 860 05ce 800450   		addb2 $4,r0
 861 05d1 CC6760   		xorl2 (r7),(r0)		# do the XOR
 862 05d4 D05057   		movl r0,r7		# discard b
 863 05d7 176B     		jmp (r11)
 864              	
 865              	 #	+!: val addr -- <add val to mem[addr]>
 866              	 #
 867              	 #	This procedure adds the second value on the math stack to the
 868              	 #	address specified on top of the math stack.
 869              	
 870 05d9 A22B21E3 		code "PlusStore","+!","XOR"
 870      FFFFFF04 
 870      000000
GAS LISTING circforth.s 			page 18


 871 05e4 D05750   		movl r7,r0		# form address of val
 872 05e7 800450   		addb2 $4,r0
 873 05ea C060B700 		addl2 (r0),*(r7)	# Add val to addr
 874 05ee 800857   		addb2 $8,r7		# discard addr and val
 875 05f1 176B     		jmp (r11)
 876              	
 877              	 #	toggle: addr bits -- <xor mem[addr] with bits, store in mem[addr]>
 878              	 #
 879              	 #	This procedure toggles the bits specified on top of the math stack
 880              	 #	in the longword addressed by the second item on the math stack.
 881              	 #	Oddly, the ordering of operands in this operation is not the FORTH
 882              	 #	norm of making it difficult to do in a single instruction...
 883              	
 884 05f3 A6544F47 		code "TOGGLE","TOGGLE","PlusStore"
 884      474C45DF 
 884      FFFFFF04 
 884      000000
 885 0602 D05750   		movl r7,r0		# form address of addr
 886 0605 800450   		addb2 $4,r0
 887 0608 CC67B000 		xorl2 (r7),*(r0)	# toggle the bits
 888 060c 800857   		addb2 $8,r7		# discard bits and addr
 889 060f 176B     		jmp (r11)
 890              	
 891              	 #	0=: a -- (a==0)
 892              	 #
 893              	 #	Pushes a 1 on the stack if a is zero, and a zero otherwise.
 894              	 #
 895              	 #	The bits of code used here to push the one and zero are used
 896              	 #	by other comparisons.
 897              	 #
 898              	 #	$$$
 899              	
 900 0611 A2303DDF 		code "ZEq","0=","TOGGLE"
 900      FFFFFF04 
 900      000000
 901 061c D567     		tstl (r7)
 902 061e 1304     		beql Yes
 903              	
 904 0620 D467     	No:	clrl (r7)		# It's false. Push a zero.
 905 0622 176B     		jmp (r11)
 906              	
 907 0624 9A0167   	Yes:	movzbl $1,(r7)		# It's true. Push a one.
 908 0627 176B     		jmp (r11)
 909              	
 910              	 #	0< a -- (a < 0)
 911              	 #
 912              	 #	Pushes a 1 if a is negative, a 0 otherwise.
 913              	
 914 0629 A2303CE5 		code "ZLess","0<","ZEq"
 914      FFFFFF04 
 914      000000
 915 0634 D567     		tstl (r7)
 916 0636 19EC     		blss Yes
 917 0638 11E6     		brb No
 918              	
 919              	 #	=: a b -- (a=b)
 920              	 #
GAS LISTING circforth.s 			page 19


 921              	 #	Pushes a one if a and b are equal, a zero otherwise.
 922              	 #
 923              	 #	$$$
 924              	
 925 063a A13DEDFF 		code "Equal","=","ZLess"
 925      FFFF0400 
 925      0000
 926              	
 927              					# have to fetch operands so we can
 928              					# diddle stack pointer without
 929              					# disturbing flags. don't want to just
 930              					# point r0 at top of stack because that
 931              					# precludes pre-emption (which might
 932              					# rely on r7 always pointing at top of
 933              					# math stack)
 934              	
 935 0644 D05750   		movl r7,r0		# form addr of a
 936 0647 800450   		addb2 $4,r0
 937 064a D06051   		movl (r0),r1		# fetch a
 938 064d D06752   		movl (r7),r2		# fetch b
 939 0650 D05057   		movl r0,r7		# discard b
 940 0653 D15152   		cmpl r1,r2		# compare 'em
 941 0656 13CC     		beql Yes
 942 0658 11C6     		brb No
 943              	
 944              	 #	!=: a b -- (a!=b)
 945              	 #
 946              	 #	Pushes a one if a and b are not equal, a zero otherwise.
 947              	 #
 948              	 #	$$$
 949              	
 950 065a A2213DDD 		code NotEq,"!=","Equal"
 950      FFFFFF04 
 950      000000
 951              	
 952              					# have to fetch operands so we can
 953              					# diddle stack pointer without
 954              					# disturbing flags. don't want to just
 955              					# point r0 at top of stack because that
 956              					# precludes pre-emption (which might
 957              					# rely on r7 always pointing at top of
 958              					# math stack)
 959              	
 960 0665 D05750   		movl r7,r0		# form addr of a
 961 0668 800450   		addb2 $4,r0
 962 066b D06051   		movl (r0),r1		# fetch a
 963 066e D06752   		movl (r7),r2		# fetch b
 964 0671 D05057   		movl r0,r7		# discard b
 965 0674 D15152   		cmpl r1,r2		# compare 'em
 966 0677 13A7     		beql No
 967 0679 11A9     		brb Yes
 968              	
 969              	 #	u<: a b -- (a<b, unsigned)
 970              	 #
 971              	 #	Pushes a one if a is less than b unsignedly.
 972              	 #
 973              	 #	$$$
GAS LISTING circforth.s 			page 20


 974              	
 975 067b A2553CDC 		code "ULess","U<","NotEq"
 975      FFFFFF04 
 975      000000
 976              	
 977              					# have to fetch operands so we can
 978              					# diddle stack pointer without
 979              					# disturbing flags. don't want to just
 980              					# point r0 at top of stack because that
 981              					# precludes pre-emption (which might
 982              					# rely on r7 always pointing at top of
 983              					# math stack)
 984              	
 985 0686 D05750   		movl r7,r0		# form addr of a
 986 0689 800450   		addb2 $4,r0
 987 068c D06051   		movl (r0),r1		# fetch a
 988 068f D06752   		movl (r7),r2		# fetch b
 989 0692 D05057   		movl r0,r7		# discard b
 990 0695 D15152   		cmpl r1,r2		# compare 'em
 991 0698 1F8A     		blssu Yes		# If A is less, push 1
 992 069a 1184     		brb No			# Otherwise, push 0
 993              	
 994              	 #	: >	( CHEAP TRICK )  ( a b -- a>b )
 995              	 #	  SWAP < ;
 996              	
 997 069c A13EDDFF 		colon "Greater",">","ULess"
 997      FFFF0AFC 
 997      FFFF
 998 06a6 B9FDFFFF 		offset SWAP
 999 06aa CFFEFFFF 		offset Less
 1000 06ae 950D0000 		offset SemiS
 1001              	
 1002              	 #	: <>	( NOT-EQUAL )
 1003              	 #	  != ;
 1004              	 #
 1005              	 #	The C-Forth guy used C syntax for the machine code version of !=,
 1006              	 #	probably to save himself lots-o'-headaches for his fingers trained
 1007              	 #	on C. I'm not quite so attached, but I'm not gonna rip it out either.
 1008              	
 1009 06b2 A23C3EE7 		colon "NotEqual","<>","Greater"
 1009      FFFFFFF3 
 1009      FBFFFF
 1010 06bd A4FFFFFF 		offset NotEq
 1011 06c1 820D0000 		offset SemiS
 1012              	
 1013              	 #	+: a b -- a + b
 1014              	 #
 1015              	 #	Adds the numbers on top of the math stack.
 1016              	
 1017 06c5 A12BEBFF 		code "Plus","+","NotEqual"
 1017      FFFF0400 
 1017      0000
 1018 06cf D05750   		movl r7,r0		# form address of a
 1019 06d2 800450   		addb2 $4,r0
 1020 06d5 C06760   		addl2 (r7),(r0)		# add 'em
 1021 06d8 D05057   		movl r0,r7		# discard b
 1022 06db 176B     		jmp (r11)
GAS LISTING circforth.s 			page 21


 1023              	
 1024              	 #	MINUS: a -- -a
 1025              	 #
 1026              	 #	Forms the two's complement of the number on top of the math stack.
 1027              	
 1028 06dd A54D494E 		code "MINUS","MINUS","Plus"
 1028      5553E2FF 
 1028      FFFF0400 
 1028      0000
 1029 06eb CE6767   		mnegl (r7),(r7)
 1030 06ee 176B     		jmp (r11)
 1031              	
 1032              	 #	NOT: a -- ~a
 1033              	 #
 1034              	 #	Forms the one's complement of the number on top of the math stack.
 1035              	 #
 1036              	 #	$$$
 1037              	
 1038 06f0 A34E4F54 		code "NOT","NOT","MINUS"
 1038      E9FFFFFF 
 1038      04000000 
 1039 06fc D26767   		mcoml (r7),(r7)
 1040 06ff 176B     		jmp (r11)
 1041              	
 1042              	 #	: 1+ 1 + ;	( val -- val+1 )
 1043              	 #
 1044              	 #	Shorthand word for incrementing top of stack.
 1045              	
 1046 0701 A2312BEC 		colon "OnePlus","1+","NOT"
 1046      FFFFFFA4 
 1046      FBFFFF
 1047 070c 3F170000 		offset One		# Increment
 1048 0710 BBFFFFFF 		offset Plus
 1049 0714 2F0D0000 		offset SemiS
 1050              	
 1051              	 #	: 2+ 2 + ;	( val -- val+2 )
 1052              	 #
 1053              	 #	Shorthand word for incrementing by two. Since I'm a 32-bit
 1054              	 #	implementation, I should probably include 4+ and perhaps even
 1055              	 #	8+, but I'm not gonna...
 1056              	
 1057 0718 A2322BE6 		colon "TwoPlus","2+","OnePlus"
 1057      FFFFFF8D 
 1057      FBFFFF
 1058 0723 36170000 		offset Two
 1059 0727 A4FFFFFF 		offset Plus
 1060 072b 180D0000 		offset SemiS
 1061              	
 1062              	 #	: 1- 1 - ;	( val -- val-1 )
 1063              	 #
 1064              	 #	Shorthand to decrement top of stack
 1065              	
 1066 072f A2312DE6 		colon "OneMinus","1-","TwoPlus"
 1066      FFFFFF76 
 1066      FBFFFF
 1067 073a 11170000 		offset One
 1068 073e 23FEFFFF 		offset Subtract
GAS LISTING circforth.s 			page 22


 1069 0742 010D0000 		offset SemiS
 1070              	
 1071              	 #	: +-		( a b -- c )
 1072              	 #	  0<
 1073              	 #	  0BRANCH PM1
 1074              	 #	  MINUS
 1075              	 #	LABEL PM1
 1076              	 #	;
 1077              	 #
 1078              	 #	This procedure applies the sign of b to a, generating c. If b is
 1079              	 #	positive, a is not changed. If b is negative, a is multiplied by
 1080              	 #	-1.
 1081              	
 1082 0746 A22B2DE6 		colon "PlusMinus","+-","OneMinus"
 1082      FFFFFF5F 
 1082      FBFFFF
 1083 0751 DFFEFFFF 		offset ZLess
 1084 0755 A8FBFFFF 		offset ZBranch
 1085 0759 08000000 		offset PM1
 1086 075d 8AFFFFFF 		offset MINUS
 1087 0761 E20C0000 	PM1:	offset SemiS
 1088              	
 1089              	 #	: ABS		( a -- b )
 1090              	 #	  DUP +-
 1091              	 #	;
 1092              	 #
 1093              	 #	This word takes the absolute value of the top of stack.
 1094              	
 1095 0765 A3414253 		colon "ABS","ABS","PlusMinus"
 1095      DDFFFFFF 
 1095      3FFBFFFF 
 1096 0771 49FDFFFF 		offset DUP
 1097 0775 D8FFFFFF 		offset PlusMinus
 1098 0779 CA0C0000 		offset SemiS
 1099              	
 1100              	 #	: MIN		( a b -- c )
 1101              	 #	  2DUP >
 1102              	 #	  0BRANCH MIN1
 1103              	 #	  SWAP
 1104              	 #	LABEL MIN1
 1105              	 #	  DROP
 1106              	 #	;
 1107              	 #
 1108              	 #	This word returns the smaller of the two items on top of the math
 1109              	 #	stack.
 1110              	
 1111 077d A34D494E 		colon "MIN","MIN","ABS"
 1111      E4FFFFFF 
 1111      27FBFFFF 
 1112 0789 5BFDFFFF 		offset TwoDUP
 1113 078d 15FFFFFF 		offset Greater
 1114 0791 6CFBFFFF 		offset ZBranch
 1115 0795 08000000 		offset Min1
 1116 0799 C6FCFFFF 		offset SWAP
 1117 079d 35FDFFFF 	Min1:	offset DROP
 1118 07a1 A20C0000 		offset SemiS
 1119              	
GAS LISTING circforth.s 			page 23


 1120              	 #	: MAX		( a b -- c )
 1121              	 #	  2DUP <
 1122              	 #	  0BRANCH MAX1
 1123              	 #	  SWAP
 1124              	 #	LABEL MAX1
 1125              	 #	  DROP
 1126              	 #	;
 1127              	 #
 1128              	 #	This word returns the larger of the two items on top of the math stack.
 1129              	 #
 1130              	 #	$$$
 1131              	
 1132 07a5 A34D4158 		colon "MAX","MAX","MIN"
 1132      D4FFFFFF 
 1132      FFFAFFFF 
 1133 07b1 33FDFFFF 		offset TwoDUP
 1134 07b5 C4FDFFFF 		offset Less
 1135 07b9 44FBFFFF 		offset ZBranch
 1136 07bd 08000000 		offset Max1
 1137 07c1 9EFCFFFF 		offset SWAP
 1138 07c5 0DFDFFFF 	Max1:	offset DROP
 1139 07c9 7A0C0000 		offset SemiS
 1140              	
 1141              	 #	: *		( a b -- c )
 1142              	 #	  M* DROP
 1143              	 #	;
 1144              	 #
 1145              	 #	This word multiplies the two single-precision numbers on top of the
 1146              	 #	math stack to give a single-precision result.
 1147              	
 1148 07cd A12AD6FF 		colon "Star","*","MAX"
 1148      FFFFD9FA 
 1148      FFFF
 1149 07d7 E9010000 		offset MStar
 1150 07db F7FCFFFF 		offset DROP
 1151 07df 640C0000 		offset SemiS
 1152              	
 1153              	 #	: /MOD		( a b -- rem quo )
 1154              	 #	  >R S->D R> M/
 1155              	 #	;
 1156              	 #
 1157              	 #	This word divides the single-precision number a by the single-
 1158              	 #	precision number b and returns both the remainder and the quotient.
 1159              	
 1160 07e3 A42F4D4F 		colon "SlashMod","/MOD","Star"
 1160      44E5FFFF 
 1160      FFC0FAFF 
 1160      FF
 1161 07f0 14FCFFFF 		offset ToR
 1162 07f4 B1010000 		offset SignExtend
 1163 07f8 1FFCFFFF 		offset FromR
 1164 07fc F7010000 		offset MSlash
 1165 0800 430C0000 		offset SemiS
 1166              	
 1167              	 #	: /		( a b -- c )
 1168              	 #	  /MOD SWAP DROP
 1169              	 #	;
GAS LISTING circforth.s 			page 24


 1170              	 #
 1171              	 #	This word divides a by b, returning only the quotient as c.
 1172              	
 1173 0804 A12FDDFF 		colon "Slash","/","SlashMod"
 1173      FFFFA2FA 
 1173      FFFF
 1174 080e DEFFFFFF 		offset SlashMod
 1175 0812 4DFCFFFF 		offset SWAP
 1176 0816 BCFCFFFF 		offset DROP
 1177 081a 290C0000 		offset SemiS
 1178              	
 1179              	 #	: MOD		( a b -- c )
 1180              	 #	  /MOD DROP
 1181              	 #	;
 1182              	 #
 1183              	 #	This word divides a by b, returning only the remainder as c.
 1184              	
 1185 081e A34D4F44 		colon "MOD","MOD","Slash"
 1185      E2FFFFFF 
 1185      86FAFFFF 
 1186 082a C2FFFFFF 		offset SlashMod
 1187 082e A4FCFFFF 		offset DROP
 1188 0832 110C0000 		offset SemiS
 1189              	
 1190              	 #	: */MOD		( a b c -- rem quo )
 1191              	 #	  >R M* R> M/
 1192              	 #	;
 1193              	 #
 1194              	 #	This word multiplies a by b and then divides the result by c, 
 1195              	 #	returning both the remainder and the quotient of the division.
 1196              	 #	The intermediate result is a double-precision number for that
 1197              	 #	extra precise precision.
 1198              	
 1199 0836 A52A2F4D 		colon "StarSlashMod","*/MOD","MOD"
 1199      4F44E2FF 
 1199      FFFF6CFA 
 1199      FFFF
 1200 0844 C0FBFFFF 		offset ToR
 1201 0848 78010000 		offset MStar
 1202 084c CBFBFFFF 		offset FromR
 1203 0850 A3010000 		offset MSlash
 1204 0854 EF0B0000 		offset SemiS
 1205              	
 1206              	 #	: */			( a b c -- quo )
 1207              	 #	  */MOD
 1208              	 #	  SWAP DROP
 1209              	 #	;
 1210              	 #
 1211              	 #	This word multiples a and b and then divides that result by c,
 1212              	 #	returning only the quotient. The intermediate result is 
 1213              	 #	double-precision.
 1214              	
 1215 0858 A22A2FDB 		colon "StarSlash","*/","StarSlashMod"
 1215      FFFFFF4D 
 1215      FAFFFF
 1216 0863 DDFFFFFF 		offset StarSlashMod
 1217 0867 F8FBFFFF 		offset SWAP
GAS LISTING circforth.s 			page 25


 1218 086b 67FCFFFF 		offset DROP
 1219 086f D40B0000 		offset SemiS
 1220              	
 1221              	 #	: <<	( val count -- val<<count )
 1222              	 #
 1223              	 #	Shifts the value left by the specified count
 1224              	
 1225 0873 A23C3CE2 		code "ShiftLeft","<<","StarSlash"
 1225      FFFFFF04 
 1225      000000
 1226 087e D05750   		movl r7,r0		# form address of value
 1227 0881 800450   		addb2 $4,r0
 1228 0884 78676060 		ashl (r7),(r0),(r0)	# do the shift, replacing value
 1229 0888 D05057   		movl r0,r7		# discard count
 1230 088b 176B     		jmp (r11)
 1231              	
 1232              	 #	: >>	( val count -- val>>count )
 1233              	 #
 1234              	 #	Shifts the value right by the specified count
 1235              	
 1236 088d A23E3EE3 		colon "ShiftRight",">>","ShiftLeft"
 1236      FFFFFF18 
 1236      FAFFFF
 1237 0898 4FFEFFFF 		offset MINUS		# convert to left shift count
 1238 089c DEFFFFFF 		offset ShiftLeft	# do the shift
 1239 08a0 A30B0000 		offset SemiS
 1240              	
 1241              	 #	D+: alo ahi blo bhi -- a+blo a+bhi <double add>
 1242              	 #
 1243              	 #	This procedure does a 64-bit add of the top two elements of the
 1244              	 #	math stack, returning a 64-bit result.
 1245              	
 1246 08a4 A2442BE6 		code "DPlus","D+","ShiftRight"
 1246      FFFFFF04 
 1246      000000
 1247              	
 1248 08af D05750   		movl r7,r0		# form address of blo
 1249 08b2 800450   		addb2 $4,r0	
 1250              	
 1251 08b5 D05751   		movl r7,r1		# form address of ahi
 1252 08b8 800851   		addb2 $8,r1
 1253              	
 1254 08bb D05752   		movl r7,r2		# form address of alo
 1255 08be 800C52   		addb2 $12,r2
 1256              	
 1257 08c1 C06062   		addl2 (r0),(r2)		# add blo to alo
 1258 08c4 D86761   		adwc (r7),(r1)		# add ahi to bhi w/ carry
 1259              	
 1260 08c7 800857   		addb2 $8,r7		# discard bhi and blo
 1261              	
 1262 08ca 176B     		jmp (r11)
 1263              	
 1264              	 #	D-: alo ahi blo bhi -- a-blo a-bhi <double subtract>
 1265              	 #
 1266              	 #	This procedure subtracts the 64-bit number on top of the math stack
 1267              	 #	from the 64-bit number in the next position on the math stack. The
 1268              	 #	result is returned on the math stack.
GAS LISTING circforth.s 			page 26


 1269              	
 1270 08cc A2442DD5 		code "DSubtract","D-","DPlus"
 1270      FFFFFF04 
 1270      000000
 1271              	
 1272 08d7 D05750   		movl r7,r0		# form address of blo
 1273 08da 800450   		addb2 $4,r0	
 1274              	
 1275 08dd D05751   		movl r7,r1		# form address of ahi
 1276 08e0 800851   		addb2 $8,r1
 1277              	
 1278 08e3 D05752   		movl r7,r2		# form address of alo
 1279 08e6 800C52   		addb2 $12,r2
 1280              	
 1281 08e9 C26062   		subl2 (r0),(r2)		# subtract blo from alo
 1282 08ec D96761   		sbwc (r7),(r1)		# subtract bhi from ahi w/ borrow
 1283              	
 1284 08ef 800857   		addb2 $8,r7		# discard bhi and blo
 1285              	
 1286 08f2 176B     		jmp (r11)
 1287              	
 1288              	 #	DMINUS: alo ahi - -alo -ahi <double complement>
 1289              	 #
 1290              	 #	This procedure forms the two's complement of the 64-bit number on
 1291              	 #	top of the math stack. The result is stored on the math stack.
 1292              	 #	The two's complement is formed by subtracting the 64-bit number
 1293              	 #	from zero.
 1294              	
 1295 08f4 A6444D49 		code "DMINUS","DMINUS","DSubtract"
 1295      4E5553D1 
 1295      FFFFFF04 
 1295      000000
 1296              	
 1297 0903 D05750   		movl r7,r0		# form address of alo
 1298 0906 800450   		addb2 $4,r0
 1299              	
 1300 0909 D451     		clrl r1			# we'll collect borrow here
 1301              					# (VAX doesn't have 3-operand subtract
 1302              					# with carry)
 1303              	
 1304 090b C3600060 		subl3 (r0),$0,(r0)	# subtract low word
 1305 090f D90051   		sbwc $0,r1		# propagate the borrow
 1306 0912 C3675167 		subl3 (r7),r1,(r7)	# complement high word
 1307              	
 1308 0916 176B     		jmp (r11)
 1309              	
 1310              	 #	: D+-		( a.lo a.hi b -- c.lo c.hi )
 1311              	 #	  0<
 1312              	 #	  0BRANCH DPM1
 1313              	 #	  DMINUS
 1314              	 #	LABEL DPM1
 1315              	 #	;
 1316              	 #
 1317              	 #	This word applies the sign of b to the double-precision number a
 1318              	 #	to generate the double-precision number c. If b is positive, a
 1319              	 #	is unchanged. If b is negative, a is multiplied by -1.
 1320              	
GAS LISTING circforth.s 			page 27


 1321 0918 A3442B2D 		colon "DPlusMinus","D+-","DMINUS"
 1321      D8FFFFFF 
 1321      8CF9FFFF 
 1322 0924 0CFDFFFF 		offset ZLess
 1323 0928 D5F9FFFF 		offset ZBranch
 1324 092c 08000000 		offset DPM1
 1325 0930 CFFFFFFF 		offset DMINUS
 1326 0934 0F0B0000 	DPM1:	offset SemiS
 1327              	
 1328              	 #	: DABS		( a.lo a.hi -- b.lo b.hi )
 1329              	 #	  DUP D+-
 1330              	 #	;
 1331              	 #
 1332              	 #	This word takes the absolute value of the double-precision number
 1333              	 #	on top of the math stack.
 1334              	
 1335 0938 A4444142 		colon "DABS","DABS","DPlusMinus"
 1335      53DBFFFF 
 1335      FF6BF9FF 
 1335      FF
 1336 0945 75FBFFFF 		offset DUP
 1337 0949 D7FFFFFF 		offset DPlusMinus
 1338 094d F60A0000 		offset SemiS
 1339              	
 1340              	 #	U*: a b -- a*b.lo a*b.hi
 1341              	 #
 1342              	 #	This is an unsigned double-length multiply. In this case,
 1343              	 #	double-length is 64 bits, but we won't be picky.
 1344              	
 1345 0951 A2552AE4 		code "UStar","U*","DABS"
 1345      FFFFFF04 
 1345      000000
 1346              	
 1347 095c D05750   		movl r7,r0		# form address of a
 1348 095f 800450   		addb2 $4,r0
 1349              	
 1350 0962 7A676000 		emul (r7),(r0),$0,r2	# do it
 1350      52
 1351              	
 1352 0967 D05260   		movl r2,(r0)		# save low-order result
 1353 096a D05367   		movl r3,(r7)		# save high-order result
 1354              	
 1355 096d 176B     		jmp (r11)
 1356              	
 1357              	 #	U/: num.lo num.hi denom -- rem quot
 1358              	 #
 1359              	 #	This is a generalized unsigned divide of a double-length number
 1360              	 #	by a single-length number. Other words use this routine to do
 1361              	 #	their work and then pick the results they want.
 1362              	
 1363 096f A2552FDF 		code "USlash","U/","UStar"
 1363      FFFFFF04 
 1363      000000
 1364              	
 1365 097a D05750   		movl r7,r0		# form address of num.lo
 1366 097d 800850   		addb2 $8,r0
 1367              	
GAS LISTING circforth.s 			page 28


 1368 0980 D05751   		movl r7,r1		# form address of num.hi
 1369 0983 800451   		addb2 $4,r1
 1370              	
 1371 0986 D06052   		movl (r0),r2		# fetch numerator
 1372 0989 D06153   		movl (r1),r3
 1373              	
 1374 098c 7B675253 		ediv (r7),r2,r3,r4	# do the divide
 1374      54
 1375              	
 1376 0991 800457   		addb2 $4,r7		# discard quot
 1377              	
 1378 0994 D05367   		movl r3,(r7)		# replace num.hi with quotient
 1379 0997 D05460   		movl r4,(r0)		# replace num.lo with remainder
 1380              	
 1381 099a 176B     		jmp (r11)
 1382              	
 1383              	 #	: S->D	( a -- a.lo a.hi )
 1384              	 #
 1385              	 #	This word sign-extends a single-precision number into a 
 1386              	 #	double-precision number.
 1387              	 #
 1388              	 #	$$$
 1389              	
 1390 099c A4532D3E 		code "SignExtend","S->D","USlash"
 1390      44CEFFFF 
 1390      FF040000 
 1390      00
 1391 09a9 D450     		clrl r0			# assume a is positive
 1392 09ab D567     		tstl (r7)		# are we right?
 1393 09ad 1802     		bgeq S2D1		# if so, go
 1394 09af D750     		decl r0			# If not, turn the 0 into a -1
 1395 09b1 820457   	S2D1:	subb2 $4,r7		# Make space for the ms longword
 1396 09b4 D05067   		movl r0,(r7)		# copy it to math stack
 1397 09b7 176B     		jmp (r11)
 1398              	
 1399              	 #	: M*		( a b -- c.lo c.hi )
 1400              	 #	  2DUP XOR >R ABS SWAP ABS U* R> D+-
 1401              	 #	;
 1402              	 #
 1403              	 #	This word multiplies the two numbers on top of the math stack to
 1404              	 #	give a double-precision result.
 1405              	
 1406 09b9 A24D2AE0 		colon "MStar","M*","SignExtend"
 1406      FFFFFFEC 
 1406      F8FFFF
 1407 09c4 20FBFFFF 		offset TwoDUP
 1408 09c8 FFFBFFFF 		offset XOR
 1409 09cc 38FAFFFF 		offset ToR
 1410 09d0 9DFDFFFF 		offset ABS
 1411 09d4 8BFAFFFF 		offset SWAP
 1412 09d8 95FDFFFF 		offset ABS
 1413 09dc 7CFFFFFF 		offset UStar
 1414 09e0 37FAFFFF 		offset FromR
 1415 09e4 3CFFFFFF 		offset DPlusMinus
 1416 09e8 5B0A0000 		offset SemiS
 1417              	
 1418              	 #	: M/		( a.lo a.hi b -- rem quo )
GAS LISTING circforth.s 			page 29


 1419              	 #	  OVER >R >R DABS R ABS U/
 1420              	 #	  R> R XOR +- SWAP
 1421              	 #	  R> +- SWAP
 1422              	 #	;
 1423              	 #
 1424              	 #	This word divids the double-precision number a by the single-
 1425              	 #	precision number b, returning both the remainder and the quotient.
 1426              	
 1427 09ec A24D2FCA 		colon "MSlash","M/","MStar"
 1427      FFFFFFB9 
 1427      F8FFFF
 1428 09f7 A9FAFFFF 		offset OVER
 1429 09fb 09FAFFFF 		offset ToR
 1430 09ff 05FAFFFF 		offset ToR
 1431 0a03 3EFFFFFF 		offset DABS
 1432 0a07 22FAFFFF 		offset R
 1433 0a0b 62FDFFFF 		offset ABS
 1434 0a0f 67FFFFFF 		offset USlash
 1435 0a13 04FAFFFF 		offset FromR
 1436 0a17 12FAFFFF 		offset R
 1437 0a1b ACFBFFFF 		offset XOR
 1438 0a1f 2EFDFFFF 		offset PlusMinus
 1439 0a23 3CFAFFFF 		offset SWAP
 1440 0a27 F0F9FFFF 		offset FromR
 1441 0a2b 22FDFFFF 		offset PlusMinus
 1442 0a2f 30FAFFFF 		offset SWAP
 1443 0a33 100A0000 		offset SemiS
 1444              	
 1445              	 #	: M/MOD		( ud1.hi ud1.lo u2 -- remainder quo.hi quo.lo )
 1446              	 #	  >R 0 R	( -- ud1.hi ud1.lo 0 u2 )
 1447              	 #	  U/ 		( -- ud1.hi rem1 quot1 )
 1448              	 #	  R> SWAP	( -- ud1.hi rem1 u2 quot1 ) 
 1449              	 #	  >R		( -- ud1.hi rem1 u2 )
 1450              	 #	  U/		( -- rem2 quot2 )
 1451              	 #	  R>		( -- rem2 quot2 quot1 )
 1452              	 #	;
 1453              	 #
 1454              	 #	This word divides a double-precision number by an unsigned single-
 1455              	 #	precision number. 
 1456              	
 1457 0a37 A54D2F4D 		colon "MSlashMod","M/MOD","MSlash"
 1457      4F44AFFF 
 1457      FFFF6BF8 
 1457      FFFF
 1458 0a45 BFF9FFFF 		offset ToR
 1459 0a49 F4130000 		offset Zero
 1460 0a4d DCF9FFFF 		offset R
 1461 0a51 25FFFFFF 		offset USlash
 1462 0a55 C2F9FFFF 		offset FromR
 1463 0a59 06FAFFFF 		offset SWAP
 1464 0a5d A7F9FFFF 		offset ToR
 1465 0a61 15FFFFFF 		offset USlash
 1466 0a65 B2F9FFFF 		offset FromR
 1467 0a69 DA090000 		offset SemiS
 1468              	
 1469              	 #	@: addr -- mem[addr]
 1470              	 #
GAS LISTING circforth.s 			page 30


 1471              	 #	Fetches the longword at the specified address.
 1472              	
 1473 0a6d A140C8FF 		code "Fetch","@","MSlashMod"
 1473      FFFF0400 
 1473      0000
 1474 0a77 D0B70067 		movl *(r7),(r7)
 1475 0a7b 176B     		jmp (r11)
 1476              	
 1477              	 #	C@: addr -- mem[addr], byte
 1478              	 #
 1479              	 #	Fetches the byte at the specified address. The byte is zero-extended.
 1480              	
 1481 0a7d A24340ED 		code "CFetch","C@","Fetch"
 1481      FFFFFF04 
 1481      000000
 1482 0a88 9AB70067 		movzbl *(r7),(r7)
 1483 0a8c 176B     		jmp (r11)
 1484              	
 1485              	 #	2@: addr -- mem[addr+1] mem[addr]
 1486              	 #
 1487              	 #	This procedure fetches the quadword addressed by the top of the math
 1488              	 #	stack and stores it on the math stack. I didn't use a quadword
 1489              	 #	instruction because the words would be stacked in the wrong order.
 1490              	
 1491 0a8e A23240EC 		code "TFetch","2@","CFetch"
 1491      FFFFFF04 
 1491      000000
 1492 0a99 D05750   		movl r7,r0		# save addr
 1493 0a9c D0A00467 		movl 4(r0),(r7)		# put ms word on stack
 1494 0aa0 820457   		subb2 $4,r7		# make space for ls word
 1495 0aa3 D06067   		movl (r0),(r7)
 1496 0aa6 176B     		jmp (r11)
 1497              	
 1498              	 #	!: val addr -- <set mem[addr] = val>
 1499              	 #
 1500              	 #	This procedure stores a longword to the address stored at the top
 1501              	 #	of the math stack. The value stored is the second item on the math
 1502              	 #	stack.
 1503              	
 1504 0aa8 A121E4FF 		code "Store","!","TFetch"
 1504      FFFF0400 
 1504      0000
 1505 0ab2 D05750   		movl r7,r0		# form address of val
 1506 0ab5 800450   		addb2 $4,r0
 1507 0ab8 D060B700 		movl (r0),*(r7)		# store value
 1508 0abc 800857   		addb2 $8,r7		# discard addr and val
 1509 0abf 176B     		jmp (r11)
 1510              	
 1511              	 #	C!: val addr -- <set mem[addr] = val as a byte>
 1512              	 #
 1513              	 #	This procedure stores a byte to the address stored at the top of
 1514              	 #	the math stack. The value stored is the second item on the math
 1515              	 #	stack.
 1516              	
 1517 0ac1 A24321E4 		code "CStore","C!","Store"
 1517      FFFFFF04 
 1517      000000
GAS LISTING circforth.s 			page 31


 1518 0acc D05750   		movl r7,r0		# form address of val
 1519 0acf 800450   		addb2 $4,r0
 1520 0ad2 9060B700 		movb (r0),*(r7)		# store value
 1521 0ad6 800857   		addb2 $8,r7		# discard addr and val
 1522 0ad9 176B     		jmp (r11)
 1523              	
 1524              	 #	2!: val1 val2 addr -- <mem[addr] = val2, mem[addr+1] = val1>
 1525              	 #
 1526              	 #	This procedure stores a quadword from the math stack to memory.
 1527              	
 1528 0adb A23221E3 		code "TStore","2!","CStore"
 1528      FFFFFF04 
 1528      000000
 1529 0ae6 D06750   		movl (r7),r0		# fetch addr
 1530 0ae9 800457   		addb2 $4,r7		# form addr of val2, discarding addr
 1531 0aec D06760   		movl (r7),(r0)		# copy ls longword
 1532 0aef 800457   		addb2 $4,r7		# form addr of val1, discarding val2
 1533 0af2 D067A004 		movl (r7),4(r0)		# copy ms longword
 1534 0af6 800457   		addb2 $4,r7		# discard val1
 1535 0af9 176B     		jmp (r11)
 1536              	
 1537              	 #	: ++		( ADDR -- <INCREMENTS VAL AT ADDR> )
 1538              	 #	  1 SWAP +! ;
 1539              	 #
 1540              	 #	This is an extension from C-Forth. Looked useful to me, so I
 1541              	 #	kept it.
 1542              	
 1543 0afb A22B2BDD 		colon "PlusPlus","++","TStore"
 1543      FFFFFFAA 
 1543      F7FFFF
 1544 0b06 45130000 		offset One
 1545 0b0a 55F9FFFF 		offset SWAP
 1546 0b0e D2FAFFFF 		offset PlusStore
 1547 0b12 31090000 		offset SemiS
 1548              	
 1549              	 #	: --		( ADDR -- <DECREMENTS VAL AT ADDR> )
 1550              	 #	  -1 SWAP +! ;
 1551              	 #
 1552              	 #	This is an extension from C-Forth. Looked useful to me, so I
 1553              	 #	kept it.
 1554              	
 1555 0b16 A22D2DE2 		colon "MinusMinus","--","PlusPlus"
 1555      FFFFFF8F 
 1555      F7FFFF
 1556 0b21 D2000000 		literal -1
 1556      FFFFFFFF 
 1557 0b29 36F9FFFF 		offset SWAP
 1558 0b2d B3FAFFFF 		offset PlusStore
 1559 0b31 12090000 		offset SemiS
 1560              	
 1561              	 #	: CVTWL@	( addr -- sign-extended word )
 1562              	 #			( fetch a sign-extended word )
 1563              	 #
 1564              	 #	This word fetchs a 16-bit word and sign-extends it to a 32-bit
 1565              	 #	longword before pushing it on the math stack. This is needed for
 1566              	 #	fetching relative offset from the code portion of a FORTH word,
 1567              	 #	for example.
GAS LISTING circforth.s 			page 32


 1568              	
 1569 0b35 A6435654 		code "CVTWLFetch","CVTWL@","MinusMinus"
 1569      574C40DA 
 1569      FFFFFF04 
 1569      000000
 1570 0b44 32B70067 		cvtwl *(r7),(r7)
 1571 0b48 176B     		jmp (r11)
 1572              	
 1573              	 #	: W!		( value address -- )
 1574              	 #			store a word
 1575              	 #
 1576              	 #	This word stores a 16-bit word at the specified address.
 1577              	
 1578 0b4a A25721E8 		code "WStore","W!","CVTWLFetch"
 1578      FFFFFF04 
 1578      000000
 1579 0b55 D06750   		movl (r7),r0	# fetch addr
 1580 0b58 800457   		addb2 $4,r7	# form address of value and discard addr
 1581 0b5b B06760   		movw (r7),(r0)	# store word
 1582 0b5e 800457   		addb2 $4,r7	# discard value
 1583 0b61 176B     		jmp (r11)
 1584              	
 1585              	 #	cmove: source dest number --
 1586              	 #
 1587              	 #	This procedure moves number bytes from source to dest. MOVC3
 1588              	 #	won't work because the regions might overlap and MOVC3 is too
 1589              	 #	highly optimized for that (perhaps our minds are _too_ highly
 1590              	 #	trained, Vroomfondel).
 1591              	
 1592 0b63 A5434D4F 		code "CMOVE","CMOVE","WStore"
 1592      5645E1FF 
 1592      FFFF0400 
 1592      0000
 1593              	
 1594 0b71 D06750   		movl (r7),r0		# r0 <- number
 1595 0b74 800457   		addb2 $4,r7		# discard number
 1596 0b77 D06751   		movl (r7),r1		# r1 <- dest
 1597 0b7a 800457   		addb2 $4,r7		# discard dest
 1598 0b7d D06752   		movl (r7),r2		# r2 <- source
 1599 0b80 800457   		addb2 $4,r7		# discard source
 1600              	
 1601 0b83 908281   	CMove1:	movb (r2)+,(r1)+	# mov a byte
 1602 0b86 F550FA   		sobgtr r0,CMove1	# lather, rinse, repeat
 1603              	
 1604 0b89 176B     		jmp (r11)
 1605              	
 1606              	 #	: FILL		( START COUNT VALUE -- <FILL COUNT BYTES, FROM
 1607              	 #			  START, WITH VALUE )
 1608              	 #
 1609              	 #	This word fills memory starting at START with the VALUE. Memory
 1610              	 #	is filled as bytes, so if VALUE is bigger than a byte it's
 1611              	 #	truncated during the storage process. COUNT bytes are filled.
 1612              	 #	If COUNT is 0, no bytes are filled.
 1613              	 #
 1614              	 #	$$$
 1615              	
 1616 0b8b A446494C 		code "FILL","FILL","CMOVE"
GAS LISTING circforth.s 			page 33


 1616      4CD3FFFF 
 1616      FF040000 
 1616      00
 1617              	
 1618 0b98 D06750   		movl (r7),r0		# r0 <- value
 1619 0b9b 800457   		addb2 $4,r7		# discard value
 1620 0b9e D06751   		movl (r7),r1		# r1 <- count
 1621 0ba1 800457   		addb2 $4,r7		# discard count
 1622 0ba4 D06752   		movl (r7),r2		# r2 <- start
 1623 0ba7 800457   		addb2 $4,r7		# discard start
 1624              	
 1625 0baa D551     		tstl r1			# Did we get a zero count?
 1626 0bac 1306     		beql Fill1		# If so, go
 1627              	
 1628 0bae 905082   	Fill0:	movb r0,(r2)+		# store a byte
 1629 0bb1 F551FA   		sobgtr r1,Fill0		# lather, rinse, repeat
 1630              	
 1631 0bb4 176B     	Fill1: jmp (r11)		# Return to caller
 1632              	
 1633              	 #	: ERASE		( START COUNT -- <ZERO OUT MEMORY> )
 1634              	 #	  0 FILL
 1635              	 #	;
 1636              	 #
 1637              	 #	This word fills a chunk of memory with zeros.
 1638              	
 1639 0bb6 A5455241 		colon "ERASE","ERASE","FILL"
 1639      5345CFFF 
 1639      FFFFECF6 
 1639      FFFF
 1640 0bc4 79120000 		offset Zero
 1641 0bc8 CCFFFFFF 		offset FILL
 1642 0bcc 77080000 		offset SemiS
 1643              	
 1644              	 #	: BLANKS	( START COUNT -- <FILL WITH BLANKS> )
 1645              	 #	  BL FILL
 1646              	 #	;
 1647              	 #
 1648              	 #	This word fills a chunk of memory with blanks.
 1649              	
 1650 0bd0 A6424C41 		colon "BLANKS","BLANKS","ERASE"
 1650      4E4B53DF 
 1650      FFFFFFD1 
 1650      F6FFFF
 1651 0bdf 40120000 		offset BL		# start count 32
 1652 0be3 B1FFFFFF 		offset FILL
 1653 0be7 5C080000 		offset SemiS
 1654              	
 1655              	 #	LIT: Push word following onto math stack
 1656              	 #
 1657              	 #	The opcode is followed by a longword. This longword is fetched
 1658              	 #	via IP and pushed onto the math stack. The longword is then skipped.
 1659              	
 1660 0beb A34C4954 		code "LIT","LIT","BLANKS"
 1660      E1FFFFFF 
 1660      04000000 
 1661 0bf7 820457   		subb2 $4,r7		# make space on math stack
 1662 0bfa D08A67   		movl (r10)+,(r7)	# Push the literal and update IP.
GAS LISTING circforth.s 			page 34


 1663 0bfd 176B     		jmp (r11)
 1664              	
 1665              	 #	ZBLIT: Push byte following onto math stack
 1666              	 #
 1667              	 #	The opcode is followed by a byte. This byte is fetched via IP,
 1668              	 #	zero-extended, and pushed on the math stack. The byte is then
 1669              	 #	skipped.
 1670              	
 1671 0bff A55A424C 		code "ZBLIT","ZBLIT","LIT"
 1671      4954E6FF 
 1671      FFFF0400 
 1671      0000
 1672 0c0d 820457   		subb2 $4,r7		# make space on math stack
 1673 0c10 9A8A67   		movzbl (r10)+,(r7)	# Push the literal and update IP.
 1674 0c13 176B     		jmp (r11)
 1675              	
 1676              	 #	OLIT: Push word referred to by following offset onto math stack
 1677              	 #
 1678              	 #	This opcode is followed by a relative offset. The address to
 1679              	 #	which that offset refers is pushed on the math stack.
 1680              	
 1681 0c15 A44F4C49 		code "OLIT","OLIT","ZBLIT"
 1681      54E5FFFF 
 1681      FF040000 
 1681      00
 1682 0c22 820457   		subb2 $4,r7		# make space on math stack
 1683 0c25 C15A8A67 		addl3 r10,(r10)+,(r7)	# Relocate and push the offset.
 1684 0c29 176B     		jmp (r11)
 1685              	
 1686              	 #	: LITERAL
 1687              	 #	  STATE @
 1688              	 #	  0BRANCH L1
 1689              	 #	  COMPILE LIT ,
 1690              	 #	LABEL L1
 1691              	 #	;*
 1692              	 #
 1693              	 #	This word compiles a single-precision literal into the current
 1694              	 #	word if we're compiling. If we're not compiling, it's a NOP so you
 1695              	 #	can say LITERAL 0 at the OK prompt and not get an error.
 1696              	 #
 1697              	 #	This word is not smart enough to optimize byte-sized literals into
 1698              	 #	a reference to ZBLIT followed by the byte. Sigh; maybe sometime,
 1699              	 #	although I doubt this code will survive much beyond the NV5 <-> APECS
 1700              	 #	demo.
 1701              	
 1702 0c2b E74C4954 		colon "LITERAL","LITERAL","OLIT",Immediate
 1702      4552414C 
 1702      E2FFFFFF 
 1702      75F6FFFF 
 1703 0c3b 82110000 		offset STATE		# Are we compiling?
 1704 0c3f 34FEFFFF 		offset Fetch
 1705 0c43 BAF6FFFF 		offset ZBranch		# If not, go
 1706 0c47 10000000 		offset L1
 1707 0c4b 0A0B0000 		offset COMPILE		# Otherwise, do the LIT thing
 1708 0c4f A4FFFFFF 		offset LIT
 1709 0c53 7A000000 		offset Comma
 1710 0c57 EC070000 	L1:	offset SemiS
GAS LISTING circforth.s 			page 35


 1711              	
 1712              	 #	: DLITERAL
 1713              	 #	  STATE @
 1714              	 #	  0BRANCH D1
 1715              	 #	  SWAP LITERAL LITERAL
 1716              	 #	LABEL D1
 1717              	 #	;*
 1718              	 #
 1719              	 #	This procedure compiles a double-precision literal into the code, if
 1720              	 #	we're compiling. If not compiling, it's a NOP; this may be viewed as
 1721              	 #	a bug or a feature (typing DLITERAL 0 at the OK prompt does _not_
 1722              	 #	put a double-precision 0 on the math stack).
 1723              	
 1724 0c5b A8444C49 		colon "DLITERAL","DLITERAL","LITERAL"
 1724      54455241 
 1724      4CC7FFFF 
 1724      FF44F6FF 
 1724      FF
 1725 0c6c 51110000 		offset STATE		# Are we compiling?
 1726 0c70 03FEFFFF 		offset Fetch
 1727 0c74 89F6FFFF 		offset ZBranch		# If not, go.
 1728 0c78 10000000 		offset D1
 1729 0c7c E3F7FFFF 		offset SWAP		# We need to push second on stack first.
 1730 0c80 B7FFFFFF 		offset LITERAL		# Do a single-precision literal for second.
 1731 0c84 B3FFFFFF 		offset LITERAL		# Do a single-precision literal for first.
 1732 0c88 BB070000 	D1:	offset SemiS
 1733              	
 1734              	 #	: HERE		( -- DP )
 1735              	 #	  DP @ ;
 1736              	 #
 1737              	 #	This word returns the current end of the dictionary.
 1738              	
 1739 0c8c A4484552 		colon "HERE","HERE","DLITERAL"
 1739      45CAFFFF 
 1739      FF17F6FF 
 1739      FF
 1740 0c99 EF100000 		offset DP
 1741 0c9d D6FDFFFF 		offset Fetch
 1742 0ca1 A2070000 		offset SemiS
 1743              	
 1744              	 #	: allot			( n -- )
 1745              	 #	  here + dp !		( allocate specified number of bytes from
 1746              	 #				  the directory )
 1747              	 #	;
 1748              	 #
 1749              	 #	This word allocates space at the end of the dictionary. It adds
 1750              	 #	the specified number to the dictionary pointer, advancing the
 1751              	 #	dictionary pointer past the specified number of bytes.
 1752              	
 1753 0ca5 A5414C4C 		colon "ALLOT","ALLOT","HERE"
 1753      4F54E1FF 
 1753      FFFFFDF5 
 1753      FFFF
 1754 0cb3 E2FFFFFF 		offset HERE
 1755 0cb7 14FAFFFF 		offset Plus
 1756 0cbb CD100000 		offset DP
 1757 0cbf EFFDFFFF 		offset Store
GAS LISTING circforth.s 			page 36


 1758 0cc3 80070000 		offset SemiS
 1759              	
 1760              	 #	: ,		( V -- <PLACES V AT DP AND INCREMENTS DP>)
 1761              	 #	  HERE !
 1762              	 #	  4 ALLOT ;
 1763              	 #
 1764              	 #	This word compiles a longword into the dictionary by storing
 1765              	 #	the longword at here and advancing the pointer over it.
 1766              	
 1767 0cc7 A12CDCFF 		colon "Comma",",","ALLOT"
 1767      FFFFDFF5 
 1767      FFFF
 1768 0cd1 C4FFFFFF 		offset HERE	# Store the word at the end of the dictionary
 1769 0cd5 D9FDFFFF 		offset Store
 1770 0cd9 1AFFFFFF 		literal 4	# Advance the end of the dictionary over it
 1770      04000000 
 1771 0ce1 CEFFFFFF 		offset ALLOT
 1772 0ce5 5E070000 		offset SemiS
 1773              	
 1774              	 #	: w,		( w -- <places word at dp and increments dp> )
 1775              	 #	  here w!
 1776              	 #	  2 allot ;
 1777              	 #
 1778              	 #	This word is needed since I'm using 16-bit offsets for all of my
 1779              	 #	threads. It stores a word at the end of the dictionary and advances
 1780              	 #	the dictionary over it.
 1781              	
 1782 0ce9 A2572CDB 		colon "WComma","W,","Comma"
 1782      FFFFFFBC 
 1782      F5FFFF
 1783 0cf4 A1FFFFFF 		offset HERE	# Store the 16-bit word
 1784 0cf8 59FEFFFF 		offset WStore
 1785 0cfc 5D110000 		offset Two	# Advance the dictionary past it
 1786 0d00 AFFFFFFF 		offset ALLOT
 1787 0d04 3F070000 		offset SemiS
 1788              	
 1789              	 #	: C,	( C -- <COMPILE A CHARACTER. SAME AS , WHEN WORDSIZE = 1 > )
 1790              	 #	  HERE C!
 1791              	 #	  1 ALLOT ;
 1792              	 #
 1793              	 #	This word compiles a byte into the dictionary; it stores the byte
 1794              	 #	at the end of the dictionary and advances the dictionary past it.
 1795              	
 1796 0d08 A2432CDE 		colon "CComma","C,","WComma"
 1796      FFFFFF9D 
 1796      F5FFFF
 1797 0d13 82FFFFFF 		offset HERE	# Store the byte
 1798 0d17 B1FDFFFF 		offset CStore
 1799 0d1b 30110000 		offset One	# Advance the dictionary past it
 1800 0d1f 90FFFFFF 		offset ALLOT
 1801 0d23 20070000 		offset SemiS
 1802              	
 1803              	 #	: o,			( n -- )
 1804              	 #	  here - ,
 1805              	 #	;
 1806              	 #
 1807              	 #	This word compiles a relative offset INto the dictionary; that is,
GAS LISTING circforth.s 			page 37


 1808              	 #	it compiles a word offset to the specified address.
 1809              	
 1810 0d27 A24F2CDE 		colon "OComma","O,","CComma"
 1810      FFFFFF7E 
 1810      F5FFFF
 1811 0d32 63FFFFFF 		offset HERE
 1812 0d36 2BF8FFFF 		offset Subtract
 1813 0d3a 93FFFFFF 		offset Comma
 1814 0d3e 05070000 		offset SemiS
 1815              	
 1816              	 #	key: -- c <get next char from input>
 1817              	 #
 1818              	 #	This word waits for a character to be typed at the console and
 1819              	 #	returns that character.
 1820              	
 1821 0d42 A34B4559 		code "KEY","KEY","OComma"
 1821      E1FFFFFF 
 1821      04000000 
 1822 0d4e 30DDF2   		bsbw ConIn		# Get the character
 1823 0d51 820457   		subb2 $4,r7		# make space on math stack
 1824 0d54 9A5067   		movzbl r0,(r7)		# Push it
 1825 0d57 176B     		jmp (r11)
 1826              	
 1827              	 #	?key: -- 0 ( no character available )
 1828              	 #	         non-zero ( character available )
 1829              	 #
 1830              	 #	This word checks to see if a character is available at the
 1831              	 #	console.
 1832              	
 1833 0d59 A43F4B45 		code "QKey","?KEY","KEY"
 1833      59E4FFFF 
 1833      FF040000 
 1833      00
 1834 0d66 30DAF2   		bsbw ConSt		# Check status
 1835 0d69 820457   		subb2 $4,r7		# make space on math stack
 1836 0d6c 9A5067   		movzbl r0,(r7)		# Push it
 1837 0d6f 176B     		jmp (r11)
 1838              	
 1839              	 #	emit: c -- <put char to output>
 1840              	 #
 1841              	 #	This word displays a character on the console.
 1842              	 #
 1843              	 #	$$$
 1844              	
 1845 0d71 A4454D49 		code "EMIT","EMIT","QKey"
 1845      54E3FFFF 
 1845      FF040000 
 1845      00
 1846 0d7e 9A6750   		movzbl (r7),r0		# Get the character
 1847 0d81 800457   		addb2 $4,r7		# discard character
 1848 0d84 300300   		bsbw FConOut		# Print it
 1849 0d87 176B     		jmp (r11)
 1850              	
 1851 0d89 00       	invis:	.byte 0
 1852              	
 1853              	 #	FConOut: routine to conditionally display info on the console;
 1854              	 #
GAS LISTING circforth.s 			page 38


 1855              	 #	This routine is a wrapper for the BIOS ConOut that allows console
 1856              	 #	display to be inhibitted during download from a bit-banged serial
 1857              	 #	port (such as the SROM port of the NV5). If output is invisible,
 1858              	 #	ConOut is not called. If output is not invisible, ConOut is called.
 1859              	
 1860              	FConOut:
 1861 0d8a 95AFFC   		tstb invis
 1862 0d8d 1303     		beql fconout1
 1863 0d8f 31C6F2   		brw ConOut
 1864 0d92 05       	fconout1: rsb
 1865              	
 1866              	 #	.off
 1867              	 #
 1868              	 #	This word turns EMIT off so that it won't print anything. This is
 1869              	 #	needed when downloading code through the bit-banged serial port so
 1870              	 #	the NV5 can get ready for the next character without wasting time
 1871              	 #	echoing the character.
 1872              	 #
 1873              	 #	$$$
 1874              	
 1875 0d93 A42E4F46 		code "DotOff",".OFF","EMIT"
 1875      46D9FFFF 
 1875      FF040000 
 1875      00
 1876 0da0 94AFE6   		clrb invis
 1877 0da3 176B     		jmp (r11)
 1878              	
 1879              	 #	.on
 1880              	 #
 1881              	 #	This word turns EMIT back on after it has been disabled by .off.
 1882              	 #	Used to end a download sequence.
 1883              	 #
 1884              	 #	$$$
 1885              	
 1886 0da5 A32E4F4E 		code "DotOn",".ON","DotOff"
 1886      EAFFFFFF 
 1886      04000000 
 1887 0db1 9001AFD4 		movb $1,invis
 1888 0db5 176B     		jmp (r11)
 1889              	
 1890              	 #	?terminal: <see if op. interrupted <like w/^C>>
 1891              	 #
 1892              	 #	Since we can't check for ^C on the bit-banged console port of
 1893              	 #	the NV5, and we don't know what to do with keys that come in
 1894              	 #	which aren't ^Cs anyway, I'm stubbing it.
 1895              	 #
 1896              	 #	Beware the infinite loop...
 1897              	
 1898 0db7 A93F5445 		code "QTerminal","?TERMINAL","DotOn"
 1898      524D494E 
 1898      414CE4FF 
 1898      FFFF0400 
 1898      0000
 1899 0dc9 820457   		subb2 $4,r7		# make space on math stack
 1900 0dcc D467     		clrl (r7)		# claim not interrupted
 1901 0dce 176B     		jmp (r11)
 1902              	
GAS LISTING circforth.s 			page 39


 1903              	 #	: CR			( -- )
 1904              	 #	  LIT 13 EMIT
 1905              	 #	  LIT 10 EMIT
 1906              	 #
 1907              	 #	This word advances the cursor to the next line by displaying a
 1908              	 #	carriage return/linefeed sequence.
 1909              	 #
 1910              	 #	$$$
 1911              	
 1912 0dd0 A24352E4 		colon "CR","CR","QTerminal"
 1912      FFFFFFD5 
 1912      F4FFFF
 1913 0ddb 18FEFFFF 		literal 13		# Display the carriage return
 1913      0D000000 
 1914 0de3 97FFFFFF 		offset EMIT
 1915 0de7 0CFEFFFF 		literal 10
 1915      0A000000 
 1916 0def 8BFFFFFF 		offset EMIT		# Display the linefeed
 1917 0df3 50060000 		offset SemiS
 1918              	
 1919              	 #	: SPACE ( EMIT A SPACE )
 1920              	 #	  BL EMIT ;
 1921              	 #
 1922              	 #	Display a space on the screen.
 1923              	
 1924 0df7 A5535041 		colon "SPACE","SPACE","CR"
 1924      4345D3FF 
 1924      FFFFABF4 
 1924      FFFF
 1925 0e05 1A100000 		offset BL
 1926 0e09 71FFFFFF 		offset EMIT
 1927 0e0d 36060000 		offset SemiS
 1928              	
 1929              	 #	: HEX		( GO TO HEXADECIMAL BASE )
 1930              	 #	  LIT 0x10 BASE ! ;
 1931              	 #
 1932              	 #	This word causes the system to use hexadecimal for all numeric
 1933              	 #	I/O.
 1934              	
 1935 0e11 A3484558 		colon "HEX","HEX","SPACE"
 1935      E2FFFFFF 
 1935      93F4FFFF 
 1936 0e1d D6FDFFFF 		literal 0x10
 1936      10000000 
 1937 0e25 A90F0000 		offset BASE
 1938 0e29 85FCFFFF 		offset Store
 1939 0e2d 16060000 		offset SemiS
 1940              	
 1941              	 #	: DECIMAL	( GO TO DECIMAL BASE )
 1942              	 #	  LIT 0x0A BASE !
 1943              	 #	;
 1944              	 #
 1945              	 #	This word causes the system to use decimal for all numeric I/O.
 1946              	
 1947 0e31 A7444543 		colon "DECIMAL","DECIMAL","HEX"
 1947      494D414C 
 1947      D8FFFFFF 
GAS LISTING circforth.s 			page 40


 1947      6FF4FFFF 
 1948 0e41 B2FDFFFF 		literal 10
 1948      0A000000 
 1949 0e49 850F0000 		offset BASE
 1950 0e4d 61FCFFFF 		offset Store
 1951 0e51 F2050000 		offset SemiS
 1952              	
 1953              	 #	digit: 		( c base -- 0 ) of c isn't a digit
 1954              	 #			( c base -- v 1 ) if c is a digit
 1955              	 #
 1956              	 #	This word looks to see if the ASCII character c is a digit in
 1957              	 #	the number base specified by base. If it is not a digit, 0 is
 1958              	 #	pushed. If it is a digit, the numeric value of that digit is
 1959              	 #	pushed followed by a 1.
 1960              	
 1961 0e55 A5444947 		code "DIGIT","DIGIT","DECIMAL"
 1961      4954D6FF 
 1961      FFFF0400 
 1961      0000
 1962 0e63 D06751   		movl (r7),r1		# Get the base
 1963 0e66 800457   		addb2 $4,r7		# discard base
 1964 0e69 D06750   		movl (r7),r0		# Get the character
 1965 0e6c 800457   		addb2 $4,r7		# dscard character
 1966              	
 1967 0e6f D13050   		cmpl $0x30,r0		# Is it smaller than '0'?
 1968 0e72 1A35     		bgtru Digit_Nope	# No, go
 1969 0e74 D13A50   		cmpl $0x3a,r0		# Is it bigger than '9'?
 1970 0e77 1F05     		blssu Digit_Alpha
 1971              	
 1972 0e79 823050   		subb2 $0x30,r0		# Convert it to a number (there won't
 1973 0e7c 1118     		brb Digit_Test		# be any borrows)
 1974              	
 1975              	Digit_Alpha:
 1976 0e7e 8A2050   		bicb2 $0x20,r0		# Make certain it's uppercase
 1977 0e81 D18F4000 		cmpl $0x41-1,r0		# Is it too small to be an alphadigit?
 1977      000050
 1978 0e88 1A1F     		bgtru Digit_Nope	# Yes, go
 1979 0e8a D18F5A00 		cmpl $0x5a,r0		# Is it too big to be an alphadigit?
 1979      000050
 1980 0e91 1F16     		blssu Digit_Nope	# Yes, go
 1981              	
 1982 0e93 823750   		subb2 $0x41-10,r0	# Make it 10 through 35
 1983              	Digit_Test:
 1984 0e96 D15051   		cmpl r0,r1		# Check against the base
 1985 0e99 1A0E     		bgtru Digit_Nope	# If too big, go
 1986              	
 1987 0e9b 820457   		subb2 $4,r7		# make space for value
 1988 0e9e D05067   		movl r0,(r7)		# It's a digit. Push the value
 1989 0ea1 820457   		subb2 $4,r7		# make space for flag
 1990 0ea4 9A0167   		movzbl $1,(r7)		# Push TRUE
 1991 0ea7 176B     		jmp (r11)
 1992              	
 1993              	Digit_Nope:			# It's not a digit
 1994 0ea9 820457   		subb2 $4,r7		# make space for flag
 1995 0eac D467     		clrl (r7)		# Push FALSE
 1996 0eae 176B     		jmp (r11)
 1997              	
GAS LISTING circforth.s 			page 41


 1998              	 #	: TYPE		( addr n -- ) ( displays n bytes from addr )
 1999              	 #
 2000              	 #	This word displays n bytes starting at addr on the console. It
 2001              	 #	depends on the BIOS not mutilating R5 and R6.
 2002              	 #
 2003              	 #	$$$
 2004              	
 2005 0eb0 A4545950 		code "TYPE","TYPE","DIGIT"
 2005      45A0FFFF 
 2005      FF040000 
 2005      00
 2006 0ebd D06755   		movl (r7),r5		# Count to R5
 2007 0ec0 800457   		addb2 $4,r7		# discard count
 2008 0ec3 D06756   		movl (r7),r6		# Address to R6
 2009 0ec6 800457   		addb2 $4,r7		# discard address
 2010 0ec9 9A8650   	Type1:	movzbl (r6)+,r0		# Get the character & bump address
 2011 0ecc 30BBFE   		bsbw FConOut		# Display the character
 2012 0ecf F555F7   		sobgtr r5,Type1		# Repeat until done
 2013 0ed2 176B     		jmp (r11)
 2014              	
 2015              	 #	: COUNT			( ADDR -- ADDR+1 COUNT )
 2016              	 #
 2017              	 #	This word fetches the byte at ADDR and increments ADDR. This takes
 2018              	 #	a string of the form <count><body> (such as all of the in-line
 2019              	 #	strings) and converts it to a form suitable for TYPE.
 2020              	 #
 2021              	 #	$$$
 2022              	
 2023 0ed4 A5434F55 		code "COUNT","COUNT","TYPE"
 2023      4E54D6FF 
 2023      FFFF0400 
 2023      0000
 2024 0ee2 9AB70050 		movzbl *(r7),r0		# Fetch count
 2025 0ee6 D667     		incl (r7)		# bump address
 2026 0ee8 820457   		subb2 $4,r7		# make space for count
 2027 0eeb D05067   		movl r0,(r7)		# push count
 2028 0eee 176B     		jmp (r11)
 2029              	
 2030              	 #	: (.")			( PRINT A COMPILED STRING )
 2031              	 #	  R COUNT
 2032              	 #	  DUP 1+ R> + >R TYPE
 2033              	 #	;
 2034              	 #
 2035              	 #	This word is the run-time action of ."; it prints out a string
 2036              	 #	embedded in the word.
 2037              	
 2038 0ef0 A4282E22 		colon "PDotQuote","(.\")","COUNT"
 2038      29DFFFFF 
 2038      FFB3F3FF 
 2038      FF
 2039 0efd 2CF5FFFF 		offset R		# return address
 2040 0f01 DDFFFFFF 		offset COUNT		# ra+1 count
 2041 0f05 B5F5FFFF 		offset DUP		# ra+1 count count
 2042 0f09 FFF7FFFF 		offset OnePlus		# ra+1 count count+1
 2043 0f0d 0AF5FFFF 		offset FromR		# ra+1 count count+1 ra
 2044 0f11 BAF7FFFF 		offset Plus		# ra+1 count ra+count+1 (skip string)
 2045 0f15 EFF4FFFF 		offset ToR		# ra+1 count
GAS LISTING circforth.s 			page 42


 2046 0f19 A0FFFFFF 		offset TYPE
 2047 0f1d 26050000 		offset SemiS
 2048              	
 2049              	 #	: ."			( COMPILE A STRING IF COMPILING,
 2050              	 #				  OR PRINT A STRING IF INTERPRETING )
 2051              	 #	  LIT '"'
 2052              	 #	  STATE @
 2053              	 #	  0BRANCH QUOTE1
 2054              	 #	  COMPILE (.") WORD HERE C@ 1+ ALLOT	( IF )
 2055              	 #	  BRANCH QUOTE2
 2056              	 #	LABEL QUOTE1
 2057              	 #	  WORD HERE COUNT TYPE			( ELSE )
 2058              	 #	LABEL QUOTE2
 2059              	 #	;*
 2060              	 #
 2061              	 #	This word behaves differently depending on whether the FORTH system
 2062              	 #	is compiling or interpreting.
 2063              	 #
 2064              	 #	If the FORTH system is compiling, it compiles the string immediately
 2065              	 #	following it into the current word after (."). When the word is 
 2066              	 #	executed, the string will be printed.
 2067              	 #
 2068              	 #	If the FORTH system is not compiling, it prints out the string
 2069              	 #	immediately following it in the terminal input buffer.
 2070              	
 2071 0f21 E22E22CC 		colon "DotQuote",".\"","PDotQuote",Immediate
 2071      FFFFFF84 
 2071      F3FFFF
 2072 0f2c C7FCFFFF 		literal 0x22	# quote
 2072      22000000 
 2073 0f34 890E0000 		offset STATE
 2074 0f38 3BFBFFFF 		offset Fetch
 2075 0f3c C1F3FFFF 		offset ZBranch
 2076 0f40 28000000 		offset Quote1
 2077 0f44 11080000 		offset COMPILE
 2078 0f48 B1FFFFFF 		offset PDotQuote
 2079 0f4c 51090000 		offset WORD
 2080 0f50 45FDFFFF 		offset HERE
 2081 0f54 30FBFFFF 		offset CFetch
 2082 0f58 B0F7FFFF 		offset OnePlus
 2083 0f5c 53FDFFFF 		offset ALLOT
 2084 0f60 88F3FFFF 		offset BRANCH
 2085 0f64 14000000 		offset Quote2
 2086 0f68 35090000 	Quote1:	offset WORD
 2087 0f6c 29FDFFFF 		offset HERE
 2088 0f70 6EFFFFFF 		offset COUNT
 2089 0f74 45FFFFFF 		offset TYPE
 2090 0f78 CB040000 	Quote2:	offset SemiS
 2091              	
 2092              	 #	: QUERY
 2093              	 #	  TIB @		( ADDRESS OF BUFFER )
 2094              	 #	  B/BUF @	( SIZE OF BUFFER )
 2095              	 #	  EXPECT	( GET A LINE )
 2096              	 #	  O IN !	( PREPARE FOR INTERPRET )
 2097              	 #	;
 2098              	 #
 2099              	 #	This word reads a line from the console into the terminal input
GAS LISTING circforth.s 			page 43


 2100              	 #	buffer. It also initializes IN, a variable used by the interpreter
 2101              	 #	to keep track of its progress in the terminal input buffer.
 2102              	
 2103              	#	colon "QUERY","QUERY","DotQuote"
 2104              	#	offset TIB
 2105              	#	offset Fetch
 2106              	#	offset BSlashBuf
 2107              	#	offset Fetch
 2108              	#	offset EXPECT
 2109              	#	offset Zero
 2110              	#	offset IN
 2111              	#	offset Store
 2112              	#	offset SemiS
 2113              	
 2114 0f7c A5515545 		colon "QUERY","QUERY","DotQuote"
 2114      52599FFF 
 2114      FFFF26F3 
 2114      FFFF
 2115              	
 2116 0f8a DF0D0000 		offset PTib	# Fetch a line via BDOS function 10
 2117 0f8e E5FAFFFF 		offset Fetch
 2118 0f92 61FCFFFF 		literal 10
 2118      0A000000 
 2119 0f9a FD0E0000 		offset BDOS
 2120 0f9e 34F5FFFF 		offset DROP
 2121 0fa2 35FEFFFF 		offset CR
 2122              	
 2123 0fa6 970E0000 		offset Zero	# -- 0
 2124 0faa BF0D0000 		offset PTib	# Drop a null at the end of the line.
 2125 0fae C5FAFFFF 		offset Fetch
 2126 0fb2 56F7FFFF 		offset OnePlus  # -- 0, addr of length read
 2127 0fb6 CEFAFFFF 		offset CFetch	# -- 0, length read
 2128 0fba BF0D0000 		offset TIB
 2129 0fbe B5FAFFFF 		offset Fetch
 2130 0fc2 09F7FFFF 		offset Plus	# -- 0, TIB + length read
 2131 0fc6 02FBFFFF 		offset CStore
 2132              	
 2133 0fca 730E0000 		offset Zero	# Initialize IN
 2134 0fce C90D0000 		offset IN
 2135 0fd2 DCFAFFFF 		offset Store
 2136              	
 2137 0fd6 6D040000 		offset SemiS
 2138              	
 2139              	 #	enclose: addr c -- addr first last next
 2140              	 #
 2141              	 #	This word looks through memory starting at addr to find a word
 2142              	 #	enclosed by the specified delimiter. The search ends either when
 2143              	 #	the delimiter is found or a null is found. WORD uses this word
 2144              	 #	to hack the TIB into pieces.
 2145              	 #
 2146              	 #	First is the offset from addr to the first character in the word;
 2147              	 #		that is, the offset to the first non-delimiter character
 2148              	 #	Last is the offset from addr to the character after the last
 2149              	 #		character in the word; that is, to the delimiter following
 2150              	 #		the word
 2151              	 #	Next is the offset from addr to the character at which the search
 2152              	 #		for the next word should begin; that is, the character
GAS LISTING circforth.s 			page 44


 2153              	 #		after the delimiter that ended the word
 2154              	
 2155 0fda A7454E43 		code "ENCLOSE","ENCLOSE","QUERY"
 2155      4C4F5345 
 2155      9AFFFFFF 
 2155      04000000 
 2156              	
 2157 0fea 9A6750   		movzbl (r7),r0		# delim = pop();
 2158 0fed 800457   		addb2 $4,r7
 2159              	
 2160 0ff0 D06751   		movl (r7),r1		# current = pop(); push( current );
 2161 0ff3 D452     		clrl r2			# offset = -1;
 2162 0ff5 D752     		decl r2
 2163 0ff7 D751     		decl r1			# current--;
 2164              	
 2165              	encl1:
 2166 0ff9 D651     		incl r1			# current++;
 2167 0ffb D652     		incl r2			# offset++;
 2168 0ffd 916150   		cmpb (r1),r0		# if( mem[current] == delim ) goto encl1;
 2169 1000 13F7     		beql encl1
 2170              	
 2171 1002 820457   		subb2 $4,r7
 2172 1005 D05267   		movl r2,(r7)		# push( offset );
 2173              	
 2174 1008 9561     		tstb (r1)		# if( mem[current] == NULL ) {
 2175 100a 120F     		bneq encl2
 2176 100c 820457   		subb2 $4,r7
 2177 100f C1015267 		addl3 $1,r2,(r7)	#   offset++; push( offset ); offset--;
 2178 1013 820457   		subb2 $4,r7
 2179 1016 D05267   		movl r2,(r7)		#   push( offset );
 2180 1019 176B     		jmp (r11)		#   return
 2181              					# }
 2182              	
 2183              	encl2:
 2184 101b D651     		incl r1			# current++;
 2185 101d D652     		incl r2			# offset++;
 2186 101f 916150   		cmpb (r1),r0		# if( mem[current] == delim ) goto encl4
 2187 1022 1312     		beql encl4
 2188 1024 9561     		tstb (r1)		# if( mem[current != NULL ) goto encl2
 2189 1026 12F3     		bneq encl2
 2190              	
 2191              					# /* mem[current] is null.. */
 2192 1028 820457   		subb2 $4,r7
 2193 102b D05267   		movl r2,(r7)		# push( offset );
 2194 102e 820457   		subb2 $4,r7
 2195 1031 D05267   		movl r2,(r7)		# push( offset );
 2196 1034 176B     		jmp (r11)		# return;
 2197              	
 2198              	encl4:				# /* Found the trailing delimiter */
 2199 1036 820457   		subb2 $4,r7
 2200 1039 D05267   		movl r2,(r7)		# push( offset );
 2201 103c 820457   		subb2 $4,r7
 2202 103f C1015267 		addl3 $1,r2,(r7)	# offset++; push( offset );
 2203 1043 176B     		jmp (r11)		# return;
 2204              	
 2205              	 #	: HOLD		( C -- <PLACE C AT --HLD> )
 2206              	 #	  HLD -- HLD @ C!
GAS LISTING circforth.s 			page 45


 2207              	 #	;
 2208              	 #
 2209              	 #	This word is used to place something in the pad during formatted
 2210              	 #	numeric output. The current location in the buffer is decremented
 2211              	 #	and the byte on top of the math stack is stored.
 2212              	
 2213 1045 A4484F4C 		colon "HOLD","HOLD","ENCLOSE"
 2213      4490FFFF 
 2213      FF5EF2FF 
 2213      FF
 2214 1052 AC0D0000 		offset HLD
 2215 1056 C7FAFFFF 		offset MinusMinus
 2216 105a A40D0000 		offset HLD
 2217 105e 15FAFFFF 		offset Fetch
 2218 1062 66FAFFFF 		offset CStore
 2219 1066 DD030000 		offset SemiS
 2220              	
 2221              	 #	: (NUMBER)		( num.lo num.hi addr -- num.lo num.hi addr )
 2222              	 #	LABEL NUM1
 2223              	 #	  1+
 2224              	 #	  DUP >R C@ BASE @ DIGIT
 2225              	 #	  0BRANCH NUM2			( WHILE )
 2226              	 #	  SWAP BASE @ U* DROP
 2227              	 #	  ROT BASE @ U* D+
 2228              	 #	  DPL @ 1+
 2229              	 #	  ZBRANCH NUM3
 2230              	 #	  DPL ++			( IF )
 2231              	 #	LABEL NUM3
 2232              	 #	  R>				( ENDIF )
 2233              	 #	  BRANCH NUM1			( REPEAT )
 2234              	 #	LABEL NUM2
 2235              	 #	  R>
 2236              	 #	;
 2237              	 #
 2238              	 #	This word collects ASCII digits starting at the specified address
 2239              	 #	into a binary double-length number. The digits are added to the
 2240              	 #	original double-length number on the stack; it is expected that
 2241              	 #	conversion will be interrupted when a decimal point is found and
 2242              	 #	resumed afterwards.
 2243              	 #
 2244              	 #	As digits are accumulated, the count of digits after the decimal
 2245              	 #	point is maintained in DPL. If DPL is -1, it is assumed that a
 2246              	 #	decimal point has not yet been found and DPL is not modified. If
 2247              	 #	DPL is not -1, it is assumed that a decimal point has been found.
 2248              	 #	For each digit that is succesfully converted, DPL is incremented.
 2249              	 #
 2250              	 #	Conversion continues until a non-digit character is encountered.
 2251              	 #	At exit, addr is the address of this non-digit character.
 2252              	
 2253 106a A8284E55 		colon "PNumber","(NUMBER)","HOLD"
 2253      4D424552 
 2253      29D2FFFF 
 2253      FF35F2FF 
 2253      FF
 2254 107b 8DF6FFFF 	Num1:	offset OnePlus
 2255 107f 3BF4FFFF 		offset DUP
 2256 1083 81F3FFFF 		offset ToR
GAS LISTING circforth.s 			page 46


 2257 1087 FDF9FFFF 		offset CFetch
 2258 108b 430D0000 		offset BASE
 2259 108f E4F9FFFF 		offset Fetch
 2260 1093 CCFDFFFF 		offset DIGIT
 2261 1097 66F2FFFF 		offset ZBranch
 2262 109b 54000000 		offset Num2
 2263 109f C0F3FFFF 		offset SWAP
 2264 10a3 2B0D0000 		offset BASE
 2265 10a7 CCF9FFFF 		offset Fetch
 2266 10ab ADF8FFFF 		offset UStar
 2267 10af 23F4FFFF 		offset DROP
 2268 10b3 CCF3FFFF 		offset ROT
 2269 10b7 170D0000 		offset BASE
 2270 10bb B8F9FFFF 		offset Fetch
 2271 10bf 99F8FFFF 		offset UStar
 2272 10c3 E8F7FFFF 		offset DPlus
 2273 10c7 170D0000 		offset DPL
 2274 10cb A8F9FFFF 		offset Fetch
 2275 10cf 39F6FFFF 		offset OnePlus
 2276 10d3 2AF2FFFF 		offset ZBranch
 2277 10d7 0C000000 		offset Num3
 2278 10db 030D0000 		offset DPL
 2279 10df 23FAFFFF 		offset PlusPlus
 2280 10e3 34F3FFFF 	Num3:	offset FromR
 2281 10e7 01F2FFFF 		offset BRANCH
 2282 10eb 90FFFFFF 		offset Num1
 2283 10ef 28F3FFFF 	Num2:	offset FromR
 2284 10f3 50030000 		offset SemiS
 2285              	
 2286              	 #	: NUMBER		( addr -- val.lo val.hi )
 2287              	 #	  0 0 ROT DUP 1+ C@
 2288              	 #	  LIT '-' = DUP >R + -1
 2289              	 #	LABEL N1			( BEGIN )
 2290              	 #	  DPL ! (NUMBER) DUP C@ BL !=
 2291              	 #	  0BRANCH N2			( WHILE )
 2292              	 #	  DUP C@ LIT '.' != 0 ?ERROR 0	( . )
 2293              	 #	  BRANCH N1			( REPEAT )
 2294              	 #	LABEL N2
 2295              	 #	  DROP R>
 2296              	 #	  0BRANCH N3			( IF )
 2297              	 #	  DMINUS
 2298              	 #	LABEL N3
 2299              	 #	;
 2300              	 #
 2301              	 #	This word converts an ASCII digit string beginning at addr to a
 2302              	 #	binary number, returning the double-length value of that number.
 2303              	 #
 2304              	 #	Conversion is performed using (NUMBER). When (NUMBER) stops, the
 2305              	 #	offending character is examined. If it is a blank, the conversion
 2306              	 #	is done and NUMBER exits. If it is a decimal point, DPL is set to
 2307              	 #	zero to record the fact that a decimal point has been found and
 2308              	 #	(NUMBER) is re-entered. If the character is neither a blank nor
 2309              	 #	a decimal point, MSG # 0 is displayed.
 2310              	 #
 2311              	 #	By the way, I believe this word is the reason WORD insists that
 2312              	 #	there be a blank following the word that it has copied from TIB.
 2313              	 #	If INTERPRET cannot find a word in the dictionary, it assumes it
GAS LISTING circforth.s 			page 47


 2314              	 #	must be a number and hands it over to NUMBER. If the word did not
 2315              	 #	have a blank after it, the conversion would end on a non-blank
 2316              	 #	character and NUMBER would issue MSG # 0. What can I say? FORTH
 2317              	 #	seems to be held together by side-effects...
 2318              	
 2319 10f7 A64E554D 		colon "NUMBER","NUMBER","PNumber"
 2319      4245526C 
 2319      FFFFFFAA 
 2319      F1FFFF
 2320 1106 370D0000 		offset Zero
 2321 110a 330D0000 		offset Zero
 2322 110e 71F3FFFF 		offset ROT
 2323 1112 A8F3FFFF 		offset DUP
 2324 1116 F2F5FFFF 		offset OnePlus
 2325 111a 6AF9FFFF 		offset CFetch
 2326 111e D5FAFFFF 		literal 0x2d		# <^A/-/>
 2326      2D000000 
 2327 1126 1AF5FFFF 		offset Equal
 2328 112a 90F3FFFF 		offset DUP
 2329 112e D6F2FFFF 		offset ToR
 2330 1132 99F5FFFF 		offset Plus
 2331 1136 BDFAFFFF 		literal -1
 2331      FFFFFFFF 
 2332 113e A00C0000 	N1:	offset DPL
 2333 1142 6CF9FFFF 		offset Store
 2334 1146 31FFFFFF 		offset PNumber
 2335 114a 70F3FFFF 		offset DUP
 2336 114e 36F9FFFF 		offset CFetch
 2337 1152 CD0C0000 		offset BL
 2338 1156 0BF5FFFF 		offset NotEq
 2339 115a A3F1FFFF 		offset ZBranch
 2340 115e 2C000000 		offset N2
 2341 1162 58F3FFFF 		offset DUP
 2342 1166 1EF9FFFF 		offset CFetch
 2343 116a 89FAFFFF 		literal 0x2e		# <^A/./>
 2343      2E000000 
 2344 1172 EFF4FFFF 		offset NotEq
 2345 1176 C70C0000 		offset Zero
 2346 117a 65080000 		offset QError
 2347 117e BF0C0000 		offset Zero
 2348 1182 66F1FFFF 		offset BRANCH
 2349 1186 B8FFFFFF 		offset N1
 2350 118a 48F3FFFF 	N2:	offset DROP
 2351 118e 89F2FFFF 		offset FromR
 2352 1192 6BF1FFFF 		offset ZBranch
 2353 1196 08000000 		offset N3
 2354 119a 65F7FFFF 		offset DMINUS
 2355 119e A5020000 	N3:	offset SemiS
 2356              	
 2357              	 #	: SPACES		( a -- )
 2358              	 #	  0 MAX -DUP 0BRANCH SPACES1
 2359              	 #	  0 (DO)
 2360              	 #	LABEL SPACES2
 2361              	 #	      SPACE
 2362              	 #	  (LOOP) SPACES2
 2363              	 #	LABEL SPACES1
 2364              	 #	;
GAS LISTING circforth.s 			page 48


 2365              	 #
 2366              	 #	Prints the specified number of spaces on the console.
 2367              	
 2368 11a2 A6535041 		colon "SPACES","SPACES","NUMBER"
 2368      4345534E 
 2368      FFFFFFFF 
 2368      F0FFFF
 2369 11b1 8C0C0000 		offset Zero
 2370 11b5 F8F5FFFF 		offset MAX
 2371 11b9 6DF3FFFF 		offset MinusDup
 2372 11bd 40F1FFFF 		offset ZBranch
 2373 11c1 18000000 		offset Spaces1
 2374 11c5 780C0000 		offset Zero
 2375 11c9 84F1FFFF 		offset PDo
 2376 11cd 34FCFFFF 	Spaces2: offset SPACE
 2377 11d1 49F1FFFF 		offset PLoop
 2378 11d5 F8FFFFFF 		offset Spaces2
 2379 11d9 6A020000 	Spaces1: offset SemiS
 2380              	
 2381              	 #	: <#		( -- )
 2382              	 #	  PAD HLD !
 2383              	 #	;
 2384              	 #
 2385              	 #	This word initializes variables used by the formatted output words.
 2386              	 #	Basically, it points HLD at the end of a region following the end
 2387              	 #	of the dictionary. As formatted output is generated, it moves towards
 2388              	 #	the dictionary.
 2389              	
 2390 11dd A23C23C2 		colon "LessHash","<#","SPACES"
 2390      FFFFFFC8 
 2390      F0FFFF
 2391 11e8 470C0000 		offset PAD		# Get address of end of scratchpad
 2392 11ec 120C0000 		offset HLD		# Initialize HLD
 2393 11f0 BEF8FFFF 		offset Store
 2394 11f4 4F020000 		offset SemiS
 2395              	
 2396              	 #	: #>		( d.hi d.lo -- addr count )
 2397              	 #	  DROP DROP 	( d.hi d.lo -- )
 2398              	 #	  HLD @ 	( -- addr )
 2399              	 #	  PAD OVER -	( -- addr count )
 2400              	 #	;
 2401              	 #
 2402              	 #	This word ends formatted numeric output. It drops the double-precision
 2403              	 #	number from the math stack and returns the address and size of the
 2404              	 #	formatted output.
 2405              	
 2406 11f8 A2233EE2 		colon "HashGreater","#>","LessHash"
 2406      FFFFFFAD 
 2406      F0FFFF
 2407 1203 CFF2FFFF 		offset DROP
 2408 1207 CBF2FFFF 		offset DROP
 2409 120b F30B0000 		offset HLD
 2410 120f 64F8FFFF 		offset Fetch
 2411 1213 1C0C0000 		offset PAD
 2412 1217 89F2FFFF 		offset OVER
 2413 121b 46F3FFFF 		offset Subtract
 2414 121f 24020000 		offset SemiS
GAS LISTING circforth.s 			page 49


 2415              	
 2416              	 #	: SIGN		( d.hi d.lo -- d.hi d.lo )
 2417              	 #	  ROT 0< 	( d.hi d.lo -- d.hi d.lo 1 <if negative> )
 2418              	 #	  0BRANCH SIGN1	( -- d.hi d.lo )
 2419              	 #	  LIT '-' HOLD	( stash the minus sign )
 2420              	 #	LABEL SIGN1
 2421              	 #	;
 2422              	 #
 2423              	 #	This word stuffs a '-' into the formatted numeric string if the
 2424              	 #	number being converted is negative.
 2425              	
 2426 1223 A4534947 		colon "SIGN","SIGN","HashGreater"
 2426      4ED0FFFF 
 2426      FF80F0FF 
 2426      FF
 2427 1230 4FF2FFFF 		offset ROT
 2428 1234 FCF3FFFF 		offset ZLess
 2429 1238 C5F0FFFF 		offset ZBranch
 2430 123c 10000000 		offset Sign1
 2431 1240 B3F9FFFF 		literal 0x2d		# <^A/-/>
 2431      2D000000 
 2432 1248 06FEFFFF 		offset HOLD
 2433 124c F7010000 	Sign1:	offset SemiS
 2434              	
 2435              	 #	: #		( d1 -- d2 )
 2436              	 #	  BASE @ 		( d1 -- d1 base )
 2437              	 #	  M/MOD 		( -- remainder d1/base.hi d1/base.lo )
 2438              	 #	  ROT 			( -- d1/base remainder )
 2439              	 #	  LIT 9 OVER		( -- d1/base remainder 9 remainder ) 
 2440              	 #	  < 			( -- d1/base remainder 1 <if remainder < 9> )
 2441              	 #	0BRANCH #1		( -- d1/base remainder )
 2442              	 #	  LIT 7 +		( -- d1/base remainder+7 )
 2443              	 #				( 7 is offset to make 'A' come after '9' )
 2444              	 #	LABEL #1
 2445              	 #	  LIT '0' + 		( -- d1/base remainder+'0' )
 2446              	 #	  HOLD			( -- d1/base )
 2447              	 #	;
 2448              	 #
 2449              	 #	This word generates the next digit from a double-length number 
 2450              	 #	on the top of the math stack. The result is the original double-length
 2451              	 #	number divied by the current base.
 2452              	
 2453 1250 A123D1FF 		colon "Hash","#","SIGN"
 2453      FFFF56F0 
 2453      FFFF
 2454 125a 740B0000 		offset BASE
 2455 125e 15F8FFFF 		offset Fetch
 2456 1262 DFF7FFFF 		offset MSlashMod
 2457 1266 19F2FFFF 		offset ROT
 2458 126a 89F9FFFF 		literal 9
 2458      09000000 
 2459 1272 2EF2FFFF 		offset OVER
 2460 1276 03F3FFFF 		offset Less
 2461 127a 83F0FFFF 		offset ZBranch
 2462 127e 10000000 		offset Hash1
 2463 1282 71F9FFFF 		literal 7
 2463      07000000 
GAS LISTING circforth.s 			page 50


 2464 128a 41F4FFFF 		offset Plus
 2465 128e 65F9FFFF 	Hash1:	literal 0x30		# <^A/0/>
 2465      30000000 
 2466 1296 35F4FFFF 		offset Plus
 2467 129a B4FDFFFF 		offset HOLD
 2468 129e A5010000 		offset SemiS
 2469              	
 2470              	 #	: #S
 2471              	 #	LABEL #S1
 2472              	 #	  # 2DUP OR 0= ZBRANCH #S1
 2473              	 #	;
 2474              	 #
 2475              	 #	This word generates digits until the number being converted has
 2476              	 #	gone to zero.
 2477              	
 2478 12a2 A22353AB 		colon "HashS","#S","Hash"
 2478      FFFFFF03 
 2478      F0FFFF
 2479 12ad A9FFFFFF 	HashS1:	offset Hash
 2480 12b1 33F2FFFF 		offset TwoDUP
 2481 12b5 F8F2FFFF 		offset OR
 2482 12b9 5FF3FFFF 		offset ZEq
 2483 12bd 40F0FFFF 		offset ZBranch
 2484 12c1 ECFFFFFF 		offset HashS1
 2485 12c5 7E010000 		offset SemiS
 2486              	
 2487              	 #	: D.R		( d.lo d.hi n -- )
 2488              	 #	  >R SWAP	( d.lo d.hi n -- d.hi d.lo d.hi )
 2489              	 #	  OVER DABS	( -- d.hi |d.lo d.hi| )
 2490              	 # 	  <# #S 	( -- d.hi )
 2491              	 #	  SIGN #> 	( -- pad count )
 2492              	 #	  R> OVER 	( -- pad count n count )
 2493              	 #	  - SPACES 	( -- pad count )
 2494              	 #	  TYPE		( -- )
 2495              	 #	;
 2496              	 #
 2497              	 #	This word displays the double-precision number d in the current
 2498              	 #	base in an n character field.
 2499              	
 2500 12c9 A3442E52 		colon "DDotR","D.R","HashS"
 2500      D5FFFFFF 
 2500      DBEFFFFF 
 2501 12d5 2FF1FFFF 		offset ToR
 2502 12d9 86F1FFFF 		offset SWAP
 2503 12dd C3F1FFFF 		offset OVER
 2504 12e1 60F6FFFF 		offset DABS
 2505 12e5 FFFEFFFF 		offset LessHash
 2506 12e9 C0FFFFFF 		offset HashS
 2507 12ed 3FFFFFFF 		offset SIGN
 2508 12f1 0EFFFFFF 		offset HashGreater
 2509 12f5 22F1FFFF 		offset FromR
 2510 12f9 A7F1FFFF 		offset OVER
 2511 12fd 64F2FFFF 		offset Subtract
 2512 1301 ACFEFFFF 		offset SPACES
 2513 1305 B4FBFFFF 		offset TYPE
 2514 1309 3A010000 		offset SemiS
 2515              	
GAS LISTING circforth.s 			page 51


 2516              	 #	: .R		( a n -- )
 2517              	 #	  >R S->D R> D.R
 2518              	 #	;
 2519              	 #
 2520              	 #	This word prints the number a in an n character field. It does this
 2521              	 #	by sign-extending a and then printing the resulting double-precision
 2522              	 #	number using D.R.
 2523              	
 2524 130d A22E52B9 		colon "DotR",".R","DDotR"
 2524      FFFFFF98 
 2524      EFFFFF
 2525 1318 ECF0FFFF 		offset ToR
 2526 131c 89F6FFFF 		offset SignExtend
 2527 1320 F7F0FFFF 		offset FromR
 2528 1324 ADFFFFFF 		offset DDotR
 2529 1328 1B010000 		offset SemiS
 2530              	
 2531              	 #	: D.
 2532              	 #	  0 D.R SPACE
 2533              	 #	;
 2534              	 #
 2535              	 #	This word displays a double-precision number.
 2536              	
 2537 132c A2442EDE 		colon "DDot","D.","DotR"
 2537      FFFFFF79 
 2537      EFFFFF
 2538 1337 060B0000 		offset Zero
 2539 133b 96FFFFFF 		offset DDotR
 2540 133f C2FAFFFF 		offset SPACE
 2541 1343 00010000 		offset SemiS
 2542              	
 2543              	 #	: .		( a -- )
 2544              	 #	  S->D D.
 2545              	 #	;
 2546              	 #
 2547              	 #	This word prints the single-precision number on top of the math
 2548              	 #	stack. It does this by sign-extending the number to a double-length
 2549              	 #	integer and printing the resulting double-length integer.
 2550              	
 2551 1347 A12EE3FF 		colon "Dot",".","DDot"
 2551      FFFF5FEF 
 2551      FFFF
 2552 1351 54F6FFFF 		offset SignExtend	# ( a -- s.a a )
 2553 1355 DEFFFFFF 		offset DDot		# ( s.a a -- ) 		Print it
 2554 1359 EA000000 		offset SemiS		# 			We're done
 2555              	
 2556              	 #	: ?		( a -- )
 2557              	 #	  @ .
 2558              	 #	;
 2559              	 #
 2560              	 #	This word displays what is in memory at the location addressed by the
 2561              	 #	top of stack.
 2562              	
 2563 135d A13FE8FF 		colon "Question","?","Dot"
 2563      FFFF49EF 
 2563      FFFF
 2564 1367 0CF7FFFF 		offset Fetch
GAS LISTING circforth.s 			page 52


 2565 136b E2FFFFFF 		offset Dot
 2566 136f D4000000 		offset SemiS
 2567              	
 2568              	 #	: U.
 2569              	 #	  0 D.
 2570              	 #	;
 2571              	 #
 2572              	 #	This word displays an unsigned single-precision number. It does this
 2573              	 #	by zero-extending the number to double-precision and then displaying
 2574              	 #	the double-precision result.
 2575              	
 2576 1373 A2552EE7 		colon "UDot","U.","Question"
 2576      FFFFFF32 
 2576      EFFFFF
 2577 137e BF0A0000 		offset Zero
 2578 1382 B1FFFFFF 		offset DDot
 2579 1386 BD000000 		offset SemiS
 2580              	
 2581              	 #	: expect		( buffer maxsize -- )
 2582              	 #
 2583              	 #	Can't use BDOS here because BDOS expects maxsize to be in
 2584              	 #	memory in front of buffer.
 2585              	 #
 2586              	 #	This procedure reads a line into the specified buffer.
 2587              	 #
 2588              	 #	This is really primitive. The only non-printing characters it knows
 2589              	 #	about are BS, DEL, and CR. All other whitespace is ignored.
 2590              	 #
 2591              	 #	If you have typed past the end of the buffer, the new character is
 2592              	 #	ignored; it is not echoed so that you will know you've done something
 2593              	 #	wrong.
 2594              	 #
 2595              	 #	Input ends when you press CR. At that time, a CR/LF is echoed and
 2596              	 #	EXPECT exits.
 2597              	 #
 2598              	 #	If you press BS or DEL and you aren't at the beginning of the buffer,
 2599              	 #	BS/space/BS will be echoed and EXPECT will back up one position in
 2600              	 #	the buffer.
 2601              	
 2602 138a A6455850 		code "EXPECT","EXPECT","UDot"
 2602      454354E2 
 2602      FFFFFF04 
 2602      000000
 2603 1399 D06759   		movl (r7),r9		# Maximum buffer size to R9
 2604 139c 800457   		addb2 $4,r7		# discard maxsize
 2605 139f D06758   		movl (r7),r8		# Buffer start address to R8
 2606 13a2 800457   		addb2 $4,r7		# discard address
 2607 13a5 C05859   		addl2 r8,r9		# Address of location after buffer to R9
 2608 13a8 D05856   		movl r8,r6		# Current address to R6
 2609              	
 2610              	Expect1:
 2611 13ab 3080EC   		bsbw ConIn		# Get a key
 2612 13ae 8A8F8050 		bicb2 $0x80,r0		# Just to be sure
 2613 13b2 910D50   		cmpb $13,r0		# Is it a <CR>?
 2614 13b5 1338     		beql Expect_CR		# If so, go
 2615 13b7 910850   		cmpb $8,r0		# Is it a <BS>
 2616 13ba 1318     		beql Expect_BS		# If so, go
GAS LISTING circforth.s 			page 53


 2617 13bc 918F7F50 		cmpb $127,r0
 2618 13c0 1312     		beql Expect_BS
 2619 13c2 912050   		cmpb $32,r0		# Is it other whitespace?
 2620 13c5 14E4     		bgtr Expect1		# If so, we don't know how to deal with it,
 2621              					# so ignore it and hope it'll go away.
 2622              	
 2623              	 #	Received a printable character
 2624              	
 2625 13c7 D15659   		cmpl r6,r9		# Is the buffer full?
 2626 13ca 13DF     		beql Expect1		# If so, ignore the character
 2627              	
 2628 13cc 905086   		movb r0,(r6)+		# Otherwise, store the buffer
 2629 13cf 30B8F9   		bsbw FConOut		# Echo it
 2630 13d2 11D7     		brb Expect1		# And wait for another
 2631              	
 2632              	 #	Received a backspace
 2633              	
 2634              	Expect_BS:
 2635 13d4 D15856   		cmpl r8,r6		# Is the buffer empty?
 2636 13d7 13D2     		beql Expect1		# If so, ignore it
 2637 13d9 D756     		decl r6			# Subtract the character from the buffer
 2638 13db 9A0850   		movzbl $8,r0		# And from the screen
 2639 13de 30A9F9   		bsbw FConOut
 2640 13e1 9A2050   		movzbl $32,r0
 2641 13e4 30A3F9   		bsbw FConOut
 2642 13e7 9A0850   		movzbl $8,r0
 2643 13ea 309DF9   		bsbw FConOut
 2644 13ed 11BC     		brb Expect1		# And wait for another
 2645              	
 2646              	 #	Received a CR
 2647              	
 2648              	Expect_CR:
 2649 13ef 9A0D50   		movzbl $13,r0		# Echo for the user
 2650 13f2 3095F9   		bsbw FConOut
 2651 13f5 9A0A50   		movzbl $10,r0
 2652 13f8 308FF9   		bsbw FConOut
 2653 13fb 915659   		cmpb r6,r9		# Room for null terminator?
 2654 13fe 1302     		beql Expect_Exit	# Nope; just leave
 2655 1400 9466     		clrb (r6)		# otherwise, terminate the booger
 2656              	Expect_Exit:
 2657 1402 176B     		jmp (r11)		# Back to ForthOMat
 2658              	
 2659              	 #	: ID.			( NFA -- <PRINT ID OF A WORD> )
 2660              	 #	  dup @ lit 0x1f and 	( nfa wordlength )
 2661              	 #	  swap 1+ swap		( nfa+1 wordlength )
 2662              	 #	  type space
 2663              	 #	;
 2664              	 #
 2665              	 #	I've redone this one because I think the original code was
 2666              	 #	idiotic; it calculated the string length by subtracting LFA from
 2667              	 #	NFA (after first taking a detour through PFA because that's what
 2668              	 #	LFA expects) rather than just fetching the damn thing from the
 2669              	 #	NFA where it started! The guy also seems to want to lay down blanks
 2670              	 #	on top of memory he's just gonna overwrite anyway (see WORD).
 2671              	 #
 2672              	 #	This word prints the name field of a word. This is primarily used
 2673              	 #	by VLIST to display the contents of the dictionary.
GAS LISTING circforth.s 			page 54


 2674              	
 2675 1404 A349442E 		colon "IDDot","ID.","EXPECT"
 2675      82FFFFFF 
 2675      A0EEFFFF 
 2676 1410 AAF0FFFF 		offset DUP		# Don't want to lose nfa when we fetch
 2677 1414 5FF6FFFF 		offset Fetch
 2678 1418 DBF7FFFF 		literal 0x1f
 2678      1F000000 
 2679 1420 71F1FFFF 		offset AND
 2680 1424 3BF0FFFF 		offset SWAP
 2681 1428 E0F2FFFF 		offset OnePlus
 2682 142c 33F0FFFF 		offset SWAP
 2683 1430 89FAFFFF 		offset TYPE
 2684 1434 CDF9FFFF 		offset SPACE
 2685 1438 0B000000 		offset SemiS
 2686              	
 2687              	 #	;S: Loads IP from return stack
 2688              	 #
 2689              	 #	This procedure ends a FORTH word; it is the runtime action performed
 2690              	 #	by ;. It copies a value from the return stack into IP (R10) and resumes
 2691              	 #	execution at the new IP. The IP was originally stashed by DoCol when 
 2692              	 #	the word was entered. 
 2693              	 #
 2694              	 #	; refers to this word during compilation.
 2695              	
 2696 143c A23B53C5 		code "SemiS","\x3bS","IDDot"	# ";S"
 2696      FFFFFF04 
 2696      000000
 2697 1447 D08E5A   		movl (sp)+,r10
 2698 144a 176B     		jmp (r11)
 2699              	
 2700              	 #	: [		( BEGIN EXECUTING )
 2701              	 #	  0 STATE !
 2702              	 #	;*
 2703              	 #
 2704              	 #	This word takes the FORTH system out of compiling mode.
 2705              	
 2706 144c E15BEEFF 		colon "LBracket","[","SemiS",Immediate
 2706      FFFF5AEE 
 2706      FFFF
 2707 1456 E7090000 		offset Zero
 2708 145a 63090000 		offset STATE
 2709 145e 50F6FFFF 		offset Store
 2710 1462 E1FFFFFF 		offset SemiS
 2711              	
 2712              	 #	: ]		( END EXECUTING )
 2713              	 #	  LIT 0xC0 State !
 2714              	 #	;*
 2715              	 #
 2716              	 #	This word puts the FORTH system in compiling mode.
 2717              	
 2718 1466 E15DD4FF 		colon "RBracket","]","SemiS",Immediate
 2718      FFFF40EE 
 2718      FFFF
 2719 1470 83F7FFFF 		literal 0xc0
 2719      C0000000 
 2720 1478 45090000 		offset STATE
GAS LISTING circforth.s 			page 55


 2721 147c 32F6FFFF 		offset Store
 2722 1480 C3FFFFFF 		offset SemiS
 2723              	
 2724              	 #	: :		( DEFINE A WORD )
 2725              	 #	  ?EXEC
 2726              	 #	  !CSP
 2727              	 #	  CREATE ]	( MAKE THE WORD HEADER AND BEGIN COMPILING )
 2728              	 #	  (;CODE) DOCOL
 2729              	 #	;*
 2730              	 #
 2731              	 #	This word makes a new FORTH word; it makes an entry in the
 2732              	 #	dictionary with a CFA that points to DoCol, the code segment
 2733              	 #	that knows how to enter a FORTH word.
 2734              	 #
 2735              	 #	Unfortunately, DoCol doesn't show up in the dictionary, so you
 2736              	 #	can't define your own word equivalent to :...
 2737              	 #
 2738              	 #	I'm not convinced : has to be immediate...
 2739              	
 2740 1484 E13AE0FF 		colon "Colon",":","RBracket",Immediate
 2740      FFFF22EE 
 2740      FFFF
 2741 148e A1050000 		offset QExec
 2742 1492 B5F0FFFF 		offset StoreCSP
 2743 1496 5B020000 		offset CREATE
 2744 149a D2FFFFFF 		offset RBracket
 2745 149e DE000000 		offset PSemiCode
 2746 14a2 0AEEFFFF 		offset DoCol
 2747 14a6 9DFFFFFF 		offset SemiS
 2748              	
 2749              	 #	: ;		( END A DEFINITION )
 2750              	 #	  ?CSP		( CHECK THAT WE'RE DONE )
 2751              	 #	  COMPILE ;S	( PLACE ;S AT THE END )
 2752              	 #	  SMUDGE [	( MAKE THE WORD FINDABLE AND BEGIN INTERPRETING
 2753              	 #	;*
 2754              	 #
 2755              	 #	This word finishes the definition of a word started with :. It
 2756              	 #	appends the address of ;S, the code segment that knows how to
 2757              	 #	exit a FORTH word, to the current word and takes the FORTH system
 2758              	 #	back to interpreting mode.
 2759              	
 2760 14aa E13BD8FF 		colon "Semicolon","\x3b","Colon",Immediate	# "\;",Immediate
 2760      FFFFFCED 
 2760      FFFF
 2761 14b4 C3050000 		offset QCSP
 2762 14b8 9D020000 		offset COMPILE
 2763 14bc 87FFFFFF 		offset SemiS
 2764 14c0 F3010000 		offset SMUDGE
 2765 14c4 8EFFFFFF 		offset LBracket
 2766 14c8 7BFFFFFF 		offset SemiS
 2767              	
 2768              	 #	: CONSTANT
 2769              	 #	  CREATE SMUDGE ,
 2770              	 #	  (;CODE) DOCON
 2771              	 #	;
 2772              	 #
 2773              	 #	This word creates a constant. A constant is a word that, when executed,
GAS LISTING circforth.s 			page 56


 2774              	 #	puts the longword in its Parameter Field onto the math stack. This word
 2775              	 #	creates a new word, points its CFA at the segment of code that knows
 2776              	 #	how to do a constant (DoCon), and compiles the item on top of the math
 2777              	 #	stack into the word's parameter field.
 2778              	 #
 2779              	 #	DoCon doesn't show up in the dictionary, so you can't write your own
 2780              	 #	word equivalent to CONSTANT...
 2781              	
 2782 14cc A8434F4E 		colon "CONSTANT","CONSTANT","Semicolon"
 2782      5354414E 
 2782      54D5FFFF 
 2782      FFD3EDFF 
 2782      FF
 2783 14dd 14020000 		offset CREATE
 2784 14e1 D2010000 		offset SMUDGE
 2785 14e5 E8F7FFFF 		offset Comma
 2786 14e9 93000000 		offset PSemiCode
 2787 14ed C8EDFFFF 		offset DoCon
 2788 14f1 52FFFFFF 		offset SemiS
 2789              	
 2790              	 #	: VARIABLE
 2791              	 #	  CONSTANT
 2792              	 #	  (;CODE) DOVAR
 2793              	 #	;
 2794              	 #
 2795              	 #	This word creates a variable in the dictionary. A variable is
 2796              	 #	similar to a constant, except that it places the address of its
 2797              	 #	parameter field on the math stack instead of the longword stored
 2798              	 #	there. This word creates the variable by first creating a constant
 2799              	 #	and then changing the CFA of the last word created to point to
 2800              	 #	DoVar, the code that knows how to do a variable.
 2801              	 #
 2802              	 #	Unfortunately, DoVar doesn't show up in the dictionary, so you 
 2803              	 #	can't write your own code equivalent to VARIABLE...
 2804              	
 2805 14f5 A8564152 		colon "VARIABLE","VARIABLE","CONSTANT"
 2805      4941424C 
 2805      45CEFFFF 
 2805      FFAAEDFF 
 2805      FF
 2806 1506 D3FFFFFF 		offset CONSTANT
 2807 150a 72000000 		offset PSemiCode
 2808 150e B0EDFFFF 		offset DoVar
 2809 1512 31FFFFFF 		offset SemiS
 2810              	
 2811              	 #	: CODE
 2812              	 #	  CREATE 4 HERE 4 - W!
 2813              	 #	;
 2814              	 #
 2815              	 #	This word starts the definition of a word containing machine code.
 2816              	 #	It does whatever : does, then mutilates the CFA of the word to
 2817              	 #	point to the word's PFA; that is, it modifies the word to indicate
 2818              	 #	that the code with knows how to execute the word is in the word's
 2819              	 #	PFA.
 2820              	 #
 2821              	 #	$$$
 2822              	
GAS LISTING circforth.s 			page 57


 2823 1516 A4434F44 		colon "CODE","CODE","VARIABLE"
 2823      45DAFFFF 
 2823      FF8DEDFF 
 2823      FF
 2824 1523 CE010000 		offset CREATE
 2825 1527 CCF6FFFF 		literal 4		# Offset to code that knows how to do the word
 2825      04000000 
 2826 152f 66F7FFFF 		offset HERE		# Here is now the address of the PFA
 2827 1533 C0F6FFFF 		literal 4		# Form address of CFA
 2827      04000000 
 2828 153b 26F0FFFF 		offset Subtract
 2829 153f 6FF5FFFF 		offset Store
 2830 1543 00FFFFFF 		offset SemiS
 2831              	
 2832              	 #	: EDOC
 2833              	 #	  ?csp
 2834              	 #	  lit 'JMP (R11)' W, smudge [
 2835              	 #	;*
 2836              	 #
 2837              	 #	This word ends the definition of a word containing machine code.
 2838              	 #	It puts the end instruction ( JMP (R11) ) at the end of the word
 2839              	 #	and returns the FORTH system to interpretation mode.
 2840              	 #
 2841              	 #	Since EDOC properly terminates a machine code word, the minimal
 2842              	 #	machine code word is:
 2843              	 #
 2844              	 #	CODE BOOGER EDOC
 2845              	 #
 2846              	 #	$$$
 2847              	
 2848 1547 E445444F 		colon "EDOC","EDOC","CODE",Immediate
 2848      43CAFFFF 
 2848      FF5CEDFF 
 2848      FF
 2849 1554 23050000 		offset QCSP
 2850 1558 9BF6FFFF 		offset LIT
 2851 155c 176B     		jmp (r11)		# We want the instruction JMP (R11)
 2852 155e 0000     		.WORD 0			# LITERAL has to be a longword
 2853 1560 90F7FFFF 		offset WComma
 2854 1564 EEFEFFFF 		offset LBracket
 2855 1568 4B010000 		offset SMUDGE
 2856 156c D7FEFFFF 		offset SemiS
 2857              	
 2858              	 #	: (;CODE)	( fetch the word after (;code), relocate, and
 2859              	 #			  toss on the CFA of the current word
 2860              	 #	  R 		( Address of offset )
 2861              	 #	  dup @ + 	( Fetch it and form absolute address )
 2862              	 #	  LATEST PFA CFA ( Address where we want to store it )
 2863              	 #	  swap over	( -- addr what addr )
 2864              	 #	  - swap !	( Form offset AND store )
 2865              	 #	  r> 4 + >r	( skip the offset )
 2866              	 #	;
 2867              	 #
 2868              	 #	This word is followed by a word parameter. The word parameter specifies
 2869              	 #	the address of the code that is to be executed when the latest word
 2870              	 #	defined is entered; the parameter is, of course, a relative offset
 2871              	 #	to the code.
GAS LISTING circforth.s 			page 58


 2872              	
 2873 1570 A7283B43 		colon "PSemiCode","(\x3b\CODE)","EDOC"	# "(;CODE)"
 2873      4F444529 
 2873      CFFFFFFF 
 2873      30EDFFFF 
 2874 1580 A9EEFFFF 		offset R
 2875 1584 36EFFFFF 		offset DUP
 2876 1588 EBF4FFFF 		offset Fetch
 2877 158c 3FF1FFFF 		offset Plus
 2878 1590 46010000 		offset LATEST
 2879 1594 E8000000 		offset PFA
 2880 1598 94000000 		offset CFA
 2881 159c C3EEFFFF 		offset SWAP
 2882 15a0 00EFFFFF 		offset OVER
 2883 15a4 BDEFFFFF 		offset Subtract
 2884 15a8 B7EEFFFF 		offset SWAP
 2885 15ac 02F5FFFF 		offset Store
 2886 15b0 67EEFFFF 		offset FromR
 2887 15b4 3FF6FFFF 		literal 4
 2887      04000000 
 2888 15bc 0FF1FFFF 		offset Plus
 2889 15c0 44EEFFFF 		offset ToR
 2890 15c4 7FFEFFFF 		offset SemiS
 2891              	
 2892              	 #	: -FIND			( -- pfa length 1 <if found> )
 2893              	 #				( -- 0 <if not found> )
 2894              	 #	  BL WORD		append the word we're searchin' for to
 2895              	 #				the dictionary
 2896              	 #	  HERE LATEST (FIND)
 2897              	 #	;
 2898              	 #
 2899              	 #	This word searches the dictionary for the word at the end of the
 2900              	 #	dictionary; WORD copies a word from TIB to the end of the
 2901              	 #	dictionary. If the word is not found in the dictionary, 0 is
 2902              	 #	placed on the math stack. Otherwise, the parameter field address
 2903              	 #	of the found word, the length byte from the found word's name
 2904              	 #	field, and a 1 are placed on the stack.
 2905              	 #
 2906              	 #	INTERPRET depends on the entire length byte from the found word
 2907              	 #	being pushed onto the stack rather than just the length of the word.
 2908              	 #	The length byte of a FORTH word includes some flags, most importantly
 2909              	 #	for this discussion the immediate flag. INTERPRET compares STATE
 2910              	 #	against the returned length byte to determine whether to compile
 2911              	 #	or execute the found word; if the actual length byte is not returned,
 2912              	 #	INTERPRET will never decide to execute immediate words during
 2913              	 #	compilation.
 2914              	
 2915 15c8 A52D4649 		colon "MinusFind","-FIND","PSemiCode"
 2915      4E44A2FF 
 2915      FFFFDAEC 
 2915      FFFF
 2916 15d6 49080000 		offset BL
 2917 15da C3020000 		offset WORD
 2918 15de B7F6FFFF 		offset HERE
 2919 15e2 F4000000 		offset LATEST
 2920 15e6 46030000 		offset PFind
 2921 15ea 59FEFFFF 		offset SemiS
GAS LISTING circforth.s 			page 59


 2922              	
 2923              	 #	: (		( COMMENT )
 2924              	 #	  LIT ')'	( CLOSING PAREN )
 2925              	 #	  WORD
 2926              	 #	;*
 2927              	 #
 2928              	 #	This word ignores a comment. Bytes are collected at the end of the
 2929              	 #	dictionary until the matching close paren. These bytes are then
 2930              	 #	ignored.
 2931              	
 2932 15ee E128D8FF 		colon "Comment","(","MinusFind",Immediate
 2932      FFFFB8EC 
 2932      FFFF
 2933 15f8 FBF5FFFF 		literal 0x29		# <^A/)/>
 2933      29000000 
 2934 1600 9D020000 		offset WORD
 2935 1604 3FFEFFFF 		offset SemiS
 2936              	
 2937              	 #	: lfa			( pfa -- lfa )
 2938              	 #	  8 -
 2939              	 #	;
 2940              	 # 
 2941              	 #	This word takes the mythical "parameter field address" and 
 2942              	 #	returns the link field address. The parameter field address is
 2943              	 #	the area after the first word of code; variables and constants
 2944              	 #	etc. store data after a code word that does the work expected
 2945              	 #	of a variable (fetching the address of the variable) or
 2946              	 #	constant (fetching the value of the constant).
 2947              	
 2948 1608 A34C4641 		colon "LFA","LFA","Comment"
 2948      E2FFFFFF 
 2948      9CECFFFF 
 2949 1614 DFF5FFFF 		literal 8
 2949      08000000 
 2950 161c 45EFFFFF 		offset Subtract
 2951 1620 23FEFFFF 		offset SemiS
 2952              	
 2953              	 #	: cfa			( pfa -- cfa )
 2954              	 #	  4 -
 2955              	 #	;
 2956              	 #
 2957              	 #	This word takes the mythical "parameter field address" and
 2958              	 #	returns the address of the code field, the start of code for
 2959              	 #	the word.
 2960              	
 2961 1624 A3434641 		colon "CFA","CFA","LFA"
 2961      E0FFFFFF 
 2961      80ECFFFF 
 2962 1630 C3F5FFFF 		literal 4
 2962      04000000 
 2963 1638 29EFFFFF 		offset Subtract
 2964 163c 07FEFFFF 		offset SemiS
 2965              	
 2966              	 #	: nfa			( pfa -- nfa )
 2967              	 #	  lfa
 2968              	 #	label nfa1
 2969              	 #	  1- dup c@ lit 0x80 and 0branch nfa1
GAS LISTING circforth.s 			page 60


 2970              	 #	;
 2971              	 #
 2972              	 #	This word takes the mythical "parameter field address" and
 2973              	 #	returns the address of the name field; this is the first byte
 2974              	 #	of the word and contains the name length, smudge, and immediate
 2975              	 #	flags.
 2976              	 #
 2977              	 #	This word works by first backing up to the LFA (which immediately
 2978              	 #	follows the name field) and then searching backwards for a byte
 2979              	 #	with bit 7 set. This should be the length byte.
 2980              	
 2981 1640 A34E4641 		colon "NFA","NFA","CFA"
 2981      E0FFFFFF 
 2981      64ECFFFF 
 2982 164c C4FFFFFF 		offset LFA		# Take us to the link field address
 2983 1650 E6F0FFFF 	NFA1:	offset OneMinus		# Let's look at the previous byte
 2984 1654 66EEFFFF 		offset DUP		# (don't want to lose it when we fetch)
 2985 1658 2CF4FFFF 		offset CFetch
 2986 165c 97F5FFFF 		literal 0x80		# Is bit 7 set?
 2986      80000000 
 2987 1664 2DEFFFFF 		offset AND
 2988 1668 95ECFFFF 		offset ZBranch		# If not, keep looking
 2989 166c E4FFFFFF 		offset NFA1
 2990 1670 D3FDFFFF 		offset SemiS		# If so, we're done
 2991              	
 2992              	 #	: pfa		( nfa -- pfa )
 2993              	 #	  dup @
 2994              	 #	  lit 0x1f and +  ( take us to the lfa )
 2995              	 #	  lit 9 +	  ( skip lfa, cfa, and length byte )
 2996              	 #	;
 2997              	 #
 2998              	 #	This procedure finds the mythical "parameter field address" given
 2999              	 #	the name field address. It uses the length byte attached to the
 3000              	 #	name to skip the name and then bumps past the lfa and cfa.
 3001              	
 3002 1674 A3504641 		colon "PFA","PFA","NFA"
 3002      C8FFFFFF 
 3002      30ECFFFF 
 3003 1680 3AEEFFFF 		offset DUP		# don't want to lose nfa when we fetch
 3004 1684 EFF3FFFF 		offset Fetch		# get the name length
 3005 1688 6BF5FFFF 		literal 0x1f		# strip off smudge, immediate, and findme
 3005      1F000000 
 3006 1690 01EFFFFF 		offset AND
 3007 1694 37F0FFFF 		offset Plus		# add it to the nfa
 3008 1698 5BF5FFFF 		literal 9
 3008      09000000 
 3009 16a0 2BF0FFFF 		offset Plus		# skip the lfa, cfa, and length byte
 3010 16a4 9FFDFFFF 		offset SemiS
 3011              	
 3012              	 #	: SMUDGE		( TOGGLE COMPLETION BIT OF LATEST WORD )
 3013              	 #	  LATEST		( WHEN THIS BIT=1, WORD CAN'T BE FOUND )
 3014              	 #	  LIT 0x20 TOGGLE
 3015              	 #	;
 3016              	 #
 3017              	 #	This word toggles the "smudge" bit of the last word that was
 3018              	 #	compiled. Until smudge is cleared, the word can't be found.
 3019              	 #
GAS LISTING circforth.s 			page 61


 3020              	 #	Not that this is a useful feature; we don't always begin searching
 3021              	 #	with the latest word compiled and we always smudge a word when we're
 3022              	 #	done compiling it.
 3023              	
 3024 16a8 A6534D55 		colon "SMUDGE","SMUDGE","PFA"
 3024      444745C5 
 3024      FFFFFFF9 
 3024      EBFFFF
 3025 16b7 1F000000 		offset LATEST
 3026 16bb 38F5FFFF 		literal 0x20
 3026      20000000 
 3027 16c3 3BEFFFFF 		offset TOGGLE
 3028 16c7 7CFDFFFF 		offset SemiS
 3029              	
 3030              	 #	: LATEST		( NFA OF LAST WORD DEFINED )
 3031              	 #	  CURRENT @ ;
 3032              	 #
 3033              	 #	This fetches the address of the current word being worked on.
 3034              	 #	Originally, it was some sort of "user" variable, so a double
 3035              	 #	fetch was needed. I've made it a normal variable, so we only
 3036              	 #	need a single fetch.
 3037              	
 3038 16cb A64C4154 		colon "LATEST","LATEST","SMUDGE"
 3038      455354D6 
 3038      FFFFFFD6 
 3038      EBFFFF
 3039 16da D1060000 		offset CURRENT
 3040 16de 95F3FFFF 		offset Fetch
 3041 16e2 61FDFFFF 		offset SemiS
 3042              	
 3043              	 #	: create		( -- pfa )
 3044              	 #	  bl word		( tack word on end of dictionary )
 3045              	 #	  here dup 		( here will change after allot )
 3046              	 #	  c@ 1+ allot		( allocate space for word & length )
 3047              	 #	  dup			( still need old here to update current )
 3048              	 #	  lit 0xa0 toggle	( set top bit in first char & smudge )
 3049              	 #	  latest o,		( store address of previous word )
 3050              	 #	  current !		( update current word pointer )
 3051              	 #	  (;code) dovar		( originally, word will look like variable )
 3052              	 #	  4 allot		( allocate space taken by CFA )
 3053              	 #	;
 3054              	 #
 3055              	 #	This word builds a header for a word. It points the CFA at the
 3056              	 #	code that knows how to execute a variable; this means that,
 3057              	 #	unless the CFA is adjusted, the word will act like a variable. A
 3058              	 #	compiling word should fill in the CFA of the word with the
 3059              	 #	address of a machine-code routine that knows how to enter
 3060              	 #	the word.
 3061              	 #
 3062              	 #	Oh yeah; although the word behaves like a variable, no space is
 3063              	 #	allocated for the PFA.
 3064              	
 3065 16e6 A6435245 		colon "CREATE","CREATE","LATEST"
 3065      415445DE 
 3065      FFFFFFBB 
 3065      EBFFFF
 3066 16f5 2A070000 		offset BL
GAS LISTING circforth.s 			page 62


 3067 16f9 A4010000 		offset WORD
 3068 16fd 98F5FFFF 		offset HERE
 3069 1701 B9EDFFFF 		offset DUP		# here here
 3070 1705 7FF3FFFF 		offset CFetch		# here length (smudge not set yet)
 3071 1709 FFEFFFFF 		offset OnePlus		# here length+1 (account for length byte)
 3072 170d A2F5FFFF 		offset ALLOT		# here (note, real here has changed; old
 3073              					#       here is still on stack)
 3074 1711 A9EDFFFF 		offset DUP		# here here 
 3075 1715 DEF4FFFF 		literal 0xa0		# here here 0xa0
 3075      A0000000 
 3076 171d E1EEFFFF 		offset TOGGLE		# here (smudge now set)
 3077 1721 B5FFFFFF 		offset LATEST		# here latest
 3078 1725 09F6FFFF 		offset OComma		# here
 3079 1729 82060000 		offset CURRENT		# here current
 3080 172d 81F3FFFF 		offset Store		#
 3081 1731 4BFEFFFF 		offset PSemiCode
 3082 1735 89EBFFFF 		offset DoVar
 3083 1739 BAF4FFFF 		literal 4
 3083      04000000 
 3084 1741 6EF5FFFF 		offset ALLOT
 3085 1745 FEFCFFFF 		offset SemiS
 3086              	
 3087              	 #	: compile	( fetch the word following and compile it onto the
 3088              	 #			  end of the dictionary )
 3089              	 #	  R 		( Address of offset )
 3090              	 #	  dup @ + 	( Fetch it and form absolute address )
 3091              	 #	  o,
 3092              	 #	  r> 4 + >r	( skip the offset )
 3093              	 #	;
 3094              	 #
 3095              	 #	This word takes the offset immediately following a reference to it
 3096              	 #	and compiles a reference to that word at the end of the
 3097              	 #	dictionary. The reference is (of course) a word offset, so it has
 3098              	 #	to be first un-PICced to get the address being referenced and then
 3099              	 #	rePICced when it's compiled into the new word.
 3100              	
 3101 1749 A7434F4D 		colon "COMPILE","COMPILE","CREATE"
 3101      50494C45 
 3101      95FFFFFF 
 3101      57EBFFFF 
 3102 1759 D0ECFFFF 		offset R
 3103 175d 5DEDFFFF 		offset DUP
 3104 1761 12F3FFFF 		offset Fetch
 3105 1765 66EFFFFF 		offset Plus
 3106 1769 C5F5FFFF 		offset OComma
 3107 176d AAECFFFF 		offset FromR
 3108 1771 82F4FFFF 		literal 4
 3108      04000000 
 3109 1779 52EFFFFF 		offset Plus
 3110 177d 87ECFFFF 		offset ToR
 3111 1781 C2FCFFFF 		offset SemiS
 3112              	
 3113              	 #	: [COMPILE]	( COMPILE THE NEXT WORD, EVEN IF IT'S IMMEDIATE )
 3114              	 #	  -FIND 0= 0 ?ERROR DROP CFA o,
 3115              	 #	;*
 3116              	 #
 3117              	 #	This word locates a word in the dictionary and compiles a reference
GAS LISTING circforth.s 			page 63


 3118              	 #	to the word into the word being built, conveniently ignoring the
 3119              	 #	IMMEDIATE bit; if you want to make a word that does something similar
 3120              	 #	to :, you can [COMPILE] : to make a reference to : inside your word.
 3121              	
 3122 1785 A95B434F 		colon "BracketsCOMPILE","[COMPILE]","COMPILE"
 3122      4D50494C 
 3122      455DBAFF 
 3122      FFFF19EB 
 3122      FFFF
 3123 1797 3BFEFFFF 		offset MinusFind
 3124 179b 7DEEFFFF 		offset ZEq
 3125 179f 9E060000 		offset Zero
 3126 17a3 3C020000 		offset QError
 3127 17a7 2BEDFFFF 		offset DROP
 3128 17ab 81FEFFFF 		offset CFA
 3129 17af 7FF5FFFF 		offset OComma
 3130 17b3 90FCFFFF 		offset SemiS
 3131              	
 3132              	 #	: IMMEDIATE	( MAKE MOST-RECENT WORD IMMEDIATE )
 3133              	 #	  LATEST LIT 0x40 TOGGLE
 3134              	 #	;
 3135              	 #
 3136              	 #	This word toggles the IMMEDIATE bit of the last word that was
 3137              	 #	compiled. If the IMMEDIATE bit is set, the word is executed during
 3138              	 #	compile mode instead of a reference to the word being compiled into
 3139              	 #	the word being built.
 3140              	
 3141 17b7 A9494D4D 		colon "IMMEDIATE","IMMEDIATE","BracketsCOMPILE"
 3141      45444941 
 3141      5445C4FF 
 3141      FFFFE7EA 
 3141      FFFF
 3142 17c9 0DFFFFFF 		offset LATEST
 3143 17cd 26F4FFFF 		literal 0x40
 3143      40000000 
 3144 17d5 29EEFFFF 		offset TOGGLE
 3145 17d9 6AFCFFFF 		offset SemiS
 3146              	
 3147              	 #	: forget
 3148              	 #	  ' 		( find the word to forget: -- pfa )
 3149              	 #	  dup 		( pfa pfa )
 3150              	 #	  nfa 		( pfa nfa )
 3151              	 #	  dp !		( pfa )
 3152              	 #	  lfa 		( lfa )
 3153              	 #	  dup		( lfa lfa )
 3154              	 #	  @ +		( nfa of previous word )
 3155              	 #	  dup		( pfa nfa nfa )
 3156              	 #	  current !	( pfa nfa )
 3157              	 #	;
 3158              	 #
 3159              	 #	This word locates the named word in the dictionary and updates the
 3160              	 #	dictionary pointer and various other variables to believe that word
 3161              	 #	is the last word that was defined.
 3162              	 #
 3163              	 #	Please don't FORGET built-in words...
 3164              	
 3165 17dd A6464F52 		colon "FORGET","FORGET","IMMEDIATE"
GAS LISTING circforth.s 			page 64


 3165      474554D3 
 3165      FFFFFFC4 
 3165      EAFFFF
 3166 17ec 88000000 		offset Tick
 3167 17f0 CAECFFFF 		offset DUP
 3168 17f4 54FEFFFF 		offset NFA
 3169 17f8 90050000 		offset DP
 3170 17fc B2F2FFFF 		offset Store
 3171 1800 10FEFFFF 		offset LFA
 3172 1804 B6ECFFFF 		offset DUP
 3173 1808 6BF2FFFF 		offset Fetch
 3174 180c BFEEFFFF 		offset Plus
 3175 1810 AAECFFFF 		offset DUP
 3176 1814 97050000 		offset CURRENT
 3177 1818 96F2FFFF 		offset Store
 3178 181c 27FCFFFF 		offset SemiS
 3179              	
 3180              	 #	: vlist		( display the dictionary )
 3181              	 #	  latest	( nfa of last word in dictionary )
 3182              	 #	label vlist1
 3183              	 #	  dup id.	( display the name of this word )
 3184              	 #	  pfa lfa	( lfa )
 3185              	 #	  dup @		( lfa OffsetToPreviousWord )
 3186              	 #	  dup		( lfa offset offset )
 3187              	 #	  0branch vlist2 ( if offset is zero, we're done )
 3188              	 #	  +		( make offset to previous nfa )
 3189              	 #	  branch vlist1
 3190              	 #	label vlist2
 3191              	 #	  drop drop	( lost lfa and link of last word )
 3192              	 #	;
 3193              	 #
 3194              	 #	This word lists the contents of the dictionary in order from the
 3195              	 #	last word to the first word.
 3196              	
 3197 1820 A5564C49 		colon "VLIST","VLIST","FORGET"
 3197      5354B7FF 
 3197      FFFF82EA 
 3197      FFFF
 3198 182e A8FEFFFF 		offset LATEST	# ( nfa )		Start at the last word
 3199 1832 88ECFFFF 	vlist1: offset DUP	# ( nfa nfa )
 3200 1836 D6FBFFFF 		offset IDDot	# ( nfa )		Display its name
 3201 183a 42FEFFFF 		offset PFA	# ( pfa )
 3202 183e D2FDFFFF 		offset LFA	# ( lfa )
 3203 1842 78ECFFFF 		offset DUP	# ( lfa lfa )
 3204 1846 2DF2FFFF 		offset Fetch	# ( lfa link )		Get link to previous word
 3205 184a 70ECFFFF 		offset DUP	# ( lfa link link )
 3206 184e AFEAFFFF 		offset ZBranch	# ( lfa link )		If it's zero, we're done
 3207 1852 10000000 		offset vlist2
 3208 1856 75EEFFFF 		offset Plus	# ( lfa+link = nfa of previous word )
 3209 185a 8EEAFFFF 		offset BRANCH	#			Advance to next word
 3210 185e D4FFFFFF 		offset vlist1
 3211 1862 70ECFFFF 	vlist2:	offset DROP
 3212 1866 6CECFFFF 		offset DROP
 3213 186a D9FBFFFF 		offset SemiS
 3214              	
 3215              	 #	: '		( -- pfa <if interpreting> )
 3216              	 #	  -FIND 0= 0 ?ERROR DROP LITERAL
GAS LISTING circforth.s 			page 65


 3217              	 #	;*
 3218              	 #
 3219              	 #	This word searches the dictionary for a word and returns the address
 3220              	 #	of its parameter field.
 3221              	 #
 3222              	 #	It's essentially a more user-friendly front-end to -FIND.
 3223              	
 3224 186e A127B0FF 		colon "Tick","'","VLIST"
 3224      FFFF38EA 
 3224      FFFF
 3225 1878 5AFDFFFF 		offset MinusFind
 3226 187c 9CEDFFFF 		offset ZEq
 3227 1880 BD050000 		offset Zero
 3228 1884 5B010000 		offset QError
 3229 1888 4AECFFFF 		offset DROP
 3230 188c ABF3FFFF 		offset LITERAL
 3231 1890 B3FBFFFF 		offset SemiS
 3232              	
 3233              	 #	: word		( c -- <get next word to end of dictionary,
 3234              	 #			  delimited with c or null > )
 3235              	 #	  tib @
 3236              	 #	  in @ + swap enclose	( get the word )
 3237              	 #	  here lit 0x22 blanks  ( blank space after the word )
 3238              	 #	  in +! over - >r r here c! + here 1+ r> cmove
 3239              	 #
 3240              	 #	This routine looks at the current data in the terminal input buffer
 3241              	 #	(tib) for a word delimited by the specified character. The string
 3242              	 #	containing that word is appended to the dictionary (starting at
 3243              	 #	here) after a byte giving the length of the word.
 3244              	 #
 3245              	 #	Note that word is sort of trusting in that it expects you to not
 3246              	 #	type a word in longer than 32 characters. The original code also
 3247              	 #	has this problem. Maybe I should fix this... *** note ***
 3248              	 #
 3249              	 #	The main reason for the blanks bit seems to be to guarantee that
 3250              	 #	NUMBER will find a blank when it finishes fiddling with the word.
 3251              	
 3252 1894 A4574F52 		colon "WORD","WORD","Tick"	# c
 3252      44D5FFFF 
 3252      FF0FEAFF 
 3252      FF
 3253 18a1 D8040000 		offset TIB		# Where to look for the word
 3254 18a5 CEF1FFFF 		offset Fetch		# c tib
 3255 18a9 EE040000 		offset IN		# Current offset in tib
 3256 18ad C6F1FFFF 		offset Fetch		# c tib in
 3257 18b1 1AEEFFFF 		offset Plus		# c tib+in
 3258 18b5 AAEBFFFF 		offset SWAP		# tib+in c
 3259 18b9 2DF7FFFF 		offset ENCLOSE		# tib+in first last next
 3260 18bd D8F3FFFF 		offset HERE 
 3261 18c1 32F3FFFF 		literal 0x22		# tib+in first last next here 0x22
 3261      22000000 
 3262 18c9 12F3FFFF 		offset BLANKS		# tib+in first last next
 3263 18cd CA040000 		offset IN		# Bump IN past the word
 3264 18d1 0FEDFFFF 		offset PlusStore	# tib+in first last
 3265 18d5 CBEBFFFF 		offset OVER		# tib+in first last first
 3266 18d9 88ECFFFF 		offset Subtract		# tib+in first wordlength
 3267 18dd 27EBFFFF 		offset ToR
GAS LISTING circforth.s 			page 66


 3268 18e1 48EBFFFF 		offset R		# tib+in first wordlength
 3269 18e5 B0F3FFFF 		offset HERE		# tib+in first wordlength here
 3270 18e9 DFF1FFFF 		offset CStore		# Store the length of the word
 3271              					# tib+in first
 3272 18ed DEEDFFFF 		offset Plus		# tib+bin+first
 3273 18f1 A4F3FFFF 		offset HERE		# tib+in+first here
 3274 18f5 13EEFFFF 		offset OnePlus		# tib+in+first here+1
 3275 18f9 1EEBFFFF 		offset FromR		# tib+in+first here+1 wordlength
 3276 18fd 70F2FFFF 		offset CMOVE		# shazam!
 3277 1901 42FBFFFF 		offset SemiS
 3278              	
 3279              	 #	: execute		( cfa -- )
 3280              	 #
 3281              	 #	Given the address of a FORTH word, the word is executed. INTERPRET
 3282              	 #	uses this to execute words you type at the console.
 3283              	
 3284 1905 A7455845 		code "EXECUTE","EXECUTE","WORD"
 3284      43555445 
 3284      87FFFFFF 
 3284      04000000 
 3285 1915 D06759   		movl (r7),r9		# Get address of routine to execute
 3286 1918 800457   		addb2 $4,r7		# discard cfa
 3287 191b C1695958 		addl3 (r9),r9,r8	# Fetch the offset AND convert to an address
 3288 191f 1768     		jmp (r8)		# Execute the word.
 3289              	
 3290              	 #	: (find)		( target start -- 0 <if not found>
 3291              	 #					       -- pfa lengthbyte  1 <if found> )
 3292              	 #
 3293              	 #	Search the directory for the specified word
 3294              	
 3295 1921 A6284649 		code "PFind","(FIND)","EXECUTE"
 3295      4E4429DD 
 3295      FFFFFF04 
 3295      000000
 3296              	
 3297 1930 D05752   		movl r7,r2		# r2 <- address of start
 3298 1933 D05753   		movl r7,r3		# r3 <- address of target
 3299 1936 800453   		addb2 $4,r3
 3300              	
 3301              	PFind1:
 3302              	
 3303              	 #	First we have to compare the length bytes. We need to strip flag
 3304              	 #	bits off the length byte at Start except for the smudge bit.
 3305              	
 3306 1939 8B8FE0B2 		bicb3 $0xe0,*(r2),r0	# Strip the bits
 3306      0050
 3307 193f 9150B300 		cmpb r0,*(r3)		# Do the length bytes match?
 3308 1943 1236     		bneq PFind2		# If not, it can't be a match
 3309              	
 3310              	 #	We have strings of the same length. Now compare the strings
 3311              	
 3312 1945 D06254   		movl (r2),r4		# Get addresses
 3313 1948 D06355   		movl (r3),r5
 3314 194b D654     		incl r4			# Bump past length byte
 3315 194d D655     		incl r5
 3316 194f 9AB30059 		movzbl *(r3),r9		# Need a word string length
 3317              	
GAS LISTING circforth.s 			page 67


 3318              	#	cmpc3 r9,(r4),(r5)	# Compare them
 3319 1953 918485   	0:	cmpb (r4)+,(r5)+	# MicroVAX II doesn't do CMPC3
 3320 1956 1223     		bneq PFind2
 3321 1958 F559F8   		sobgtr r9,0b
 3322              	
 3323              	 #	The strings matched. Diddle the stack.
 3324              	
 3325 195b 8B8FE0B2 		bicb3 $0xe0,*(r2),r1	# Figure out where the PFA is
 3325      0051
 3326 1961 9A5151   		movzbl r1,r1
 3327 1964 C1516250 		addl3 r1,(r2),r0	# Here's the LFA
 3328 1968 9AB20051 		movzbl *(r2),r1		# Get raw length byte again
 3329 196c C1095063 		addl3 $9,r0,(r3)	# There's the PFA, and don't forget the
 3330              					# length byte...
 3331 1970 9A5162   		movzbl r1,(r2)		# And the length
 3332 1973 820457   		subb2 $4,r7		# make space for the flag
 3333 1976 9A0167   		movzbl $1,(r7)		# And success
 3334 1979 176B     		jmp (r11)
 3335              	
 3336              	 #	The strings didn't match. Look at the next one.
 3337              	
 3338              	PFind2:
 3339              	
 3340 197b 8B8FE0B2 		bicb3 $0xe0,*(r2),r0	# Get length of string
 3340      0050
 3341 1981 9A5050   		movzbl r0,r0
 3342 1984 C05062   		addl2 r0,(r2)		# Make address of LFA
 3343 1987 D662     		incl (r2)		# (account for the length byte)
 3344 1989 D0B20050 		movl *(r2),r0		# Get link field value
 3345 198d D550     		tstl r0			# Is it the end flag?
 3346 198f 1305     		beql PFind3
 3347 1991 C05062   		addl2 r0,(r2)		# Update the start address
 3348 1994 11A3     		brb PFind1		# Keep going
 3349              	
 3350              	 #	Went to the end of the dictionary
 3351              	
 3352              	PFind3:
 3353              	
 3354 1996 800457   		addb2 $4,r7		# discard starting address
 3355 1999 D467     		clrl (r7)		# replace target address with failure.
 3356 199b 176B     		jmp (r11)
 3357              	
 3358              	 #	: ERROR		( N -- <ISSUE ERROR #N> )
 3359              	 #	  HERE COUNT TYPE (.") "? ERR # " ( THEN )
 3360              	 #	  .
 3361              	 #	  SP!		( EMPTY THE STACK )
 3362              	 #	  QUIT		( THEN )
 3363              	 #	;
 3364              	 #
 3365              	 #	This word is invoked if there's some sort of error. It displays the
 3366              	 #	string at the end of the dictionary to hopefully give some context
 3367              	 #	for the error; INTERPRET works by building words at the end of the
 3368              	 #	dictionary and then searching for them. This should be the name of
 3369              	 #	the last word INTERPRET searched for.
 3370              	 #
 3371              	 #	$$$
 3372              	
GAS LISTING circforth.s 			page 68


 3373 199d A5455252 		colon "ERROR","ERROR","PFind"
 3373      4F527EFF 
 3373      FFFF05E9 
 3373      FFFF
 3374 19ab EAF2FFFF 		offset HERE		# Display name of last word searched for.
 3375 19af 2FF5FFFF 		offset COUNT
 3376 19b3 06F5FFFF 		offset TYPE
 3377 19b7 42F5FFFF 		offset PDotQuote	# And Huh?
 3378 19bb 083F204D 		string "? MSG # "
 3378      53472023 
 3378      20
 3379 19c4 89F9FFFF 		offset Dot
 3380 19c8 4AEBFFFF 		offset SPStore		# Initialize math stack
 3381 19cc 4F020000 		offset QUIT		# Initialize the rest of the system
 3382 19d0 73FAFFFF 		offset SemiS
 3383              	
 3384              	 #	: ?ERROR	( F N -- <IF F, DO ERROR #N> )
 3385              	 #	  SWAP
 3386              	 #	  0BRANCH QERR1
 3387              	 #	  ERROR		( IF <YOU CAN'T RETURN FROM ERROR> )
 3388              	 #	LABEL QERR1
 3389              	 #	  DROP		( THEN )
 3390              	 #	;
 3391              	 #
 3392              	 #	If F is non-zero, error message #N is displayed.
 3393              	
 3394 19d4 A63F4552 		colon "QError","?ERROR","ERROR"
 3394      524F52C2 
 3394      FFFFFFCD 
 3394      E8FFFF
 3395 19e3 7CEAFFFF 		offset SWAP	# ( F N -- N F )
 3396 19e7 16E9FFFF 		offset ZBranch	# If F is zero, go. ( N F -- N )
 3397 19eb 08000000 		offset QErr1
 3398 19ef B8FFFFFF 		offset ERROR	# Argh! Complain.
 3399 19f3 DFEAFFFF 	QErr1:	offset DROP	# ( N -- )
 3400 19f7 4CFAFFFF 		offset SemiS
 3401              	
 3402              	 #	: ?COMP		( GIVE ERR#17 IF NOT COMPILING )
 3403              	 #	  STATE @ 0= LIT 17 ?ERROR
 3404              	 #	;
 3405              	 #
 3406              	 #	This word is used by various compiling words to verify that the
 3407              	 #	FORTH system is compiling. If not, it will abort and give error
 3408              	 #	# 17.
 3409              	 #
 3410              	 #	The variable STATE is checked to see if we're compiling. STATE is
 3411              	 #	0 while interpreting and non-0 while compiling.
 3412              	
 3413 19fb A53F434F 		colon "QComp","?COMP","QError"
 3413      4D50D3FF 
 3413      FFFFA7E8 
 3413      FFFF
 3414 1a09 B4030000 		offset STATE
 3415 1a0d 66F0FFFF 		offset Fetch
 3416 1a11 07ECFFFF 		offset ZEq		# Complement STATE; return 1 if 0 & vice-versa
 3417 1a15 DEF1FFFF 		literal 17
 3417      11000000 
GAS LISTING circforth.s 			page 69


 3418 1a1d C2FFFFFF 		offset QError
 3419 1a21 22FAFFFF 		offset SemiS
 3420              	
 3421              	 #	: ?EXEC		( GIVE ERR #18 IF NOT EXECUTING )
 3422              	 #	  STATE @ LIT 18 ?ERROR
 3423              	 #	;
 3424              	 #
 3425              	 #	If we're not compiling, we must be "executing". I don't know why
 3426              	 #	this isn't ?INTERP, but I'm not complaining.
 3427              	
 3428 1a25 A53F4558 		colon "QExec","?EXEC","QComp"
 3428      4543D0FF 
 3428      FFFF7DE8 
 3428      FFFF
 3429 1a33 8A030000 		offset STATE
 3430 1a37 3CF0FFFF 		offset Fetch
 3431 1a3b B8F1FFFF 		literal 18
 3431      12000000 
 3432 1a43 9CFFFFFF 		offset QError
 3433 1a47 FCF9FFFF 		offset SemiS
 3434              	
 3435              	 #	: ?PAIRS	( GIVE ERR #19 IF PAIRS DON'T MATCH )
 3436              	 #	  - LIT 19 ?ERROR
 3437              	 #	;
 3438              	 #
 3439              	 #	This word is used by compiling words like THEN, LOOP, etc. to make
 3440              	 #	sure we're ending the correct type of structure.
 3441              	 #
 3442              	 #	While compiling a structure, one of these words will push their
 3443              	 #	information and a code for the type of structure on the stack.
 3444              	 #	This word just makes certain the top two words of the stack are
 3445              	 #	the same.
 3446              	
 3447 1a4b A63F5041 		colon "QPairs","?PAIRS","QExec"
 3447      495253D3 
 3447      FFFFFF56 
 3447      E8FFFF
 3448 1a5a 07EBFFFF 		offset Subtract
 3449 1a5e 95F1FFFF 		literal 19
 3449      13000000 
 3450 1a66 79FFFFFF 		offset QError
 3451 1a6a D9F9FFFF 		offset SemiS
 3452              	
 3453              	 #	: ?CSP		( GIVE ERR#20 IF CSP & SP DON'T MATCH )
 3454              	 #	  SP@ CSP @ - LIT 20 ?ERROR
 3455              	 #	;
 3456              	 #
 3457              	 #	I'm not sure I know what this is about; I think it's used occasionally
 3458              	 #	to verify all of the information put on the stack while compiling has
 3459              	 #	come back off.
 3460              	
 3461 1a6e A43F4353 		colon "QCSP","?CSP","QPairs"
 3461      50D8FFFF 
 3461      FF35E8FF 
 3461      FF
 3462 1a7b 80EAFFFF 		offset SPFetch
 3463 1a7f 6F030000 		offset CSP
GAS LISTING circforth.s 			page 70


 3464 1a83 F0EFFFFF 		offset Fetch
 3465 1a87 DAEAFFFF 		offset Subtract
 3466 1a8b 68F1FFFF 		literal 20
 3466      14000000 
 3467 1a93 4CFFFFFF 		offset QError
 3468 1a97 ACF9FFFF 		offset SemiS
 3469              	
 3470              	 #	: ?stack		( error if math stack overflow or underflow )
 3471              	 #
 3472              	 #	I've stubbed this out because if there's a math stack overflow my
 3473              	 #	return stack is gonna be hosed anyway.
 3474              	
 3475 1a9b A63F5354 		colon "QStack","?STACK","QCSP"
 3475      41434BCC 
 3475      FFFFFF06 
 3475      E8FFFF
 3476 1aaa 99F9FFFF 		offset SemiS
 3477              	
 3478              	 #	: IF
 3479              	 #	  COMPILE 0BRANCH HERE 0 , 2
 3480              	 #	;*
 3481              	 #
 3482              	 #	This word compiles an IF into the code. If drops a conditional
 3483              	 #	branch followed by space for the offset. The location of the
 3484              	 #	offset is remembered for future use by ELSE and THEN.
 3485              	
 3486 1aae E24946EA 		colon "IF","IF","QStack",Immediate
 3486      FFFFFFF7 
 3486      E7FFFF
 3487 1ab9 9CFCFFFF 		offset COMPILE
 3488 1abd 40E8FFFF 		offset ZBranch
 3489 1ac1 D4F1FFFF 		offset HERE
 3490 1ac5 78030000 		offset Zero
 3491 1ac9 04F2FFFF 		offset Comma
 3492 1acd 8C030000 		offset Two
 3493 1ad1 72F9FFFF 		offset SemiS
 3494              	
 3495              	 #	: ELSE
 3496              	 #	  2 ?PAIRS COMPILE BRANCH HERE 0 , SWAP 2 ENDIF 2
 3497              	 #	;*
 3498              	 #
 3499              	 #	This word tosses in the false part of a conditional. It does two
 3500              	 #	things:
 3501              	 #
 3502              	 #	1)	it compiles a branch at the end of the true part of the
 3503              	 #		conditional to point at the end of the whole thing.
 3504              	 #
 3505              	 #	2)	it resolves the branch left open by IF to point to the
 3506              	 #		starting of the false code.
 3507              	
 3508 1ad5 E4454C53 		colon "ELSE","ELSE","IF",Immediate
 3508      45D4FFFF 
 3508      FFCEE7FF 
 3508      FF
 3509 1ae2 77030000 		offset Two
 3510 1ae6 70FFFFFF 		offset QPairs
 3511 1aea 6BFCFFFF 		offset COMPILE
GAS LISTING circforth.s 			page 71


 3512 1aee FAE7FFFF 		offset BRANCH
 3513 1af2 A3F1FFFF 		offset HERE
 3514 1af6 47030000 		offset Zero
 3515 1afa D3F1FFFF 		offset Comma
 3516 1afe 61E9FFFF 		offset SWAP
 3517 1b02 57030000 		offset Two
 3518 1b06 15000000 		offset THEN
 3519 1b0a 4F030000 		offset Two
 3520 1b0e 35F9FFFF 		offset SemiS
 3521              	
 3522              	 #	: THEN
 3523              	 #	  ?COMP 2 ?PAIRS HERE OVER - SWAP !
 3524              	 #	;*
 3525              	 #
 3526              	 #	This word ends a conditional. It resolves the branch left by either
 3527              	 #	IF or ELSE to point HERE.
 3528              	 #
 3529              	 #	$$$
 3530              	
 3531 1b12 E4544845 		colon "THEN","THEN","ELSE",Immediate
 3531      4EBEFFFF 
 3531      FF91E7FF 
 3531      FF
 3532 1b1f E6FEFFFF 		offset QComp
 3533 1b23 36030000 		offset Two
 3534 1b27 2FFFFFFF 		offset QPairs
 3535 1b2b 6AF1FFFF 		offset HERE
 3536 1b2f 71E9FFFF 		offset OVER
 3537 1b33 2EEAFFFF 		offset Subtract
 3538 1b37 28E9FFFF 		offset SWAP
 3539 1b3b 73EFFFFF 		offset Store
 3540 1b3f 04F9FFFF 		offset SemiS
 3541              	
 3542              	 #	: BEGIN
 3543              	 #	  ?COMP HERE 1
 3544              	 #	;*
 3545              	 #
 3546              	 #	This word starts a BEGIN loop. It remembers where the top of the
 3547              	 #	loop is for use by UNTIL, WHILE, REPEAT, and AGAIN.
 3548              	
 3549 1b43 E5424547 		colon "BEGIN","BEGIN","THEN",Immediate
 3549      494EC9FF 
 3549      FFFF5FE7 
 3549      FFFF
 3550 1b51 B4FEFFFF 		offset QComp
 3551 1b55 40F1FFFF 		offset HERE
 3552 1b59 F2020000 		offset One
 3553 1b5d E6F8FFFF 		offset SemiS
 3554              	
 3555              	 #	: UNTIL
 3556              	 #	  1 ?PAIRS COMPILE 0BRANCH O,
 3557              	 #	;*
 3558              	 #
 3559              	 #	Here's the end of a BEGIN...UNTIL thingie. It compiles a branch that
 3560              	 #	will go back to the top of the loop if the item on top of the math
 3561              	 #	stack is 0.
 3562              	 #
GAS LISTING circforth.s 			page 72


 3563              	 #	$$$
 3564              	
 3565 1b61 E5554E54 		colon "UNTIL","UNTIL","BEGIN",Immediate
 3565      494CDCFF 
 3565      FFFF41E7 
 3565      FFFF
 3566 1b6f DC020000 		offset One
 3567 1b73 E3FEFFFF 		offset QPairs
 3568 1b77 DEFBFFFF 		offset COMPILE
 3569 1b7b 82E7FFFF 		offset ZBranch
 3570 1b7f AFF1FFFF 		offset OComma
 3571 1b83 C0F8FFFF 		offset SemiS
 3572              	
 3573              	 #	: AGAIN
 3574              	 #	  ?COMP
 3575              	 #	  1 ?PAIRS COMPILE BRANCH O,
 3576              	 #	;*
 3577              	 #
 3578              	 #	COMPILEs an unconditional branch to the beginning of the loop.
 3579              	 #
 3580              	 #	$$$
 3581              	
 3582 1b87 E5414741 		colon "AGAIN","AGAIN","UNTIL",Immediate
 3582      494ED4FF 
 3582      FFFF1BE7 
 3582      FFFF
 3583 1b95 70FEFFFF 		offset QComp
 3584 1b99 B2020000 		offset One
 3585 1b9d B9FEFFFF 		offset QPairs
 3586 1ba1 B4FBFFFF 		offset COMPILE
 3587 1ba5 43E7FFFF 		offset BRANCH
 3588 1ba9 85F1FFFF 		offset OComma
 3589 1bad 96F8FFFF 		offset SemiS
 3590              	
 3591              	 #	: REPEAT
 3592              	 #	  ?COMP
 3593              	 #	  >R >R AGAIN R> R> 2 -
 3594              	 #	  ENDIF
 3595              	 #	;*
 3596              	 #
 3597              	 #	COMPILEs an unconditional branch back to the top of the loop and
 3598              	 #	then fills in the booger left behind by WHILE.
 3599              	
 3600 1bb1 E6524550 		colon "REPEAT","REPEAT","AGAIN",Immediate
 3600      454154CF 
 3600      FFFFFFF0 
 3600      E6FFFF
 3601 1bc0 45FEFFFF 		offset QComp
 3602 1bc4 40E8FFFF 		offset ToR
 3603 1bc8 3CE8FFFF 		offset ToR
 3604 1bcc C5FFFFFF 		offset AGAIN
 3605 1bd0 47E8FFFF 		offset FromR
 3606 1bd4 43E8FFFF 		offset FromR
 3607 1bd8 81020000 		offset Two
 3608 1bdc 85E9FFFF 		offset Subtract
 3609 1be0 3BFFFFFF 		offset THEN
 3610 1be4 5FF8FFFF 		offset SemiS
GAS LISTING circforth.s 			page 73


 3611              	
 3612              	 #	: WHILE
 3613              	 #	  IF 2+
 3614              	 #	;*
 3615              	 #
 3616              	 #	COMPILEs an exit to the loop if the top of stack is zero. REPEAT
 3617              	 #	fills in the booger left behind by IF.
 3618              	
 3619 1be8 E5574849 		colon "WHILE","WHILE","REPEAT",Immediate
 3619      4C45C3FF 
 3619      FFFFBAE6 
 3619      FFFF
 3620 1bf6 BFFEFFFF 		offset IF
 3621 1bfa 25EBFFFF 		offset TwoPlus
 3622 1bfe 45F8FFFF 		offset SemiS
 3623              	
 3624              	 #	: NOP ; ( DO-NOTHING )
 3625              	 #
 3626              	 #	A classic that should exist in any language...
 3627              	
 3628 1c02 A34E4F50 		colon "NOP","NOP","WHILE"
 3628      E2FFFFFF 
 3628      A2E6FFFF 
 3629 1c0e 35F8FFFF 		offset SemiS
 3630              	
 3631              	 #	: QUIT
 3632              	 #	  [
 3633              	 #	LABEL Q1
 3634              	 #	  RP! CR QUERY INTERPRET	( BEGIN )
 3635              	 #	  STATE @ 0=
 3636              	 #	  0BRANCH Q2
 3637              	 #	  (.") "OK"			( IF )
 3638              	 #	LABEL Q2
 3639              	 #	  BRANCH Q1			( ENDIF AGAIN )
 3640              	 #	;
 3641              	 #
 3642              	 #	This word is the main loop for the FORTH system. It initializes
 3643              	 #	the return stack, gets a command line, and interprets it. After
 3644              	 #	the command line is done, OK is printed if we're not compiling.
 3645              	
 3646 1c12 A4515549 		colon "QUIT","QUIT","NOP"
 3646      54EBFFFF 
 3646      FF91E6FF 
 3646      FF
 3647 1c1f 33F8FFFF 		offset LBracket
 3648 1c23 28E8FFFF 	Q1:	offset RPStore
 3649 1c27 B0F1FFFF 		offset CR
 3650 1c2b 5BF3FFFF 		offset QUERY
 3651 1c2f 8F000000 		offset INTERPRET
 3652 1c33 8A010000 		offset STATE
 3653 1c37 3CEEFFFF 		offset Fetch
 3654 1c3b DDE9FFFF 		offset ZEq
 3655 1c3f BEE6FFFF 		offset ZBranch
 3656 1c43 0B000000 		offset Q2
 3657 1c47 B2F2FFFF 		offset PDotQuote
 3658 1c4b 024F4B   		string "OK"
 3659 1c4e 9AE6FFFF 	Q2:	offset BRANCH
GAS LISTING circforth.s 			page 74


 3660 1c52 D1FFFFFF 		offset Q1
 3661 1c56 EDF7FFFF 		offset SemiS
 3662              	
 3663              	 #	: ABORT
 3664              	 #	  .on
 3665              	 #	  SP! DECIMAL ?STACK CR
 3666              	 #	  .CPU				( PRINT THE GREETING )
 3667              	 #	  ( FORTH )
 3668              	 #	  QUIT
 3669              	 #	;
 3670              	 #
 3671              	 #	This word starts the ball rolling; the low-level machine code causes
 3672              	 #	this word to be executed at startup. It initializes the math stack,
 3673              	 #	prints a banner, and does QUIT to get and execute a command line.
 3674              	 #
 3675              	 #	$$$
 3676              	
 3677 1c5a A541424F 		colon "ABORT","ABORT","QUIT"
 3677      5254B2FF 
 3677      FFFF48E6 
 3677      FFFF
 3678 1c68 45F1FFFF 		offset DotOn
 3679 1c6c A6E8FFFF 		offset SPStore
 3680 1c70 CDF1FFFF 		offset DECIMAL
 3681 1c74 32FEFFFF 		offset QStack
 3682 1c78 5FF1FFFF 		offset CR
 3683 1c7c 15000000 		offset DotCPU
 3684 1c80 9BFFFFFF 		offset QUIT
 3685 1c84 BFF7FFFF 		offset SemiS
 3686              	
 3687              	 #	: .CPU
 3688              	 #	  (.") "NV5 PCACHE FORTH"
 3689              	 #	;
 3690              	 #
 3691              	 #	This word displays a banner identifying the FORTH system.
 3692              	
 3693 1c88 A42E4350 		colon "DotCPU",".CPU","ABORT"
 3693      55CDFFFF 
 3693      FF1BE6FF 
 3693      FF
 3694 1c95 64F2FFFF 		offset PDotQuote
 3695 1c99 0E43502F 		string "CP/M-VAX FORTH"
 3695      4D2D5641 
 3695      5820464F 
 3695      525448
 3696 1ca8 2FF1FFFF 		offset CR
 3697 1cac 97F7FFFF 		offset SemiS
 3698              	
 3699              	 #	: INTERPRET
 3700              	 #	LABEL I1
 3701              	 #	  -FIND			( BEGIN )
 3702              	 #	  0BRANCH I2
 3703              	 #	  STATE @ <		( IF )
 3704              	 #	  OBRANCH I3
 3705              	 #	  CFA o,
 3706              	 #	  BRANCH I4
 3707              	 #	LABEL I3
GAS LISTING circforth.s 			page 75


 3708              	 #	  CFA EXECUTE		( ELSE )
 3709              	 #	LABEL I4
 3710              	 #	  ?STACK		( ENDIF )
 3711              	 #	  BRANCH I5
 3712              	 #	LABEL I2
 3713              	 #	  HERE NUMBER DPL @ 1+
 3714              	 #	  0BRANCH I6
 3715              	 #	  DLITERAL		( IF )
 3716              	 #	  BRANCH I7
 3717              	 #	LABEL I6
 3718              	 #	  DROP LITERAL		( ELSE )
 3719              	 #	LABEL I7
 3720              	 #	  ?STACK		( ENDIF ENDIF )
 3721              	 #	LABEL I5
 3722              	 #	  BRANCH I1		( AGAIN )
 3723              	 #	;
 3724              	 #
 3725              	 #	Here's the FORTH interpreter. Given a line in TIB, it whacks off
 3726              	 #	a word from the line and looks it up in the dictionary. If it
 3727              	 #	can't find the word, it assumes it's a number.
 3728              	 #
 3729              	 #	Having located a word, what it does with the word depends on the
 3730              	 #	state it's in:
 3731              	 #
 3732              	 #	- If interpreting, the word is executed.
 3733              	 #	- If compiling, the word is executed if it's an IMMEDIATE word.
 3734              	 #	- If compiling, a reference to the word is added to the end of the
 3735              	 #	  dictionary if it's not an IMMEDIATE word.
 3736              	 #
 3737              	 #	Having parsed a number, what it does with the number depends on the
 3738              	 #	state it's in:
 3739              	 #
 3740              	 #	- If interpreting, the number is pushed on the stack.
 3741              	 #	- If compiling, the number is added as a literal to the end of
 3742              	 #	  the dictionary.
 3743              	 #
 3744              	 #	(all this work is actually done by LITERAL or DLITERAL...)
 3745              	 #
 3746              	 #	Strangely enough, INTERPRET seems to believe a number is a double-
 3747              	 #	precision number if it contains a decimal point. I don't understand
 3748              	 #	_that_ one...
 3749              	 #
 3750              	 #	You have probably noticed that INTERPRET has no exit. What happens 
 3751              	 #	at the end of a line? Well, I'll tell you, but I'm not happy about
 3752              	 #	it; this is one of my biggest gripes about FORTH: the whole damn
 3753              	 #	system is held together by side-effects.
 3754              	 #
 3755              	 #	INTERPRET expects to be fed a line that was read in using EXPECT.
 3756              	 #	EXPECT tosses a null at the end of a line (assuming there's room for
 3757              	 #	it, of course). ENCLOSE knows that a null ends the line, so it won't
 3758              	 #	search past a null. WORD therefore sees a one-byte word at the end
 3759              	 #	of every line containing null. INTERPRET dutifully searches for the
 3760              	 #	null word. The null word is immediate, so it will be executed even
 3761              	 #	if we're compiling.
 3762              	 #
 3763              	 #	The null word DROPS AN ITEM FROM THE RETURN STACK and then returns.
 3764              	 #	So, when the null word returns, it doesn't return to INTERPRET. Oh,
GAS LISTING circforth.s 			page 76


 3765              	 #	no, that would be too good for null. It returns to the word that
 3766              	 #	called INTERPRET.
 3767              	 #
 3768              	 #	OK, suppose I type something that's not in the dictionary. What
 3769              	 #	happens? Well, NUMBER sees that (NUMBER) gave up on something that's
 3770              	 #	not a space or a decimal point, so it ERRORs out. ERROR calls QUIT,
 3771              	 #	which initializes the return stack and does a new QUERY/INTERPRET.
 3772              	 #	In short, INTERPRET gets aborted.
 3773              	 #
 3774              	 #	What a mess!!!
 3775              	
 3776 1cb0 A9494E54 		colon "INTERPRET","INTERPRET","DotCPU"
 3776      45525052 
 3776      4554CEFF 
 3776      FFFFEEE5 
 3776      FFFF
 3777 1cc2 10F9FFFF 	I1:	offset MinusFind	# ( pfa length 1 ) or ( 0 )
 3778 1cc6 37E6FFFF 		offset ZBranch		# If not found, go
 3779 1cca 3C000000 		offset I2
 3780 1cce EF000000 		offset STATE
 3781 1cd2 A1EDFFFF 		offset Fetch		# ( pfa state )
 3782 1cd6 A3E8FFFF 		offset Less
 3783 1cda 23E6FFFF 		offset ZBranch		# Go if not ( pfa )
 3784 1cde 14000000 		offset I3
 3785 1ce2 4AF9FFFF 		offset CFA		# ( cfa )
 3786 1ce6 48F0FFFF 		offset OComma		# COMPILE CFA into word
 3787 1cea FEE5FFFF 		offset BRANCH
 3788 1cee 0C000000 		offset I4
 3789 1cf2 3AF9FFFF 	I3:	offset CFA		# ( pfa -- cfa )
 3790 1cf6 1BFCFFFF 		offset EXECUTE		# do it
 3791 1cfa ACFDFFFF 	I4:	offset QStack		# Check for overflow
 3792 1cfe EAE5FFFF 		offset BRANCH
 3793 1d02 38000000 		offset I5
 3794 1d06 8FEFFFFF 	I2:	offset HERE		# Couldn't find the word; is it a number?
 3795 1d0a F8F3FFFF 		offset NUMBER		# ( low high )
 3796 1d0e D0000000 		offset DPL		# Is it double precision?
 3797 1d12 61EDFFFF 		offset Fetch		# ( low high dpl )
 3798 1d16 F2E9FFFF 		offset OnePlus
 3799 1d1a E3E5FFFF 		offset ZBranch		# Go if it's single precision
 3800 1d1e 10000000 		offset I6
 3801 1d22 46EFFFFF 		offset DLITERAL		# It's double precision
 3802 1d26 C2E5FFFF 		offset BRANCH
 3803 1d2a 0C000000 		offset I7
 3804 1d2e A4E7FFFF 	I6:	offset DROP		# ( low )
 3805 1d32 05EFFFFF 		offset LITERAL
 3806 1d36 70FDFFFF 	I7:	offset QStack
 3807 1d3a AEE5FFFF 	I5:	offset BRANCH
 3808 1d3e 84FFFFFF 		offset I1
 3809 1d42 01F7FFFF 		offset SemiS		# Like we'll ever get here...
 3810              	
 3811              	 #	: exit		( exits current word )
 3812              	 #	  R> DROP ;
 3813              	 #
 3814              	 #	This is an ACE word to exit the current word. It can't be used in
 3815              	 #	a DO loop, as it just drops its return address from the stack causing
 3816              	 #	a return to the caller's caller.
 3817              	
GAS LISTING circforth.s 			page 77


 3818 1d46 A4455849 		colon "EXIT","EXIT","INTERPRET"
 3818      5465FFFF 
 3818      FF5DE5FF 
 3818      FF
 3819 1d53 C4E6FFFF 		offset FromR
 3820 1d57 7BE7FFFF 		offset DROP
 3821 1d5b E8F6FFFF 		offset SemiS
 3822              	
 3823              	 #;	Breakpoint opportunity: a machine code word that gives
 3824              	 #;	VAX DEBUG have a symbol it can break at
 3825              	 #
 3826              	 #	Code BPT
 3827              	 #BreakHere::
 3828              	 #	JMP (R11)
 3829              	
 3830              	 #	User Variables. These are intended to be addressed by an offset
 3831              	 #	to the "user pointer" to facilitate multitasking. I'm just making
 3832              	 #	them normal variables.
 3833              	
 3834 1d5f A5285449 		variable "PTib","(TIB)","EXIT"
 3834      4229E1FF 
 3834      FFFF55E5 
 3834      FFFF0000 
 3834      0000
 3835 1d71 A3544942 		variable "TIB","TIB","PTib"	# Terminal input goes here
 3835      EAFFFFFF 
 3835      45E5FFFF 
 3835      00000000 
 3836 1d81 A24450ED 		variable "DP","DP","TIB"	# End of directory
 3836      FFFFFF36 
 3836      E5FFFF00 
 3836      000000
 3837 1d90 A2494EEE 		variable "IN","IN","DP"		# Current offset INto TIB
 3837      FFFFFF27 
 3837      E5FFFF00 
 3837      000000
 3838 1d9f A7435552 		variable "CURRENT","CURRENT","IN" # NFA of word we're workin' on
 3838      52454E54 
 3838      E9FFFFFF 
 3838      13E5FFFF 
 3838      00000000 
 3839 1db3 A5535441 		variable "STATE","STATE","CURRENT" # 0 = interpreting?
 3839      5445E6FF 
 3839      FFFF01E5 
 3839      FFFF0000 
 3839      0000
 3840 1dc5 A4424153 		variable "BASE","BASE","STATE"	# Current number base
 3840      45E9FFFF 
 3840      FFF0E4FF 
 3840      FF000000 
 3840      00
 3841 1dd6 A344504C 		variable "DPL","DPL","BASE" # 1 = NUMBER decided it's double-precision
 3841      EBFFFFFF 
 3841      E0E4FFFF 
 3841      00000000 
 3842 1de6 A3435350 		variable "CSP","CSP","DPL"	# Used as a temp to wind back stack?
 3842      ECFFFFFF 
GAS LISTING circforth.s 			page 78


 3842      D0E4FFFF 
 3842      00000000 
 3843 1df6 A3484C44 		variable "HLD","HLD","CSP"	# Buffer for formatted output
 3843      ECFFFFFF 
 3843      C0E4FFFF 
 3843      00000000 
 3844 1e06 A5422F42 		variable "BSlashBuf","B/BUF","HLD" # Size of TIB
 3844      5546EAFF 
 3844      FFFFAEE4 
 3844      FFFF0000 
 3844      0000
 3845              	
 3846 1e18 A2424CEB 		constant "BL","BL","BSlashBuf",32 # Space
 3846      FFFFFF96 
 3846      E4FFFF20 
 3846      000000
 3847              	
 3848 1e27 A3504144 		constant "PAD","PAD","BL",0	# This isn't really a contant; it's 
 3848      EDFFFFFF 
 3848      86E4FFFF 
 3848      00000000 
 3849              						# initialized by COLD and never written
 3850              						# by FORTH code.
 3851              	
 3852              	 #	These constants are used frequently enough in the code that it
 3853              	 #	makes sense (i.e., saves bytes) to make them words, even with the
 3854              	 #	ZBLIT hack.
 3855              	
 3856 1e37 A130EEFF 		constant "Zero","0","PAD",0
 3856      FFFF78E4 
 3856      FFFF0000 
 3856      0000
 3857 1e45 A131F0FF 		constant "One","1","Zero",1
 3857      FFFF6AE4 
 3857      FFFF0100 
 3857      0000
 3858 1e53 A132F0FF 		constant "Two","2","One",2
 3858      FFFF5CE4 
 3858      FFFF0200 
 3858      0000
 3859              	
 3860 1e61 A448414C 		code "HALT","HALT","Two"
 3860      54EDFFFF 
 3860      FF040000 
 3860      00
 3861 1e6e 00       		halt
 3862 1e6f 176B     		jmp (r11)
 3863              	
 3864              	#	BASEPAGE	-- address of base page
 3865              	#
 3866              	#	Pushes the address of the base page on the stack.
 3867              	
 3868 1e71 A8424153 		colon "BASEPAGE","BASEPAGE","HALT"
 3868      45504147 
 3868      45E7FFFF 
 3868      FF2EE4FF 
 3868      FF
GAS LISTING circforth.s 			page 79


 3869 1e82 9CEDFFFF 		offset OLIT
 3870 1e86 94E1FFFF 		offset __base_page
 3871 1e8a B9F5FFFF 		offset SemiS
 3872              	
 3873              	#	BDOS		parameter, function -- result
 3874              	#
 3875              	#	Calls the BDOS, pushing the return value.
 3876              	
 3877 1e8e A442444F 		code "BDOS","BDOS","BASEPAGE"
 3877      53DEFFFF 
 3877      FF040000 
 3877      00
 3878 1e9b D05750   		movl r7,r0		# form address of parameter
 3879 1e9e 800450   		addb2 $4,r0
 3880 1ea1 D0607E   		movl (r0),-(sp)		# push parameter
 3881 1ea4 D0677E   		movl (r7),-(sp)		# push func
 3882 1ea7 D05057   		movl r0,r7		# discard func
 3883 1eaa D0CF68E1 		movl __bdos_pointer,r0	# call BDOS
 3883      50
 3884 1eaf FB0260   		calls $2,(r0)
 3885 1eb2 D05067   		movl r0,(r7)		# Replace parameter with return value
 3886 1eb5 176B     		jmp (r11)
 3887              	
 3888              	
 3889              	#	DOES>		--
 3890              	#
 3891              	#	Compiles a trampoline that allows the behavior of a created
 3892              	#	word to be specified in FORTH. Compilation continues after the
 3893              	#	trampoline is compiled to allow definition of the behavior.
 3894              	
 3895 1eb7 E5444F45 		colon "Does","DOES>","BDOS",Immediate
 3895      533ED1FF 
 3895      FFFFEBE3 
 3895      FFFF
 3896              	
 3897              	
 3898              	#	What we're trying to do is compile the following sequence onto
 3899              	#	the end of the word we're building:
 3900              	#
 3901              	#	(;CODE) 8		( point CFA of new word at trampoline )
 3902              	#	;S			( Exit the creating word )
 3903              	#
 3904              	#	followed by the trampoline.
 3905              	
 3906 1ec5 59EDFFFF 		offset OLIT		# Compile reference to (;CODE)
 3907 1ec9 B3F6FFFF 		offset PSemiCode
 3908 1ecd 61EEFFFF 		offset OComma
 3909              	
 3910 1ed1 22EDFFFF 		literal 8		# compile the 4
 3910      08000000 
 3911 1ed9 F4EDFFFF 		offset Comma
 3912              	
 3913 1edd 41EDFFFF 		offset OLIT		# Compile reference to ;S
 3914 1ee1 62F5FFFF 		offset SemiS
 3915 1ee5 49EEFFFF 		offset OComma
 3916              	
 3917              	#	Now do the trampoline. It consists of the following
GAS LISTING circforth.s 			page 80


 3918              	#	code:
 3919              	#
 3920              	#	82 04 57	subb2 $4,r7	# Make space on the math stack
 3921              	#	de a9 04 67	moval 4(r9),r7	# put PFA on math stack
 3922              	#	d0 5a 7e	movl r10,-(sp)	# save return address
 3923              	#	de af 03 5a	moval 1f,r10	# point IP at DOES> tail
 3924              	#	17 6b		jmp (r11)	# NEXT
 3925              	#			1:		# DOES> tail starts here
 3926              	#	As longwords, that's:
 3927              	#
 3928              	#	de570482
 3929              	#	d06704a9
 3930              	#	afde7e5a
 3931              	#	6b175a03
 3932              	
 3933 1ee9 0AEDFFFF 		literal 0xde570482
 3933      820457DE 
 3934 1ef1 DCEDFFFF 		offset Comma
 3935 1ef5 FEECFFFF 		literal 0xd06704a9
 3935      A90467D0 
 3936 1efd D0EDFFFF 		offset Comma
 3937 1f01 F2ECFFFF 		literal 0xafde7e5a
 3937      5A7EDEAF 
 3938 1f09 C4EDFFFF 		offset Comma
 3939 1f0d E6ECFFFF 		literal 0x6b175a03
 3939      035A176B 
 3940 1f15 B8EDFFFF 		offset Comma
 3941              	
 3942              	#	And we're done
 3943              	
 3944 1f19 2AF5FFFF 		offset SemiS
 3945              		
 3946              	#	FCB		--
 3947              	#
 3948              	#	Creates an FCB, initializing it to a blank filename.
 3949              	
 3950 1f1d A3464342 		colon "FCB","FCB","Does"
 3950      96FFFFFF 
 3950      87E3FFFF 
 3951 1f29 C8F7FFFF 		offset CREATE
 3952              	
 3953              	#	Make the FCB refer to the default drive
 3954              	
 3955 1f2d C6ECFFFF 		literal 0
 3955      00000000 
 3956 1f35 DAEDFFFF 		offset CComma
 3957              	
 3958              	#	Make spaces for the filename.ext
 3959              	
 3960 1f39 BAECFFFF 		literal 0x20202020
 3960      20202020 
 3961 1f41 8CEDFFFF 		offset Comma
 3962 1f45 AEECFFFF 		literal 0x20202020
 3962      20202020 
 3963 1f4d 80EDFFFF 		offset Comma
 3964              	
 3965 1f51 A2ECFFFF 		literal 0x2020
GAS LISTING circforth.s 			page 81


 3965      20200000 
 3966 1f59 97EDFFFF 		offset WComma
 3967 1f5d 96ECFFFF 		literal 0x20
 3967      20000000 
 3968 1f65 AAEDFFFF 		offset CComma
 3969              	
 3970              	#	Clear the reserved bytes
 3971              	
 3972 1f69 D4FEFFFF 		offset Zero
 3973 1f6d 60EDFFFF 		offset Comma
 3974              	
 3975              	#	Clear the allocation map
 3976              	
 3977 1f71 CCFEFFFF 		offset Zero
 3978 1f75 58EDFFFF 		offset Comma
 3979 1f79 C4FEFFFF 		offset Zero
 3980 1f7d 50EDFFFF 		offset Comma
 3981 1f81 BCFEFFFF 		offset Zero
 3982 1f85 48EDFFFF 		offset Comma
 3983 1f89 B4FEFFFF 		offset Zero
 3984 1f8d 40EDFFFF 		offset Comma
 3985              	
 3986              	#	Clear current record (1 byte) and random record (3 bytes)
 3987              	
 3988 1f91 ACFEFFFF 		offset Zero
 3989 1f95 38EDFFFF 		offset Comma
 3990              	
 3991              	#	Behave like a variable: 
 3992              	#
 3993              	#		DOES> ;
 3994              	#
 3995              	#	which leaves a copy of the PFA on the stack.
 3996              	
 3997 1f99 E3F5FFFF 		does
 3997      08000000 
 3997      A2F4FFFF 
 3997      820457DE 
 3997      A90467D0 
 3998 1fb5 8EF4FFFF 		offset SemiS
 3999              		
 4000              	Forth$$LastWord_NFA:
 4001              	
 4002 1fb9 A4434F4C 		code "COLD","COLD","FCB"
 4002      445FFFFF 
 4002      FF040000 
 4002      00
 4003              	
 4004              	 #	When we are started, the BIOS/Loader/whatever enters here
 4005              	
 4006              	Forth$$Begin:
 4007 1fc6 DECFD6E2 		moval Next,r11
 4007      5B
 4008 1fcb DECF31E2 		moval TibBuffer,PTib_pfa
 4008      CF9BFD
 4009 1fd2 DECF2CE2 		moval TibSpace,TIB_pfa
 4009      CFA4FD
 4010 1fd9 DECF74E2 		moval TibSpaceEnd,r0
GAS LISTING circforth.s 			page 82


 4010      50
 4011 1fde DECF20E2 		moval TibSpace,r1
 4011      51
 4012 1fe3 C35051CF 		subl3 r0,r1,BSlashBuf_pfa
 4012      2BFE
 4013              	 #	movl $(TibSpaceEnd - TibSpace),BSlashBuf_pfa
 4014 1fe9 DEAF2DCF 		moval DictEnd,DP_pfa
 4014      9DFD
 4015 1fef D4CFA8FD 		clrl IN_pfa
 4016 1ff3 DEAFC3CF 		moval Forth$$LastWord_NFA,CURRENT_pfa
 4016      B6FD
 4017 1ff9 D4CFC4FD 		clrl STATE_pfa
 4018 1ffd D00ACFD0 		movl $10,BASE_pfa
 4018      FD
 4019 2002 D4CFDCFD 		clrl DPL_pfa
 4020 2006 DECF96E2 		moval PadSpaceEnd,PAD_pfa
 4020      CF26FE
 4021 200d DECFEFE0 		moval MathSpace,r7	# initialize math stack pointer
 4021      57
 4022              		
 4023 2012 DECF52FC 		moval ABORT+4,r10
 4023      5A
 4024 2017 176B     		jmp (r11)
 4025              	
 4026              	DictEnd:
 4027 2019 010101   		.end
GAS LISTING circforth.s 			page 83


DEFINED SYMBOLS
         circforth.s:21     text:00000000 __start
         circforth.s:31     text:0000001a __base_page
         circforth.s:29     text:00000016 __bdos_pointer
         circforth.s:33     text:0000001e __initial_sp
         circforth.s:4006   text:00001fc6 Forth$$Begin
         circforth.s:44     text:00000022 __ConIn_Args
         circforth.s:49     text:0000002e ConIn
         circforth.s:61     text:00000037 __ConSt_Args
         circforth.s:66     text:00000043 ConSt
         circforth.s:78     text:0000004c __ConOut_Args
         circforth.s:81     text:00000054 __ConOut_Char
         circforth.s:84     text:00000058 ConOut
                         absolute:00000040 Immediate
         circforth.s:308    text:00000100 MathSpace
         circforth.s:314    text:00000200 TibBuffer
         circforth.s:317    text:00000202 TibSpace
         circforth.s:319    text:00000251 TibSpaceEnd
         circforth.s:326    text:000002a0 PadSpaceEnd
         circforth.s:348    text:000002a0 Next
         circforth.s:377    text:000002ac DoCol
         circforth.s:384    text:000002b5 DoCon
         circforth.s:391    text:000002be DoVar
         circforth.s:406    text:000002c7 header_temp
         circforth.s:406    text:000002c7 null_nfa
         circforth.s:406    text:000002c9 null_lfa
         circforth.s:406    text:000002cd null
         circforth.s:619    text:00000417 FromR
         circforth.s:718    text:000004d2 DROP
         circforth.s:2696   text:00001443 SemiS
         circforth.s:420    text:000002dd BRANCH_nfa
         circforth.s:420    text:000002e4 BRANCH_lfa
         circforth.s:420    text:000002e8 BRANCH
                             text:000002ec BRANCH_pfa
         circforth.s:421    text:000002ec ZBranch_Branch
         circforth.s:435    text:000002f1 ZBranch_nfa
         circforth.s:435    text:000002f9 ZBranch_lfa
         circforth.s:435    text:000002fd ZBranch
                             text:00000301 ZBranch_pfa
         circforth.s:440    text:0000030b ZBranch_Skip
         circforth.s:472    text:0000030f PLoop_nfa
         circforth.s:472    text:00000316 PLoop_lfa
         circforth.s:472    text:0000031a PLoop
                             text:0000031e PLoop_pfa
         circforth.s:474    text:00000320 PLoop_1
         circforth.s:497    text:0000032c PPLoop_nfa
         circforth.s:497    text:00000334 PPLoop_lfa
         circforth.s:497    text:00000338 PPLoop
                             text:0000033c PPLoop_pfa
         circforth.s:511    text:00000344 PDo_nfa
         circforth.s:511    text:00000349 PDo_lfa
         circforth.s:511    text:0000034d PDo
                             text:00000351 PDo_pfa
         circforth.s:530    text:00000362 DO_nfa
         circforth.s:530    text:00000365 DO_lfa
         circforth.s:530    text:00000369 DO
                             text:0000036d DO_pfa
GAS LISTING circforth.s 			page 84


         circforth.s:3101   text:00001755 COMPILE
         circforth.s:1739   text:00000c95 HERE
         circforth.s:3447   text:00001a56 QPairs
         circforth.s:1810   text:00000d2e OComma
         circforth.s:567    text:000003ae PlusLoop_nfa
         circforth.s:567    text:000003b4 PlusLoop_lfa
         circforth.s:567    text:000003b8 PlusLoop
                             text:000003bc PlusLoop_pfa
         circforth.s:599    text:000003eb I_nfa
         circforth.s:599    text:000003ed I_lfa
         circforth.s:599    text:000003f1 I
                             text:000003f5 I_pfa
         circforth.s:600    text:000003f5 RI1
         circforth.s:609    text:000003fd ToR_nfa
         circforth.s:609    text:00000400 ToR_lfa
         circforth.s:609    text:00000404 ToR
                             text:00000408 ToR_pfa
         circforth.s:619    text:00000410 FromR_nfa
         circforth.s:619    text:00000413 FromR_lfa
                             text:0000041b FromR_pfa
         circforth.s:634    text:00000423 R_nfa
         circforth.s:634    text:00000425 R_lfa
         circforth.s:634    text:00000429 R
                             text:0000042d R_pfa
         circforth.s:643    text:0000042f RPFetch_nfa
         circforth.s:643    text:00000433 RPFetch_lfa
         circforth.s:643    text:00000437 RPFetch
                             text:0000043b RPFetch_pfa
         circforth.s:661    text:00000443 RPStore_nfa
         circforth.s:661    text:00000447 RPStore_lfa
         circforth.s:661    text:0000044b RPStore
                             text:0000044f RPStore_pfa
         circforth.s:669    text:00000456 SWAP_nfa
         circforth.s:669    text:0000045b SWAP_lfa
         circforth.s:669    text:0000045f SWAP
                             text:00000463 SWAP_pfa
         circforth.s:685    text:00000477 ROT_nfa
         circforth.s:685    text:0000047b ROT_lfa
         circforth.s:685    text:0000047f ROT
                             text:00000483 ROT_pfa
         circforth.s:697    text:00000497 OVER_nfa
         circforth.s:697    text:0000049c OVER_lfa
         circforth.s:697    text:000004a0 OVER
                             text:000004a4 OVER_pfa
         circforth.s:708    text:000004b2 DUP_nfa
         circforth.s:708    text:000004b6 DUP_lfa
         circforth.s:708    text:000004ba DUP
                             text:000004be DUP_pfa
         circforth.s:718    text:000004c9 DROP_nfa
         circforth.s:718    text:000004ce DROP_lfa
                             text:000004d6 DROP_pfa
         circforth.s:727    text:000004db TwoDUP_nfa
         circforth.s:727    text:000004e0 TwoDUP_lfa
         circforth.s:727    text:000004e4 TwoDUP
                             text:000004e8 TwoDUP_pfa
         circforth.s:740    text:000004f3 SPFetch_nfa
         circforth.s:740    text:000004f7 SPFetch_lfa
GAS LISTING circforth.s 			page 85


         circforth.s:740    text:000004fb SPFetch
                             text:000004ff SPFetch_pfa
         circforth.s:752    text:0000050a SPStore_nfa
         circforth.s:752    text:0000050e SPStore_lfa
         circforth.s:752    text:00000512 SPStore
                             text:00000516 SPStore_pfa
         circforth.s:766    text:0000051d MinusDup_nfa
         circforth.s:766    text:00000522 MinusDup_lfa
         circforth.s:766    text:00000526 MinusDup
                             text:0000052a MinusDup_pfa
         circforth.s:771    text:0000053a DDup1
         circforth.s:781    text:0000053e StoreCSP_nfa
         circforth.s:781    text:00000543 StoreCSP_lfa
         circforth.s:781    text:00000547 StoreCSP
                             text:0000054b StoreCSP_pfa
         circforth.s:3842   text:00001dee CSP
         circforth.s:1504   text:00000aae Store
         circforth.s:792    text:0000055b Subtract_nfa
         circforth.s:792    text:0000055d Subtract_lfa
         circforth.s:792    text:00000561 Subtract
                             text:00000565 Subtract_pfa
         circforth.s:914    text:00000630 ZLess
         circforth.s:833    text:00000589 AND_nfa
         circforth.s:833    text:0000058d AND_lfa
         circforth.s:833    text:00000591 AND
                             text:00000595 AND_pfa
         circforth.s:846    text:000005a6 OR_nfa
         circforth.s:846    text:000005a9 OR_lfa
         circforth.s:846    text:000005ad OR
                             text:000005b1 OR_pfa
         circforth.s:858    text:000005bf XOR_nfa
         circforth.s:858    text:000005c3 XOR_lfa
         circforth.s:858    text:000005c7 XOR
                             text:000005cb XOR_pfa
         circforth.s:870    text:000005d9 PlusStore_nfa
         circforth.s:870    text:000005dc PlusStore_lfa
         circforth.s:870    text:000005e0 PlusStore
                             text:000005e4 PlusStore_pfa
         circforth.s:884    text:000005f3 TOGGLE_nfa
         circforth.s:884    text:000005fa TOGGLE_lfa
         circforth.s:884    text:000005fe TOGGLE
                             text:00000602 TOGGLE_pfa
         circforth.s:900    text:00000611 ZEq_nfa
         circforth.s:900    text:00000614 ZEq_lfa
         circforth.s:900    text:00000618 ZEq
                             text:0000061c ZEq_pfa
         circforth.s:907    text:00000624 Yes
         circforth.s:904    text:00000620 No
         circforth.s:914    text:00000629 ZLess_nfa
         circforth.s:914    text:0000062c ZLess_lfa
                             text:00000634 ZLess_pfa
         circforth.s:925    text:0000063a Equal_nfa
         circforth.s:925    text:0000063c Equal_lfa
         circforth.s:925    text:00000640 Equal
                             text:00000644 Equal_pfa
         circforth.s:950    text:0000065a NotEq_nfa
         circforth.s:950    text:0000065d NotEq_lfa
GAS LISTING circforth.s 			page 86


         circforth.s:950    text:00000661 NotEq
                             text:00000665 NotEq_pfa
         circforth.s:975    text:0000067b ULess_nfa
         circforth.s:975    text:0000067e ULess_lfa
         circforth.s:975    text:00000682 ULess
                             text:00000686 ULess_pfa
         circforth.s:997    text:0000069c Greater_nfa
         circforth.s:997    text:0000069e Greater_lfa
         circforth.s:997    text:000006a2 Greater
                             text:000006a6 Greater_pfa
         circforth.s:1009   text:000006b2 NotEqual_nfa
         circforth.s:1009   text:000006b5 NotEqual_lfa
         circforth.s:1009   text:000006b9 NotEqual
                             text:000006bd NotEqual_pfa
         circforth.s:1017   text:000006c5 Plus_nfa
         circforth.s:1017   text:000006c7 Plus_lfa
         circforth.s:1017   text:000006cb Plus
                             text:000006cf Plus_pfa
         circforth.s:1028   text:000006dd MINUS_nfa
         circforth.s:1028   text:000006e3 MINUS_lfa
         circforth.s:1028   text:000006e7 MINUS
                             text:000006eb MINUS_pfa
         circforth.s:1038   text:000006f0 NOT_nfa
         circforth.s:1038   text:000006f4 NOT_lfa
         circforth.s:1038   text:000006f8 NOT
                             text:000006fc NOT_pfa
         circforth.s:1046   text:00000701 OnePlus_nfa
         circforth.s:1046   text:00000704 OnePlus_lfa
         circforth.s:1046   text:00000708 OnePlus
                             text:0000070c OnePlus_pfa
         circforth.s:3857   text:00001e4b One
         circforth.s:1057   text:00000718 TwoPlus_nfa
         circforth.s:1057   text:0000071b TwoPlus_lfa
         circforth.s:1057   text:0000071f TwoPlus
                             text:00000723 TwoPlus_pfa
         circforth.s:3858   text:00001e59 Two
         circforth.s:1066   text:0000072f OneMinus_nfa
         circforth.s:1066   text:00000732 OneMinus_lfa
         circforth.s:1066   text:00000736 OneMinus
                             text:0000073a OneMinus_pfa
         circforth.s:1082   text:00000746 PlusMinus_nfa
         circforth.s:1082   text:00000749 PlusMinus_lfa
         circforth.s:1082   text:0000074d PlusMinus
                             text:00000751 PlusMinus_pfa
         circforth.s:1087   text:00000761 PM1
         circforth.s:1095   text:00000765 ABS_nfa
         circforth.s:1095   text:00000769 ABS_lfa
         circforth.s:1095   text:0000076d ABS
                             text:00000771 ABS_pfa
         circforth.s:1111   text:0000077d MIN_nfa
         circforth.s:1111   text:00000781 MIN_lfa
         circforth.s:1111   text:00000785 MIN
                             text:00000789 MIN_pfa
         circforth.s:1117   text:0000079d Min1
         circforth.s:1132   text:000007a5 MAX_nfa
         circforth.s:1132   text:000007a9 MAX_lfa
         circforth.s:1132   text:000007ad MAX
GAS LISTING circforth.s 			page 87


                             text:000007b1 MAX_pfa
         circforth.s:1138   text:000007c5 Max1
         circforth.s:1148   text:000007cd Star_nfa
         circforth.s:1148   text:000007cf Star_lfa
         circforth.s:1148   text:000007d3 Star
                             text:000007d7 Star_pfa
         circforth.s:1406   text:000009c0 MStar
         circforth.s:1160   text:000007e3 SlashMod_nfa
         circforth.s:1160   text:000007e8 SlashMod_lfa
         circforth.s:1160   text:000007ec SlashMod
                             text:000007f0 SlashMod_pfa
         circforth.s:1390   text:000009a5 SignExtend
         circforth.s:1427   text:000009f3 MSlash
         circforth.s:1173   text:00000804 Slash_nfa
         circforth.s:1173   text:00000806 Slash_lfa
         circforth.s:1173   text:0000080a Slash
                             text:0000080e Slash_pfa
         circforth.s:1185   text:0000081e MOD_nfa
         circforth.s:1185   text:00000822 MOD_lfa
         circforth.s:1185   text:00000826 MOD
                             text:0000082a MOD_pfa
         circforth.s:1199   text:00000836 StarSlashMod_nfa
         circforth.s:1199   text:0000083c StarSlashMod_lfa
         circforth.s:1199   text:00000840 StarSlashMod
                             text:00000844 StarSlashMod_pfa
         circforth.s:1215   text:00000858 StarSlash_nfa
         circforth.s:1215   text:0000085b StarSlash_lfa
         circforth.s:1215   text:0000085f StarSlash
                             text:00000863 StarSlash_pfa
         circforth.s:1225   text:00000873 ShiftLeft_nfa
         circforth.s:1225   text:00000876 ShiftLeft_lfa
         circforth.s:1225   text:0000087a ShiftLeft
                             text:0000087e ShiftLeft_pfa
         circforth.s:1236   text:0000088d ShiftRight_nfa
         circforth.s:1236   text:00000890 ShiftRight_lfa
         circforth.s:1236   text:00000894 ShiftRight
                             text:00000898 ShiftRight_pfa
         circforth.s:1246   text:000008a4 DPlus_nfa
         circforth.s:1246   text:000008a7 DPlus_lfa
         circforth.s:1246   text:000008ab DPlus
                             text:000008af DPlus_pfa
         circforth.s:1270   text:000008cc DSubtract_nfa
         circforth.s:1270   text:000008cf DSubtract_lfa
         circforth.s:1270   text:000008d3 DSubtract
                             text:000008d7 DSubtract_pfa
         circforth.s:1295   text:000008f4 DMINUS_nfa
         circforth.s:1295   text:000008fb DMINUS_lfa
         circforth.s:1295   text:000008ff DMINUS
                             text:00000903 DMINUS_pfa
         circforth.s:1321   text:00000918 DPlusMinus_nfa
         circforth.s:1321   text:0000091c DPlusMinus_lfa
         circforth.s:1321   text:00000920 DPlusMinus
                             text:00000924 DPlusMinus_pfa
         circforth.s:1326   text:00000934 DPM1
         circforth.s:1335   text:00000938 DABS_nfa
         circforth.s:1335   text:0000093d DABS_lfa
         circforth.s:1335   text:00000941 DABS
GAS LISTING circforth.s 			page 88


                             text:00000945 DABS_pfa
         circforth.s:1345   text:00000951 UStar_nfa
         circforth.s:1345   text:00000954 UStar_lfa
         circforth.s:1345   text:00000958 UStar
                             text:0000095c UStar_pfa
         circforth.s:1363   text:0000096f USlash_nfa
         circforth.s:1363   text:00000972 USlash_lfa
         circforth.s:1363   text:00000976 USlash
                             text:0000097a USlash_pfa
         circforth.s:1390   text:0000099c SignExtend_nfa
         circforth.s:1390   text:000009a1 SignExtend_lfa
                             text:000009a9 SignExtend_pfa
         circforth.s:1395   text:000009b1 S2D1
         circforth.s:1406   text:000009b9 MStar_nfa
         circforth.s:1406   text:000009bc MStar_lfa
                             text:000009c4 MStar_pfa
         circforth.s:1427   text:000009ec MSlash_nfa
         circforth.s:1427   text:000009ef MSlash_lfa
                             text:000009f7 MSlash_pfa
         circforth.s:1457   text:00000a37 MSlashMod_nfa
         circforth.s:1457   text:00000a3d MSlashMod_lfa
         circforth.s:1457   text:00000a41 MSlashMod
                             text:00000a45 MSlashMod_pfa
         circforth.s:3856   text:00001e3d Zero
         circforth.s:1473   text:00000a6d Fetch_nfa
         circforth.s:1473   text:00000a6f Fetch_lfa
         circforth.s:1473   text:00000a73 Fetch
                             text:00000a77 Fetch_pfa
         circforth.s:1481   text:00000a7d CFetch_nfa
         circforth.s:1481   text:00000a80 CFetch_lfa
         circforth.s:1481   text:00000a84 CFetch
                             text:00000a88 CFetch_pfa
         circforth.s:1491   text:00000a8e TFetch_nfa
         circforth.s:1491   text:00000a91 TFetch_lfa
         circforth.s:1491   text:00000a95 TFetch
                             text:00000a99 TFetch_pfa
         circforth.s:1504   text:00000aa8 Store_nfa
         circforth.s:1504   text:00000aaa Store_lfa
                             text:00000ab2 Store_pfa
         circforth.s:1517   text:00000ac1 CStore_nfa
         circforth.s:1517   text:00000ac4 CStore_lfa
         circforth.s:1517   text:00000ac8 CStore
                             text:00000acc CStore_pfa
         circforth.s:1528   text:00000adb TStore_nfa
         circforth.s:1528   text:00000ade TStore_lfa
         circforth.s:1528   text:00000ae2 TStore
                             text:00000ae6 TStore_pfa
         circforth.s:1543   text:00000afb PlusPlus_nfa
         circforth.s:1543   text:00000afe PlusPlus_lfa
         circforth.s:1543   text:00000b02 PlusPlus
                             text:00000b06 PlusPlus_pfa
         circforth.s:1555   text:00000b16 MinusMinus_nfa
         circforth.s:1555   text:00000b19 MinusMinus_lfa
         circforth.s:1555   text:00000b1d MinusMinus
                             text:00000b21 MinusMinus_pfa
         circforth.s:1569   text:00000b35 CVTWLFetch_nfa
         circforth.s:1569   text:00000b3c CVTWLFetch_lfa
GAS LISTING circforth.s 			page 89


         circforth.s:1569   text:00000b40 CVTWLFetch
                             text:00000b44 CVTWLFetch_pfa
         circforth.s:1578   text:00000b4a WStore_nfa
         circforth.s:1578   text:00000b4d WStore_lfa
         circforth.s:1578   text:00000b51 WStore
                             text:00000b55 WStore_pfa
         circforth.s:1592   text:00000b63 CMOVE_nfa
         circforth.s:1592   text:00000b69 CMOVE_lfa
         circforth.s:1592   text:00000b6d CMOVE
                             text:00000b71 CMOVE_pfa
         circforth.s:1601   text:00000b83 CMove1
         circforth.s:1616   text:00000b8b FILL_nfa
         circforth.s:1616   text:00000b90 FILL_lfa
         circforth.s:1616   text:00000b94 FILL
                             text:00000b98 FILL_pfa
         circforth.s:1631   text:00000bb4 Fill1
         circforth.s:1628   text:00000bae Fill0
         circforth.s:1639   text:00000bb6 ERASE_nfa
         circforth.s:1639   text:00000bbc ERASE_lfa
         circforth.s:1639   text:00000bc0 ERASE
                             text:00000bc4 ERASE_pfa
         circforth.s:1650   text:00000bd0 BLANKS_nfa
         circforth.s:1650   text:00000bd7 BLANKS_lfa
         circforth.s:1650   text:00000bdb BLANKS
                             text:00000bdf BLANKS_pfa
         circforth.s:3846   text:00001e1f BL
         circforth.s:1671   text:00000bff ZBLIT_nfa
         circforth.s:1671   text:00000c05 ZBLIT_lfa
         circforth.s:1671   text:00000c09 ZBLIT
                             text:00000c0d ZBLIT_pfa
         circforth.s:1681   text:00000c15 OLIT_nfa
         circforth.s:1681   text:00000c1a OLIT_lfa
         circforth.s:1681   text:00000c1e OLIT
                             text:00000c22 OLIT_pfa
         circforth.s:3839   text:00001dbd STATE
         circforth.s:1767   text:00000ccd Comma
         circforth.s:1724   text:00000c5b DLITERAL_nfa
         circforth.s:1724   text:00000c64 DLITERAL_lfa
         circforth.s:1724   text:00000c68 DLITERAL
                             text:00000c6c DLITERAL_pfa
         circforth.s:1732   text:00000c88 D1
         circforth.s:1739   text:00000c8c HERE_nfa
         circforth.s:1739   text:00000c91 HERE_lfa
                             text:00000c99 HERE_pfa
         circforth.s:3836   text:00001d88 DP
         circforth.s:1753   text:00000ca5 ALLOT_nfa
         circforth.s:1753   text:00000cab ALLOT_lfa
         circforth.s:1753   text:00000caf ALLOT
                             text:00000cb3 ALLOT_pfa
         circforth.s:1767   text:00000cc7 Comma_nfa
         circforth.s:1767   text:00000cc9 Comma_lfa
                             text:00000cd1 Comma_pfa
         circforth.s:1782   text:00000ce9 WComma_nfa
         circforth.s:1782   text:00000cec WComma_lfa
         circforth.s:1782   text:00000cf0 WComma
                             text:00000cf4 WComma_pfa
         circforth.s:1796   text:00000d08 CComma_nfa
GAS LISTING circforth.s 			page 90


         circforth.s:1796   text:00000d0b CComma_lfa
         circforth.s:1796   text:00000d0f CComma
                             text:00000d13 CComma_pfa
         circforth.s:1810   text:00000d27 OComma_nfa
         circforth.s:1810   text:00000d2a OComma_lfa
                             text:00000d32 OComma_pfa
         circforth.s:1821   text:00000d42 KEY_nfa
         circforth.s:1821   text:00000d46 KEY_lfa
         circforth.s:1821   text:00000d4a KEY
                             text:00000d4e KEY_pfa
         circforth.s:1833   text:00000d59 QKey_nfa
         circforth.s:1833   text:00000d5e QKey_lfa
         circforth.s:1833   text:00000d62 QKey
                             text:00000d66 QKey_pfa
         circforth.s:1845   text:00000d71 EMIT_nfa
         circforth.s:1845   text:00000d76 EMIT_lfa
         circforth.s:1845   text:00000d7a EMIT
                             text:00000d7e EMIT_pfa
         circforth.s:1860   text:00000d8a FConOut
         circforth.s:1851   text:00000d89 invis
         circforth.s:1864   text:00000d92 fconout1
         circforth.s:1875   text:00000d93 DotOff_nfa
         circforth.s:1875   text:00000d98 DotOff_lfa
         circforth.s:1875   text:00000d9c DotOff
                             text:00000da0 DotOff_pfa
         circforth.s:1886   text:00000da5 DotOn_nfa
         circforth.s:1886   text:00000da9 DotOn_lfa
         circforth.s:1886   text:00000dad DotOn
                             text:00000db1 DotOn_pfa
         circforth.s:1898   text:00000db7 QTerminal_nfa
         circforth.s:1898   text:00000dc1 QTerminal_lfa
         circforth.s:1898   text:00000dc5 QTerminal
                             text:00000dc9 QTerminal_pfa
         circforth.s:1912   text:00000dd0 CR_nfa
         circforth.s:1912   text:00000dd3 CR_lfa
         circforth.s:1912   text:00000dd7 CR
                             text:00000ddb CR_pfa
         circforth.s:1924   text:00000df7 SPACE_nfa
         circforth.s:1924   text:00000dfd SPACE_lfa
         circforth.s:1924   text:00000e01 SPACE
                             text:00000e05 SPACE_pfa
         circforth.s:1935   text:00000e11 HEX_nfa
         circforth.s:1935   text:00000e15 HEX_lfa
         circforth.s:1935   text:00000e19 HEX
                             text:00000e1d HEX_pfa
         circforth.s:3840   text:00001dce BASE
         circforth.s:1947   text:00000e31 DECIMAL_nfa
         circforth.s:1947   text:00000e39 DECIMAL_lfa
         circforth.s:1947   text:00000e3d DECIMAL
                             text:00000e41 DECIMAL_pfa
         circforth.s:1961   text:00000e55 DIGIT_nfa
         circforth.s:1961   text:00000e5b DIGIT_lfa
         circforth.s:1961   text:00000e5f DIGIT
                             text:00000e63 DIGIT_pfa
         circforth.s:1993   text:00000ea9 Digit_Nope
         circforth.s:1975   text:00000e7e Digit_Alpha
         circforth.s:1983   text:00000e96 Digit_Test
GAS LISTING circforth.s 			page 91


         circforth.s:2005   text:00000eb0 TYPE_nfa
         circforth.s:2005   text:00000eb5 TYPE_lfa
         circforth.s:2005   text:00000eb9 TYPE
                             text:00000ebd TYPE_pfa
         circforth.s:2010   text:00000ec9 Type1
         circforth.s:2023   text:00000ed4 COUNT_nfa
         circforth.s:2023   text:00000eda COUNT_lfa
         circforth.s:2023   text:00000ede COUNT
                             text:00000ee2 COUNT_pfa
         circforth.s:2038   text:00000ef0 PDotQuote_nfa
         circforth.s:2038   text:00000ef5 PDotQuote_lfa
         circforth.s:2038   text:00000ef9 PDotQuote
                             text:00000efd PDotQuote_pfa
         circforth.s:2071   text:00000f21 DotQuote_nfa
         circforth.s:2071   text:00000f24 DotQuote_lfa
         circforth.s:2071   text:00000f28 DotQuote
                             text:00000f2c DotQuote_pfa
         circforth.s:2086   text:00000f68 Quote1
         circforth.s:3252   text:0000189d WORD
         circforth.s:2090   text:00000f78 Quote2
         circforth.s:2114   text:00000f7c QUERY_nfa
         circforth.s:2114   text:00000f82 QUERY_lfa
         circforth.s:2114   text:00000f86 QUERY
                             text:00000f8a QUERY_pfa
         circforth.s:3834   text:00001d69 PTib
         circforth.s:3877   text:00001e97 BDOS
         circforth.s:3835   text:00001d79 TIB
         circforth.s:3837   text:00001d97 IN
         circforth.s:2155   text:00000fda ENCLOSE_nfa
         circforth.s:2155   text:00000fe2 ENCLOSE_lfa
         circforth.s:2155   text:00000fe6 ENCLOSE
                             text:00000fea ENCLOSE_pfa
         circforth.s:2165   text:00000ff9 encl1
         circforth.s:2183   text:0000101b encl2
         circforth.s:2198   text:00001036 encl4
         circforth.s:2213   text:00001045 HOLD_nfa
         circforth.s:2213   text:0000104a HOLD_lfa
         circforth.s:2213   text:0000104e HOLD
                             text:00001052 HOLD_pfa
         circforth.s:3843   text:00001dfe HLD
         circforth.s:2253   text:0000106a PNumber_nfa
         circforth.s:2253   text:00001073 PNumber_lfa
         circforth.s:2253   text:00001077 PNumber
                             text:0000107b PNumber_pfa
         circforth.s:2254   text:0000107b Num1
         circforth.s:2283   text:000010ef Num2
         circforth.s:3841   text:00001dde DPL
         circforth.s:2280   text:000010e3 Num3
         circforth.s:2319   text:000010f7 NUMBER_nfa
         circforth.s:2319   text:000010fe NUMBER_lfa
         circforth.s:2319   text:00001102 NUMBER
                             text:00001106 NUMBER_pfa
         circforth.s:2332   text:0000113e N1
         circforth.s:2350   text:0000118a N2
         circforth.s:3394   text:000019df QError
         circforth.s:2355   text:0000119e N3
         circforth.s:2368   text:000011a2 SPACES_nfa
GAS LISTING circforth.s 			page 92


         circforth.s:2368   text:000011a9 SPACES_lfa
         circforth.s:2368   text:000011ad SPACES
                             text:000011b1 SPACES_pfa
         circforth.s:2379   text:000011d9 Spaces1
         circforth.s:2376   text:000011cd Spaces2
         circforth.s:3848   text:00001e2f PAD
         circforth.s:2406   text:000011f8 HashGreater_nfa
         circforth.s:2406   text:000011fb HashGreater_lfa
         circforth.s:2406   text:000011ff HashGreater
                             text:00001203 HashGreater_pfa
         circforth.s:2426   text:00001223 SIGN_nfa
         circforth.s:2426   text:00001228 SIGN_lfa
         circforth.s:2426   text:0000122c SIGN
                             text:00001230 SIGN_pfa
         circforth.s:2433   text:0000124c Sign1
         circforth.s:2453   text:00001250 Hash_nfa
         circforth.s:2453   text:00001252 Hash_lfa
         circforth.s:2453   text:00001256 Hash
                             text:0000125a Hash_pfa
         circforth.s:2465   text:0000128e Hash1
         circforth.s:2478   text:000012a2 HashS_nfa
         circforth.s:2478   text:000012a5 HashS_lfa
         circforth.s:2478   text:000012a9 HashS
                             text:000012ad HashS_pfa
         circforth.s:2479   text:000012ad HashS1
         circforth.s:2500   text:000012c9 DDotR_nfa
         circforth.s:2500   text:000012cd DDotR_lfa
         circforth.s:2500   text:000012d1 DDotR
                             text:000012d5 DDotR_pfa
         circforth.s:2524   text:0000130d DotR_nfa
         circforth.s:2524   text:00001310 DotR_lfa
         circforth.s:2524   text:00001314 DotR
                             text:00001318 DotR_pfa
         circforth.s:2537   text:0000132c DDot_nfa
         circforth.s:2537   text:0000132f DDot_lfa
         circforth.s:2537   text:00001333 DDot
                             text:00001337 DDot_pfa
         circforth.s:2551   text:00001347 Dot_nfa
         circforth.s:2551   text:00001349 Dot_lfa
         circforth.s:2551   text:0000134d Dot
                             text:00001351 Dot_pfa
         circforth.s:2563   text:0000135d Question_nfa
         circforth.s:2563   text:0000135f Question_lfa
         circforth.s:2563   text:00001363 Question
                             text:00001367 Question_pfa
         circforth.s:2576   text:00001373 UDot_nfa
         circforth.s:2576   text:00001376 UDot_lfa
         circforth.s:2576   text:0000137a UDot
                             text:0000137e UDot_pfa
         circforth.s:2602   text:0000138a EXPECT_nfa
         circforth.s:2602   text:00001391 EXPECT_lfa
         circforth.s:2602   text:00001395 EXPECT
                             text:00001399 EXPECT_pfa
         circforth.s:2610   text:000013ab Expect1
         circforth.s:2648   text:000013ef Expect_CR
         circforth.s:2634   text:000013d4 Expect_BS
         circforth.s:2656   text:00001402 Expect_Exit
GAS LISTING circforth.s 			page 93


         circforth.s:2675   text:00001404 IDDot_nfa
         circforth.s:2675   text:00001408 IDDot_lfa
         circforth.s:2675   text:0000140c IDDot
                             text:00001410 IDDot_pfa
         circforth.s:2696   text:0000143c SemiS_nfa
         circforth.s:2696   text:0000143f SemiS_lfa
                             text:00001447 SemiS_pfa
         circforth.s:2718   text:00001466 RBracket_nfa
         circforth.s:2718   text:00001468 RBracket_lfa
         circforth.s:2718   text:0000146c RBracket
                             text:00001470 RBracket_pfa
         circforth.s:2740   text:00001484 Colon_nfa
         circforth.s:2740   text:00001486 Colon_lfa
         circforth.s:2740   text:0000148a Colon
                             text:0000148e Colon_pfa
         circforth.s:3428   text:00001a2f QExec
         circforth.s:3065   text:000016f1 CREATE
         circforth.s:2873   text:0000157c PSemiCode
         circforth.s:2760   text:000014aa Semicolon_nfa
         circforth.s:2760   text:000014ac Semicolon_lfa
         circforth.s:2760   text:000014b0 Semicolon
                             text:000014b4 Semicolon_pfa
         circforth.s:3461   text:00001a77 QCSP
         circforth.s:3024   text:000016b3 SMUDGE
         circforth.s:2782   text:000014cc CONSTANT_nfa
         circforth.s:2782   text:000014d5 CONSTANT_lfa
         circforth.s:2782   text:000014d9 CONSTANT
                             text:000014dd CONSTANT_pfa
         circforth.s:2805   text:000014f5 VARIABLE_nfa
         circforth.s:2805   text:000014fe VARIABLE_lfa
         circforth.s:2805   text:00001502 VARIABLE
                             text:00001506 VARIABLE_pfa
         circforth.s:2823   text:00001516 CODE_nfa
         circforth.s:2823   text:0000151b CODE_lfa
         circforth.s:2823   text:0000151f CODE
                             text:00001523 CODE_pfa
         circforth.s:2848   text:00001547 EDOC_nfa
         circforth.s:2848   text:0000154c EDOC_lfa
         circforth.s:2848   text:00001550 EDOC
                             text:00001554 EDOC_pfa
         circforth.s:2873   text:00001570 PSemiCode_nfa
         circforth.s:2873   text:00001578 PSemiCode_lfa
                             text:00001580 PSemiCode_pfa
         circforth.s:3002   text:0000167c PFA
         circforth.s:2961   text:0000162c CFA
         circforth.s:2915   text:000015c8 MinusFind_nfa
         circforth.s:2915   text:000015ce MinusFind_lfa
         circforth.s:2915   text:000015d2 MinusFind
                             text:000015d6 MinusFind_pfa
         circforth.s:3295   text:0000192c PFind
         circforth.s:2932   text:000015ee Comment_nfa
         circforth.s:2932   text:000015f0 Comment_lfa
         circforth.s:2932   text:000015f4 Comment
                             text:000015f8 Comment_pfa
         circforth.s:2961   text:00001624 CFA_nfa
         circforth.s:2961   text:00001628 CFA_lfa
                             text:00001630 CFA_pfa
GAS LISTING circforth.s 			page 94


         circforth.s:2981   text:00001640 NFA_nfa
         circforth.s:2981   text:00001644 NFA_lfa
         circforth.s:2981   text:00001648 NFA
                             text:0000164c NFA_pfa
         circforth.s:2983   text:00001650 NFA1
         circforth.s:3002   text:00001674 PFA_nfa
         circforth.s:3002   text:00001678 PFA_lfa
                             text:00001680 PFA_pfa
         circforth.s:3024   text:000016a8 SMUDGE_nfa
         circforth.s:3024   text:000016af SMUDGE_lfa
                             text:000016b7 SMUDGE_pfa
         circforth.s:3838   text:00001dab CURRENT
         circforth.s:3065   text:000016e6 CREATE_nfa
         circforth.s:3065   text:000016ed CREATE_lfa
                             text:000016f5 CREATE_pfa
         circforth.s:3101   text:00001749 COMPILE_nfa
         circforth.s:3101   text:00001751 COMPILE_lfa
                             text:00001759 COMPILE_pfa
         circforth.s:3122   text:00001785 BracketsCOMPILE_nfa
         circforth.s:3122   text:0000178f BracketsCOMPILE_lfa
         circforth.s:3122   text:00001793 BracketsCOMPILE
                             text:00001797 BracketsCOMPILE_pfa
         circforth.s:3141   text:000017b7 IMMEDIATE_nfa
         circforth.s:3141   text:000017c1 IMMEDIATE_lfa
         circforth.s:3141   text:000017c5 IMMEDIATE
                             text:000017c9 IMMEDIATE_pfa
         circforth.s:3165   text:000017dd FORGET_nfa
         circforth.s:3165   text:000017e4 FORGET_lfa
         circforth.s:3165   text:000017e8 FORGET
                             text:000017ec FORGET_pfa
         circforth.s:3224   text:00001874 Tick
         circforth.s:3197   text:00001820 VLIST_nfa
         circforth.s:3197   text:00001826 VLIST_lfa
         circforth.s:3197   text:0000182a VLIST
                             text:0000182e VLIST_pfa
         circforth.s:3199   text:00001832 vlist1
         circforth.s:3211   text:00001862 vlist2
         circforth.s:3224   text:0000186e Tick_nfa
         circforth.s:3224   text:00001870 Tick_lfa
                             text:00001878 Tick_pfa
         circforth.s:3252   text:00001894 WORD_nfa
         circforth.s:3252   text:00001899 WORD_lfa
                             text:000018a1 WORD_pfa
         circforth.s:3284   text:00001905 EXECUTE_nfa
         circforth.s:3284   text:0000190d EXECUTE_lfa
         circforth.s:3284   text:00001911 EXECUTE
                             text:00001915 EXECUTE_pfa
         circforth.s:3295   text:00001921 PFind_nfa
         circforth.s:3295   text:00001928 PFind_lfa
                             text:00001930 PFind_pfa
         circforth.s:3301   text:00001939 PFind1
         circforth.s:3338   text:0000197b PFind2
         circforth.s:3352   text:00001996 PFind3
         circforth.s:3373   text:0000199d ERROR_nfa
         circforth.s:3373   text:000019a3 ERROR_lfa
         circforth.s:3373   text:000019a7 ERROR
                             text:000019ab ERROR_pfa
GAS LISTING circforth.s 			page 95


         circforth.s:3646   text:00001c1b QUIT
         circforth.s:3394   text:000019d4 QError_nfa
         circforth.s:3394   text:000019db QError_lfa
                             text:000019e3 QError_pfa
         circforth.s:3399   text:000019f3 QErr1
         circforth.s:3413   text:000019fb QComp_nfa
         circforth.s:3413   text:00001a01 QComp_lfa
         circforth.s:3413   text:00001a05 QComp
                             text:00001a09 QComp_pfa
         circforth.s:3428   text:00001a25 QExec_nfa
         circforth.s:3428   text:00001a2b QExec_lfa
                             text:00001a33 QExec_pfa
         circforth.s:3447   text:00001a4b QPairs_nfa
         circforth.s:3447   text:00001a52 QPairs_lfa
                             text:00001a5a QPairs_pfa
         circforth.s:3461   text:00001a6e QCSP_nfa
         circforth.s:3461   text:00001a73 QCSP_lfa
                             text:00001a7b QCSP_pfa
         circforth.s:3475   text:00001a9b QStack_nfa
         circforth.s:3475   text:00001aa2 QStack_lfa
         circforth.s:3475   text:00001aa6 QStack
                             text:00001aaa QStack_pfa
         circforth.s:3486   text:00001aae IF_nfa
         circforth.s:3486   text:00001ab1 IF_lfa
         circforth.s:3486   text:00001ab5 IF
                             text:00001ab9 IF_pfa
         circforth.s:3508   text:00001ad5 ELSE_nfa
         circforth.s:3508   text:00001ada ELSE_lfa
         circforth.s:3508   text:00001ade ELSE
                             text:00001ae2 ELSE_pfa
         circforth.s:3531   text:00001b1b THEN
         circforth.s:3531   text:00001b12 THEN_nfa
         circforth.s:3531   text:00001b17 THEN_lfa
                             text:00001b1f THEN_pfa
         circforth.s:3549   text:00001b43 BEGIN_nfa
         circforth.s:3549   text:00001b49 BEGIN_lfa
         circforth.s:3549   text:00001b4d BEGIN
                             text:00001b51 BEGIN_pfa
         circforth.s:3565   text:00001b61 UNTIL_nfa
         circforth.s:3565   text:00001b67 UNTIL_lfa
         circforth.s:3565   text:00001b6b UNTIL
                             text:00001b6f UNTIL_pfa
         circforth.s:3582   text:00001b87 AGAIN_nfa
         circforth.s:3582   text:00001b8d AGAIN_lfa
         circforth.s:3582   text:00001b91 AGAIN
                             text:00001b95 AGAIN_pfa
         circforth.s:3600   text:00001bb1 REPEAT_nfa
         circforth.s:3600   text:00001bb8 REPEAT_lfa
         circforth.s:3600   text:00001bbc REPEAT
                             text:00001bc0 REPEAT_pfa
         circforth.s:3619   text:00001be8 WHILE_nfa
         circforth.s:3619   text:00001bee WHILE_lfa
         circforth.s:3619   text:00001bf2 WHILE
                             text:00001bf6 WHILE_pfa
         circforth.s:3628   text:00001c02 NOP_nfa
         circforth.s:3628   text:00001c06 NOP_lfa
         circforth.s:3628   text:00001c0a NOP
GAS LISTING circforth.s 			page 96


                             text:00001c0e NOP_pfa
         circforth.s:3646   text:00001c12 QUIT_nfa
         circforth.s:3646   text:00001c17 QUIT_lfa
                             text:00001c1f QUIT_pfa
         circforth.s:3648   text:00001c23 Q1
         circforth.s:3776   text:00001cbe INTERPRET
         circforth.s:3659   text:00001c4e Q2
         circforth.s:3677   text:00001c5a ABORT_nfa
         circforth.s:3677   text:00001c60 ABORT_lfa
         circforth.s:3677   text:00001c64 ABORT
                             text:00001c68 ABORT_pfa
         circforth.s:3693   text:00001c91 DotCPU
         circforth.s:3693   text:00001c88 DotCPU_nfa
         circforth.s:3693   text:00001c8d DotCPU_lfa
                             text:00001c95 DotCPU_pfa
         circforth.s:3776   text:00001cb0 INTERPRET_nfa
         circforth.s:3776   text:00001cba INTERPRET_lfa
                             text:00001cc2 INTERPRET_pfa
         circforth.s:3777   text:00001cc2 I1
         circforth.s:3794   text:00001d06 I2
         circforth.s:3789   text:00001cf2 I3
         circforth.s:3791   text:00001cfa I4
         circforth.s:3807   text:00001d3a I5
         circforth.s:3804   text:00001d2e I6
         circforth.s:3806   text:00001d36 I7
         circforth.s:3818   text:00001d46 EXIT_nfa
         circforth.s:3818   text:00001d4b EXIT_lfa
         circforth.s:3818   text:00001d4f EXIT
                             text:00001d53 EXIT_pfa
         circforth.s:3834   text:00001d5f PTib_nfa
         circforth.s:3834   text:00001d65 PTib_lfa
                             text:00001d6d PTib_pfa
         circforth.s:3835   text:00001d71 TIB_nfa
         circforth.s:3835   text:00001d75 TIB_lfa
                             text:00001d7d TIB_pfa
         circforth.s:3836   text:00001d81 DP_nfa
         circforth.s:3836   text:00001d84 DP_lfa
                             text:00001d8c DP_pfa
         circforth.s:3837   text:00001d90 IN_nfa
         circforth.s:3837   text:00001d93 IN_lfa
                             text:00001d9b IN_pfa
         circforth.s:3838   text:00001d9f CURRENT_nfa
         circforth.s:3838   text:00001da7 CURRENT_lfa
                             text:00001daf CURRENT_pfa
         circforth.s:3839   text:00001db3 STATE_nfa
         circforth.s:3839   text:00001db9 STATE_lfa
                             text:00001dc1 STATE_pfa
         circforth.s:3840   text:00001dc5 BASE_nfa
         circforth.s:3840   text:00001dca BASE_lfa
                             text:00001dd2 BASE_pfa
         circforth.s:3841   text:00001dd6 DPL_nfa
         circforth.s:3841   text:00001dda DPL_lfa
                             text:00001de2 DPL_pfa
         circforth.s:3842   text:00001de6 CSP_nfa
         circforth.s:3842   text:00001dea CSP_lfa
                             text:00001df2 CSP_pfa
         circforth.s:3843   text:00001df6 HLD_nfa
GAS LISTING circforth.s 			page 97


         circforth.s:3843   text:00001dfa HLD_lfa
                             text:00001e02 HLD_pfa
         circforth.s:3844   text:00001e06 BSlashBuf_nfa
         circforth.s:3844   text:00001e0c BSlashBuf_lfa
         circforth.s:3844   text:00001e10 BSlashBuf
                             text:00001e14 BSlashBuf_pfa
         circforth.s:3846   text:00001e18 BL_nfa
         circforth.s:3846   text:00001e1b BL_lfa
                             text:00001e23 BL_pfa
         circforth.s:3848   text:00001e27 PAD_nfa
         circforth.s:3848   text:00001e2b PAD_lfa
                             text:00001e33 PAD_pfa
         circforth.s:3856   text:00001e37 Zero_nfa
         circforth.s:3856   text:00001e39 Zero_lfa
                             text:00001e41 Zero_pfa
         circforth.s:3857   text:00001e45 One_nfa
         circforth.s:3857   text:00001e47 One_lfa
                             text:00001e4f One_pfa
         circforth.s:3858   text:00001e53 Two_nfa
         circforth.s:3858   text:00001e55 Two_lfa
                             text:00001e5d Two_pfa
         circforth.s:3860   text:00001e61 HALT_nfa
         circforth.s:3860   text:00001e66 HALT_lfa
         circforth.s:3860   text:00001e6a HALT
                             text:00001e6e HALT_pfa
         circforth.s:3868   text:00001e71 BASEPAGE_nfa
         circforth.s:3868   text:00001e7a BASEPAGE_lfa
         circforth.s:3868   text:00001e7e BASEPAGE
                             text:00001e82 BASEPAGE_pfa
         circforth.s:3877   text:00001e8e BDOS_nfa
         circforth.s:3877   text:00001e93 BDOS_lfa
                             text:00001e9b BDOS_pfa
         circforth.s:3895   text:00001eb7 Does_nfa
         circforth.s:3895   text:00001ebd Does_lfa
         circforth.s:3895   text:00001ec1 Does
                             text:00001ec5 Does_pfa
         circforth.s:3950   text:00001f1d FCB_nfa
         circforth.s:3950   text:00001f21 FCB_lfa
         circforth.s:3950   text:00001f25 FCB
                             text:00001f29 FCB_pfa
         circforth.s:4000   text:00001fb9 Forth$$LastWord_NFA
         circforth.s:4002   text:00001fb9 COLD_nfa
         circforth.s:4002   text:00001fbe COLD_lfa
         circforth.s:4002   text:00001fc2 COLD
                             text:00001fc6 COLD_pfa
         circforth.s:4026   text:00002019 DictEnd

NO UNDEFINED SYMBOLS
